<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Jonathan Sarker</title>
<link>http://thenewexecutor.github.io/notes.html</link>
<atom:link href="http://thenewexecutor.github.io/notes.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.550</generator>
<lastBuildDate>Mon, 27 Oct 2025 06:25:28 GMT</lastBuildDate>
<item>
  <title>Decorator Notes</title>
  <link>http://thenewexecutor.github.io/notes/Decorators.html</link>
  <description><![CDATA[ 




<section id="decorator-notes" class="level1">
<h1>Decorator Notes</h1>
<p>These are notes based on Real Python’s <a href="https://realpython.com/primer-on-python-decorators/#functions">primer</a>.</p>
<section id="simple-decorators" class="level2">
<h2 class="anchored" data-anchor-id="simple-decorators">Simple Decorators</h2>
<section id="returning-functions" class="level3">
<h3 class="anchored" data-anchor-id="returning-functions">Returning Functions</h3>
<div id="cell-4" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parent(num):</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> first_child():</span>
<span id="cb1-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hi, I am Emma"</span></span>
<span id="cb1-4"></span>
<span id="cb1-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> second_child():</span>
<span id="cb1-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Call me Liam"</span></span>
<span id="cb1-7"></span>
<span id="cb1-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb1-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> first_child</span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb1-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> second_child</span></code></pre></div>
</div>
<div id="cell-5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">parent(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>&lt;function __main__.parent.&lt;locals&gt;.second_child()&gt;</code></pre>
</div>
</div>
</section>
<section id="simple-decorators-with-syntactic-sugar" class="level3">
<h3 class="anchored" data-anchor-id="simple-decorators-with-syntactic-sugar">Simple Decorators with Syntactic Sugar</h3>
<div id="cell-7" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> my_decorator(func):</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper():</span>
<span id="cb4-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Something is happening before the function is called."</span>)</span>
<span id="cb4-4">        func()</span>
<span id="cb4-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Something is happening after the function is called."</span>)</span>
<span id="cb4-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> say_whee():</span>
<span id="cb4-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Whee!"</span>)</span>
<span id="cb4-10"></span>
<span id="cb4-11">say_whee <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> my_decorator(say_whee)</span></code></pre></div>
</div>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">say_whee()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Something is happening before the function is called.
Whee!
Something is happening after the function is called.</code></pre>
</div>
</div>
<p>Now with syntactic sugar:</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> my_decorator(func):</span>
<span id="cb7-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper():</span>
<span id="cb7-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Something is happening before the function is called."</span>)</span>
<span id="cb7-4">        func()</span>
<span id="cb7-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Something is happening after the function is called."</span>)</span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@my_decorator</span></span>
<span id="cb7-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> say_whee():</span>
<span id="cb7-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Whee!"</span>)</span></code></pre></div>
</div>
<div id="cell-11" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">say_whee()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Something is happening before the function is called.
Whee!
Something is happening after the function is called.</code></pre>
</div>
</div>
</section>
<section id="decorating-functions-with-arguments" class="level3">
<h3 class="anchored" data-anchor-id="decorating-functions-with-arguments">Decorating Functions with Arguments</h3>
<p>Decorating simple functions is easy enough, but what happens when decorated function takes in arguments? The second function <code>greet()</code> is incompatible with the decorator, <code>do_twice</code> since the inner function does not take any arguments.</p>
<div id="cell-14" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> do_twice(func):</span>
<span id="cb10-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper_do_twice():</span>
<span id="cb10-3">        func()</span>
<span id="cb10-4">        func()</span>
<span id="cb10-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper_do_twice</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@do_twice</span></span>
<span id="cb10-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> say_whee():</span>
<span id="cb10-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Whee!'</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@do_twice</span></span>
<span id="cb10-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> greet(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb10-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Hello </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">!'</span>)</span>
<span id="cb10-14"></span>
<span id="cb10-15">say_whee()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Whee!
Whee!</code></pre>
</div>
</div>
<div id="cell-15" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">greet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Jonathan'</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>TypeError: do_twice.&lt;locals&gt;.wrapper_do_twice() takes 0 positional arguments but 1 was given</code></pre>
</div>
</div>
<p>Instead, we can add arguments to our decorator to handle any potential parameters using <code>*args, **kwargs**</code>:</p>
<div id="cell-17" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> do_twice(func):</span>
<span id="cb14-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper_do_twice(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb14-3">        func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb14-4">        func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb14-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper_do_twice</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@do_twice</span></span>
<span id="cb14-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> say_whee():</span>
<span id="cb14-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Whee!"</span>)</span>
<span id="cb14-10">    </span>
<span id="cb14-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@do_twice</span></span>
<span id="cb14-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> greet(name):</span>
<span id="cb14-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Hello </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</div>
<div id="cell-18" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">say_whee()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Whee!
Whee!</code></pre>
</div>
</div>
<div id="cell-19" class="cell" data-scrolled="true" data-execution_count="35">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">greet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Jonathan'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello Jonathan
Hello Jonathan</code></pre>
</div>
</div>
</section>
<section id="decorating-functions-with-return-values" class="level3">
<h3 class="anchored" data-anchor-id="decorating-functions-with-return-values">Decorating Functions with Return Values</h3>
<p>For functions that return values, we must make sure the decorator’s inner function also returns a value. If not, like in the case of the <code>do_twice</code> decorator’s current form, the decorated function’s return value will get lost:</p>
<div id="cell-22" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@do_twice</span></span>
<span id="cb19-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> return_greeting(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb19-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Creating greeting'</span>)</span>
<span id="cb19-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Hi </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">!'</span></span>
<span id="cb19-5"></span>
<span id="cb19-6">hi_jonathan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> return_greeting(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Jonathan'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Creating greeting
Creating greeting</code></pre>
</div>
</div>
<div id="cell-23" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(hi_jonathan)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>None</code></pre>
</div>
</div>
<div id="cell-24" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> do_twice(func):</span>
<span id="cb23-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> do_twice_wrapper(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb23-3">       func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb23-4">       <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb23-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> do_twice_wrapper</span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@do_twice</span></span>
<span id="cb23-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> return_greeting(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb23-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Creating greeting'</span>)</span>
<span id="cb23-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Hi </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">!'</span></span>
<span id="cb23-11"></span>
<span id="cb23-12">hi_jonathan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> return_greeting(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Jonathan'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Creating greeting
Creating greeting</code></pre>
</div>
</div>
<div id="cell-25" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(hi_jonathan)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hi Jonathan!</code></pre>
</div>
</div>
</section>
<section id="introspection" class="level3">
<h3 class="anchored" data-anchor-id="introspection">Introspection</h3>
<p>Python functions have built-in documentation. Decorated ones simply show themselves as the inner function of the wrapper. To get the original, useful documenation of a decorated function, the decorator must have <code>@functools.wraps(func)</code> above its inner function definition:</p>
<div id="cell-28" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>&lt;function print(*args, sep=' ', end='\n', file=None, flush=False)&gt;</code></pre>
</div>
</div>
<div id="cell-29" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>'print'</code></pre>
</div>
</div>
<div id="cell-30" class="cell" data-scrolled="true" data-execution_count="21">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Help on built-in function print in module builtins:

print(...)
    print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)
    
    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.
</code></pre>
</div>
</div>
<div id="cell-31" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">say_whee</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>&lt;function __main__.do_twice.&lt;locals&gt;.wrapper_do_twice(*args, **kwargs)&gt;</code></pre>
</div>
</div>
<div id="cell-32" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">say_whee.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>'wrapper_do_twice'</code></pre>
</div>
</div>
<div id="cell-33" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span>(say_whee)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Help on function wrapper_do_twice in module __main__:

wrapper_do_twice(*args, **kwargs)
</code></pre>
</div>
</div>
<div id="cell-34" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> wraps</span>
<span id="cb39-2"></span>
<span id="cb39-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> do_twice(func):</span>
<span id="cb39-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@wraps</span>(func)</span>
<span id="cb39-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper_do_twice(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb39-6">        func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb39-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb39-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper_do_twice</span>
<span id="cb39-9"></span>
<span id="cb39-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@do_twice</span></span>
<span id="cb39-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> say_whee():</span>
<span id="cb39-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Whee!"</span>)</span></code></pre></div>
</div>
<div id="cell-35" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">say_whee</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>&lt;function __main__.say_whee()&gt;</code></pre>
</div>
</div>
<div id="cell-36" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">say_whee.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>'say_whee'</code></pre>
</div>
</div>
<div id="cell-37" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span>(say_whee)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Help on function say_whee in module __main__:

say_whee()
</code></pre>
</div>
</div>
<div id="cell-38" class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>()</span></code></pre></div>
</div>
</section>
</section>
<section id="decorator-real-world-examples" class="level2">
<h2 class="anchored" data-anchor-id="decorator-real-world-examples">Decorator Real World Examples</h2>
<p>The pattern for many decorators will take this form:</p>
<div id="cell-41" class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functools</span>
<span id="cb47-2"></span>
<span id="cb47-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decorator(func):</span>
<span id="cb47-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@functools.wrap</span>(func)</span>
<span id="cb47-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper_decorator(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb47-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do something before</span></span>
<span id="cb47-7">        value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb47-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do something after</span></span>
<span id="cb47-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> value</span>
<span id="cb47-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper_decorator</span></code></pre></div>
</div>
<section id="timing-functions" class="level3">
<h3 class="anchored" data-anchor-id="timing-functions">Timing Functions</h3>
<div id="cell-43" class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functools</span>
<span id="cb48-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb48-3"></span>
<span id="cb48-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> timer(func):</span>
<span id="cb48-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Print the runtime of the decorated function"""</span></span>
<span id="cb48-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@functools.wraps</span>(func)</span>
<span id="cb48-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper_timer(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb48-8">        start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb48-9">        value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb48-10">        end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.perf_counter()</span>
<span id="cb48-11">        runtime <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start</span>
<span id="cb48-12">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Finished </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>func<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">() in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>runtime<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> secs"</span>)</span>
<span id="cb48-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> value</span>
<span id="cb48-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper_timer</span></code></pre></div>
</div>
<div id="cell-44" class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@timer</span></span>
<span id="cb49-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> waste_some_time(num_times: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb49-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_times):</span>
<span id="cb49-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([number<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> number <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10_000</span>)])</span>
<span id="cb49-5"></span>
<span id="cb49-6">waste_some_time(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb49-7">        </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Finished waste_some_time() in 0.0021 secs</code></pre>
</div>
</div>
<div id="cell-45" class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">waste_some_time(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Finished waste_some_time() in 1.1273 secs</code></pre>
</div>
</div>
</section>
<section id="debugging-code" class="level3">
<h3 class="anchored" data-anchor-id="debugging-code">Debugging Code</h3>
<p>We can take advantage of the namespace access in the wrapped function to display parameters and return values for debugging:</p>
<div id="cell-48" class="cell" data-scrolled="true" data-execution_count="52">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functools</span>
<span id="cb53-2"></span>
<span id="cb53-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> debug(func):</span>
<span id="cb53-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Print the function signature and return value"""</span></span>
<span id="cb53-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@functools.wraps</span>(func)</span>
<span id="cb53-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper_debug(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb53-7">        args_repr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">repr</span>(a) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> args]</span>
<span id="cb53-8">        kwargs_repr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">repr</span>(v)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> kwargs.items()]</span>
<span id="cb53-9">        signature <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>.join(args_repr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> kwargs_repr)</span>
<span id="cb53-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Calling </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>func<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>signature<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span>
<span id="cb53-11">        value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb53-12">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>func<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">() returned </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">repr</span>(value)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb53-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> value</span>
<span id="cb53-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper_debug</span>
<span id="cb53-15"></span>
<span id="cb53-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@debug</span></span>
<span id="cb53-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_greeting(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, age: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb53-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> age <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb53-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Howdy </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">!"</span></span>
<span id="cb53-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb53-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Whoa </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">! </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>age<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> already?! You're growing up!"</span></span>
<span id="cb53-22"></span>
<span id="cb53-23">make_greeting(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Benjamin"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Calling make_greeting('Benjamin')
make_greeting() returned 'Howdy Benjamin!'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>'Howdy Benjamin!'</code></pre>
</div>
</div>
<div id="cell-49" class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">make_greeting(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Juan"</span>, age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">114</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Calling make_greeting('Juan', age=114)
make_greeting() returned "Whoa Juan! 114 already?! You're growing up!"</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="53">
<pre><code>"Whoa Juan! 114 already?! You're growing up!"</code></pre>
</div>
</div>
<p>This is more impactful when used on small inconvenience functions not called directly:</p>
<div id="cell-51" class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb59-2"></span>
<span id="cb59-3">math.factorial <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> debug(math.factorial)</span>
<span id="cb59-4"></span>
<span id="cb59-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> approximate_e(terms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>):</span>
<span id="cb59-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> math.factorial(n) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(terms))</span>
<span id="cb59-7"></span>
<span id="cb59-8">approximate_e(terms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Calling factorial(0)
factorial() returned 1
Calling factorial(1)
factorial() returned 1
Calling factorial(2)
factorial() returned 2
Calling factorial(3)
factorial() returned 6
Calling factorial(4)
factorial() returned 24</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="54">
<pre><code>2.7083333333333335</code></pre>
</div>
</div>
</section>
<section id="slowing-down-code" class="level3">
<h3 class="anchored" data-anchor-id="slowing-down-code">Slowing Down Code</h3>
<p>Sometimes, it’s useful to slow down code for the purposes of rate limiting, which can be achieved by a decorator:</p>
<div id="cell-54" class="cell" data-scrolled="true" data-execution_count="55">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functools</span>
<span id="cb62-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb62-3"></span>
<span id="cb62-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> slow_down(func):</span>
<span id="cb62-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@functools.wraps</span>(func)</span>
<span id="cb62-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper_slow_down(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb62-7">        time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb62-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb62-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper_slow_down</span>
<span id="cb62-10"></span>
<span id="cb62-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@slow_down</span></span>
<span id="cb62-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> countdown(from_number):</span>
<span id="cb62-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> from_number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb62-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Liftoff!"</span>)</span>
<span id="cb62-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb62-16">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(from_number)</span>
<span id="cb62-17">        countdown(from_number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb62-18"></span>
<span id="cb62-19">countdown(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>3
2
1
Liftoff!</code></pre>
</div>
</div>
</section>
<section id="registering-plugins" class="level3">
<h3 class="anchored" data-anchor-id="registering-plugins">Registering Plugins</h3>
<p>Here we use a decorator to leave functions unmodified, but record them in a dictionary. This is a list separate from <code>globals()</code>:</p>
<div id="cell-57" class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">PLUGINS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb64-2"></span>
<span id="cb64-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> register(func):</span>
<span id="cb64-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Register a funciton as a plug-in"""</span></span>
<span id="cb64-5">    PLUGINS[func.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func</span>
<span id="cb64-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> func</span>
<span id="cb64-7"></span>
<span id="cb64-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@register</span></span>
<span id="cb64-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> say_hello(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb64-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Hello </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb64-11"></span>
<span id="cb64-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@register</span></span>
<span id="cb64-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> be_awesome(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb64-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Yo </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, together, we're awesome!"</span></span>
<span id="cb64-15"></span>
<span id="cb64-16">PLUGINS</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="56">
<pre><code>{'say_hello': &lt;function __main__.say_hello(name: str)&gt;,
 'be_awesome': &lt;function __main__.be_awesome(name: str)&gt;}</code></pre>
</div>
</div>
<div id="cell-58" class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">be_awesome(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Jonathan'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="58">
<pre><code>"Yo Jonathan, together, we're awesome!"</code></pre>
</div>
</div>
<p>Here we use the string representation of a Python object using the <code>!r</code> flag.</p>
<div id="cell-60" class="cell" data-scrolled="true" data-execution_count="59">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb68-2"></span>
<span id="cb68-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> randomly_greet(name):</span>
<span id="cb68-4">    greeter, greeter_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(PLUGINS.items()))</span>
<span id="cb68-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Using </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>greeter<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!r}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb68-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> greeter_func(name)</span>
<span id="cb68-7"></span>
<span id="cb68-8">randomly_greet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Using 'say_hello'</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>'Hello Alice'</code></pre>
</div>
</div>
</section>
<section id="authenticating-users" class="level3">
<h3 class="anchored" data-anchor-id="authenticating-users">Authenticating Users</h3>
<div id="cell-62" class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functools</span>
<span id="cb71-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> flask <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Flask, g, request, redirect, url_for</span>
<span id="cb71-3"></span>
<span id="cb71-4">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Flask(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>)</span>
<span id="cb71-5"></span>
<span id="cb71-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> login_required(func):</span>
<span id="cb71-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Make sure user is logged in before proceeding"""</span></span>
<span id="cb71-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@functools.wraps</span>(func)</span>
<span id="cb71-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper_login_required(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb71-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> g.user <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb71-11">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> redirect(url_for(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"login"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>request.url))</span>
<span id="cb71-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb71-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper_login_required</span>
<span id="cb71-14"></span>
<span id="cb71-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.route</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/secret"</span>)</span>
<span id="cb71-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@login_required</span></span>
<span id="cb71-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> secret():</span>
<span id="cb71-18">    ...</span></code></pre></div>
</div>
</section>
</section>
<section id="fancy-decorators" class="level2">
<h2 class="anchored" data-anchor-id="fancy-decorators">Fancy Decorators</h2>
<section id="decorating-classes" class="level3">
<h3 class="anchored" data-anchor-id="decorating-classes">Decorating Classes</h3>
<p>This can be achieved on the individual methods or the entire class itself:</p>
<div id="cell-66" class="cell" data-execution_count="64">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> TimeWaster:</span>
<span id="cb72-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@debug</span></span>
<span id="cb72-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, max_num: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb72-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_num</span>
<span id="cb72-5"></span>
<span id="cb72-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@timer</span></span>
<span id="cb72-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> waste_time(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, num_times: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb72-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_times):</span>
<span id="cb72-9">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([number<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> number <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_num)])</span>
<span id="cb72-10"></span>
<span id="cb72-11">tw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TimeWaster(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Calling __init__(&lt;__main__.TimeWaster object at 0x000001D0871DACF0&gt;, 1000)
__init__() returned None</code></pre>
</div>
</div>
<div id="cell-67" class="cell" data-execution_count="65">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">tw.waste_time(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Finished waste_time() in 0.1318 secs</code></pre>
</div>
</div>
<div id="cell-68" class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dataclasses <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dataclass</span>
<span id="cb76-2"></span>
<span id="cb76-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dataclass</span></span>
<span id="cb76-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PlayingCard:</span>
<span id="cb76-5">    rank: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb76-6">    suit: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span></code></pre></div>
</div>
<p>Decorating a class does not decorate its methods:</p>
<div id="cell-70" class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@timer</span></span>
<span id="cb77-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> TimeWaster:</span>
<span id="cb77-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, max_num):</span>
<span id="cb77-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_num</span>
<span id="cb77-5"></span>
<span id="cb77-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> waste_time(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, num_times):</span>
<span id="cb77-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_times):</span>
<span id="cb77-8">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_num)])</span>
<span id="cb77-9"></span>
<span id="cb77-10">tw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TimeWaster(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Finished TimeWaster() in 0.0000 secs</code></pre>
</div>
</div>
<div id="cell-71" class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">tw.waste_time(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>)</span></code></pre></div>
</div>
</section>
<section id="nesting-decorators" class="level3">
<h3 class="anchored" data-anchor-id="nesting-decorators">Nesting Decorators</h3>
<div id="cell-73" class="cell" data-execution_count="70">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@debug</span></span>
<span id="cb80-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@do_twice</span></span>
<span id="cb80-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> greet(name):</span>
<span id="cb80-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Hello </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">!'</span>)</span>
<span id="cb80-5"></span>
<span id="cb80-6">greet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Yadi'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Calling wrapper_do_twice('Yadi')
Hello Yadi!
Hello Yadi!
wrapper_do_twice() returned None</code></pre>
</div>
</div>
<div id="cell-74" class="cell" data-execution_count="71">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@do_twice</span></span>
<span id="cb82-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@debug</span></span>
<span id="cb82-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> greet(name):</span>
<span id="cb82-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Hello </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">!'</span>)</span>
<span id="cb82-5"></span>
<span id="cb82-6">greet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Yadi'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Calling greet('Yadi')
Hello Yadi!
greet() returned None
Calling greet('Yadi')
Hello Yadi!
greet() returned None</code></pre>
</div>
</div>
</section>
<section id="defining-decorators-with-arguments" class="level3">
<h3 class="anchored" data-anchor-id="defining-decorators-with-arguments">Defining Decorators with Arguments</h3>
<p>We know how to define a decorator on general functions and how to add functionality to the decorated function. To add parameters to a decorator, we apply the same principle and <em>decorate the decorator</em>.</p>
<p>This adds another layer. The syntactic sugar saves more typing since another layer of nesting requires another function reassignment, from outer to inner.</p>
<div id="cell-77" class="cell" data-execution_count="74">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functools</span>
<span id="cb84-2"></span>
<span id="cb84-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> repeat(num_times: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb84-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decorator_repeat(func):</span>
<span id="cb84-5">        functools.wraps(func)</span>
<span id="cb84-6">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper_decorator_repeat(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb84-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_times):</span>
<span id="cb84-8">                value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb84-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> value</span>
<span id="cb84-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper_decorator_repeat</span>
<span id="cb84-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> decorator_repeat</span>
<span id="cb84-12"></span>
<span id="cb84-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> greet(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb84-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Hello </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">!'</span>)</span>
<span id="cb84-15"></span>
<span id="cb84-16">repeat4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> repeat(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb84-17">greet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> repeat4(greet)</span>
<span id="cb84-18">greet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Jonathan'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello Jonathan!
Hello Jonathan!
Hello Jonathan!
Hello Jonathan!</code></pre>
</div>
</div>
<div id="cell-78" class="cell" data-scrolled="true" data-execution_count="76">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@repeat</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb86-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> greet(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb86-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Hello </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">!'</span>)</span>
<span id="cb86-4"></span>
<span id="cb86-5">greet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Jonathan'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello Jonathan!
Hello Jonathan!
Hello Jonathan!
Hello Jonathan!</code></pre>
</div>
</div>
</section>
<section id="creating-decorators-with-optional-arguments" class="level3">
<h3 class="anchored" data-anchor-id="creating-decorators-with-optional-arguments">Creating Decorators with Optional Arguments</h3>
<p>To modify our decorator to have optional arguments, we must modify the outermost layer in two ways: - to take in arguments with the * syntax - control flow of optional parameter values</p>
<p>This approach wraps the decorator with an outer layer that takes optional arguments, but also allows for a “skip” connection to layer below in case parameters are not specified. In this case, the synactic sugar will only take in the first argument, which is the function to be decorated.</p>
<div id="cell-81" class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> name(_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>, key1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>value1, key2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>value2, ...):</span>
<span id="cb88-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decorator_name(func):</span>
<span id="cb88-3">        ... <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create and return a wrapper function</span></span>
<span id="cb88-4"></span>
<span id="cb88-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> _func <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb88-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> decorator_name</span>
<span id="cb88-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb88-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> decorator_name(_func)</span></code></pre></div>
</div>
<div id="cell-82" class="cell" data-execution_count="78">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functools</span>
<span id="cb89-2"></span>
<span id="cb89-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> repeat(_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>, num_times<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb89-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decorator_repeat(func):</span>
<span id="cb89-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@functools.wraps</span>(func)</span>
<span id="cb89-6">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper_repeat(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb89-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_times):</span>
<span id="cb89-8">                value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb89-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> value</span>
<span id="cb89-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper_repeat</span>
<span id="cb89-11"></span>
<span id="cb89-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> _func <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb89-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> decorator_repeat</span>
<span id="cb89-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb89-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> decorator_repeat(_func)</span>
<span id="cb89-16"></span>
<span id="cb89-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@repeat</span></span>
<span id="cb89-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> say_whee():</span>
<span id="cb89-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Whee!'</span>)</span>
<span id="cb89-20"></span>
<span id="cb89-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@repeat</span>(num_times<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb89-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> greet(name):</span>
<span id="cb89-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Hello </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">!'</span>)</span>
<span id="cb89-24"></span>
<span id="cb89-25">say_whee()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Whee!
Whee!</code></pre>
</div>
</div>
<div id="cell-83" class="cell" data-scrolled="true" data-execution_count="79">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1">greet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Jonathan'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello Jonathan!
Hello Jonathan!
Hello Jonathan!</code></pre>
</div>
</div>
</section>
<section id="tracking-state-in-decorators" class="level3">
<h3 class="anchored" data-anchor-id="tracking-state-in-decorators">Tracking State in Decorators</h3>
<p>Here we an use <em>function attributes</em> to track a state variable such as a counter</p>
<div id="cell-86" class="cell">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functools</span>
<span id="cb93-2"></span>
<span id="cb93-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> count_calls(func):</span>
<span id="cb93-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@functools.wraps</span>(func)</span>
<span id="cb93-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper_count_calls(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb93-6">        wrapper_count_calls.num_calls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb93-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Call </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>wrapper_count_calls<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>num_calls<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>func<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">()'</span>)</span>
<span id="cb93-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb93-9">    wrapper_count_calls.num_calls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb93-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper_count_calls</span>
<span id="cb93-11">    </span></code></pre></div>
</div>
</section>
<section id="using-classes-as-decorators" class="level3">
<h3 class="anchored" data-anchor-id="using-classes-as-decorators">Using Classes as Decorators</h3>
<p>If we step back and think about how a closure decorator works, we have the following steps: - if there are decorator parameters, first initialize an “instance” with them set - next, rename the function to be modified with its wrapped self: <code>func = decorator(func)</code> - finally, call the function as normal with its usual inputs</p>
<p>These steps are similar to how a class instance works with a <code>__init__()</code> and <code>__call__()</code> method. The analogous steps are: - define an <code>__init__()</code> that sets the parameters of the decorator, acting as the outermost function in a nested closure - define a <code>__call__()</code> method with the structure of a closure - use <code>functools.wraps()</code> for appropriate introspection - have the <code>__call__()</code> method take in the function as an argument - define an inner function matching the decorated function’s inputs along with additional logic - return the inner function to finalize the <code>__call__()</code> method - for simpler, unparameterized decorating classes, use <code>functools.update_wrapper()</code> instead of <code>functools.wraps()</code> in the <code>__init__()</code> method for proper introspection</p>
<div id="cell-89" class="cell" data-execution_count="80">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Counter:</span>
<span id="cb94-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb94-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start</span>
<span id="cb94-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb94-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb94-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Current count is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>count<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb94-7"></span>
<span id="cb94-8">counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Counter()</span>
<span id="cb94-9"></span>
<span id="cb94-10">counter()</span>
<span id="cb94-11">    </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Current count is 1</code></pre>
</div>
</div>
<div id="cell-90" class="cell" data-execution_count="81">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1">counter()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Current count is 2</code></pre>
</div>
</div>
<p>Now, with the modifications to make it a simple decorator without parameters:</p>
<div id="cell-92" class="cell" data-execution_count="82">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functools</span>
<span id="cb98-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Counter:</span>
<span id="cb98-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, func):</span>
<span id="cb98-4">        functools.update_wrapper(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, func)</span>
<span id="cb98-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func</span>
<span id="cb98-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_calls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb98-7"></span>
<span id="cb98-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb98-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_calls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb98-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Call </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>num_calls<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>func<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">()"</span>)</span>
<span id="cb98-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb98-12"></span>
<span id="cb98-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@Counter</span></span>
<span id="cb98-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> say_whee():</span>
<span id="cb98-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Whee!'</span>)</span>
<span id="cb98-16"></span>
<span id="cb98-17"></span>
<span id="cb98-18">say_whee()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Call 1 of say_whee()
Whee!</code></pre>
</div>
</div>
<div id="cell-93" class="cell" data-execution_count="83">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1">say_whee()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Call 2 of say_whee()
Whee!</code></pre>
</div>
</div>
<div id="cell-94" class="cell" data-execution_count="84">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1">say_whee.num_calls</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="84">
<pre><code>2</code></pre>
</div>
</div>
<p>Finally, we have this example that was generated by Gemini where the <code>__init__()</code> sets parameters and the <code>__call__()</code> is implemented as a closure with general paramters:</p>
<div id="cell-96" class="cell" data-scrolled="true" data-execution_count="85">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb104-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functools</span>
<span id="cb104-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb104-3"></span>
<span id="cb104-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> FunctionLogger:</span>
<span id="cb104-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb104-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A class-based decorator to log function execution details.</span></span>
<span id="cb104-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    It takes parameters to customize the log output.</span></span>
<span id="cb104-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb104-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, log_level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"INFO"</span>, format_str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{timestamp}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{level}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">] - Entering '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{func_name}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>):</span>
<span id="cb104-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb104-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The __init__ method is called when the decorator is instantiated.</span></span>
<span id="cb104-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        It captures the decorator's arguments.</span></span>
<span id="cb104-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Example: @FunctionLogger(log_level="DEBUG")</span></span>
<span id="cb104-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb104-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Decorator `FunctionLogger` is being initialized with level: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>log_level<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb104-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log_level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_level</span>
<span id="cb104-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.format_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> format_str</span>
<span id="cb104-18"></span>
<span id="cb104-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, func):</span>
<span id="cb104-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb104-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The __call__ method is invoked with the decorated function as its argument.</span></span>
<span id="cb104-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        It must return a replacement (wrapper) function.</span></span>
<span id="cb104-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb104-24">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@functools.wraps</span>(func)</span>
<span id="cb104-25">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb104-26">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb104-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            This is the wrapper function that gets executed instead of the original.</span></span>
<span id="cb104-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            It contains the decorator's core logic.</span></span>
<span id="cb104-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            """</span></span>
<span id="cb104-30">            timestamp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.now().strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %H:%M:%S'</span>)</span>
<span id="cb104-31">            </span>
<span id="cb104-32">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Logic before the original function is called</span></span>
<span id="cb104-33">            log_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.format_str.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(</span>
<span id="cb104-34">                timestamp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>timestamp,</span>
<span id="cb104-35">                level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log_level,</span>
<span id="cb104-36">                func_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>func.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span></span>
<span id="cb104-37">            )</span>
<span id="cb104-38">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(log_message)</span>
<span id="cb104-39">            </span>
<span id="cb104-40">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Call the original function</span></span>
<span id="cb104-41">            result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb104-42">            </span>
<span id="cb104-43">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Logic after the original function is called</span></span>
<span id="cb104-44">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>timestamp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>log_level<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] - Exiting '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>func<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>)</span>
<span id="cb104-45">            </span>
<span id="cb104-46">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb104-47">            </span>
<span id="cb104-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The __call__ method returns the wrapper function</span></span>
<span id="cb104-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper</span>
<span id="cb104-50"></span>
<span id="cb104-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># --- Example Usage ---</span></span>
<span id="cb104-52"></span>
<span id="cb104-53"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@FunctionLogger</span>(log_level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEBUG"</span>, format_str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{timestamp}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{level}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> - Calling `</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{func_name}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`..."</span>)</span>
<span id="cb104-54"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add(x, y):</span>
<span id="cb104-55">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""This function adds two numbers together."""</span></span>
<span id="cb104-56">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  &gt; Inside add(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span>
<span id="cb104-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y</span>
<span id="cb104-58"></span>
<span id="cb104-59"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@FunctionLogger</span>(log_level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WARNING"</span>)</span>
<span id="cb104-60"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> greet(name):</span>
<span id="cb104-61">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""This function greets a person."""</span></span>
<span id="cb104-62">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  &gt; Hello, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">!"</span>)</span>
<span id="cb104-63"></span>
<span id="cb104-64">greet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Jonathan'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Decorator `FunctionLogger` is being initialized with level: DEBUG
Decorator `FunctionLogger` is being initialized with level: WARNING
2025-09-25 12:44:26 [WARNING] - Entering 'greet'
  &gt; Hello, Jonathan!
2025-09-25 12:44:26 [WARNING] - Exiting 'greet'</code></pre>
</div>
</div>
<div id="cell-97" class="cell" data-scrolled="true" data-execution_count="86">
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb106-1">greet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Jonathan'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2025-09-25 12:45:14 [WARNING] - Entering 'greet'
  &gt; Hello, Jonathan!
2025-09-25 12:45:14 [WARNING] - Exiting 'greet'</code></pre>
</div>
</div>
</section>
</section>
<section id="more-real-world-examples" class="level2">
<h2 class="anchored" data-anchor-id="more-real-world-examples">More Real World Examples</h2>
<section id="slowing-down-code-with-optional-parameters" class="level3">
<h3 class="anchored" data-anchor-id="slowing-down-code-with-optional-parameters">Slowing Down Code With Optional Parameters</h3>
<div id="cell-100" class="cell" data-execution_count="87">
<div class="sourceCode cell-code" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb108-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functools</span>
<span id="cb108-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb108-3"></span>
<span id="cb108-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> slow_down(_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>, rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb108-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Sleep given amount of seconds before calling the function"""</span></span>
<span id="cb108-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decorator_slow_down(func):</span>
<span id="cb108-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@functools.wraps</span>(func)</span>
<span id="cb108-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb108-9">            time.sleep(rate)</span>
<span id="cb108-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb108-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper</span>
<span id="cb108-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> _func <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb108-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> decorator_slow_down</span>
<span id="cb108-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb108-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> decorator_slow_down(_func)</span>
<span id="cb108-16">        </span>
<span id="cb108-17"></span>
<span id="cb108-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@slow_down</span>(rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb108-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> countdown(from_number: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb108-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> from_number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb108-21">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Liftoff!'</span>)</span>
<span id="cb108-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb108-23">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(from_number)</span>
<span id="cb108-24">        countdown(from_number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb108-25"></span>
<span id="cb108-26">countdown(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>3
2
1
Liftoff!</code></pre>
</div>
</div>
</section>
<section id="creating-singletons" class="level3">
<h3 class="anchored" data-anchor-id="creating-singletons">Creating Singletons</h3>
<p>Python has a number of singletons, classes with only one instance: - <code>True</code>, <code>False</code>, <code>None</code></p>
<p>This allows for use of <code>is</code> to check for equality, or rather, identity. We can use a decorator to store the first instance of a class as a function attribute, enforcing the singleton design pattern:</p>
<div id="cell-103" class="cell" data-execution_count="88">
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb110-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functools</span>
<span id="cb110-2"></span>
<span id="cb110-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> singleton(cls):</span>
<span id="cb110-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Make a class a Singleton class"""</span></span>
<span id="cb110-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@functools.wraps</span>(cls)</span>
<span id="cb110-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper_singleton(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb110-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> wrapper_singleton.instance <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb110-8">            wrapper_singleton.instance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cls(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb110-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper_singleton.instance</span>
<span id="cb110-10">    wrapper_singleton.instance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb110-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper_singleton</span>
<span id="cb110-12"></span>
<span id="cb110-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@singleton</span></span>
<span id="cb110-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> TheOne:</span>
<span id="cb110-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb110-16"></span>
<span id="cb110-17">first_one <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TheOne()</span>
<span id="cb110-18"></span>
<span id="cb110-19">another_one <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TheOne()</span>
<span id="cb110-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>(first_one)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="88">
<pre><code>1995139107200</code></pre>
</div>
</div>
<div id="cell-104" class="cell" data-execution_count="90">
<div class="sourceCode cell-code" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb112-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>(another_one)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="90">
<pre><code>1995139107200</code></pre>
</div>
</div>
<div id="cell-105" class="cell" data-execution_count="91">
<div class="sourceCode cell-code" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb114-1">first_one <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> another_one</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="91">
<pre><code>True</code></pre>
</div>
</div>
</section>
<section id="caching-return-values" class="level3">
<h3 class="anchored" data-anchor-id="caching-return-values">Caching Return Values</h3>
<div id="cell-107" class="cell" data-scrolled="true" data-execution_count="94">
<div class="sourceCode cell-code" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb116-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> functools</span>
<span id="cb116-2"></span>
<span id="cb116-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> count_calls(func):</span>
<span id="cb116-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@functools.wraps</span>(func)</span>
<span id="cb116-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper_count_calls(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb116-6">        wrapper_count_calls.num_calls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb116-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Call </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>wrapper_count_calls<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>num_calls<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>func<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">()'</span>)</span>
<span id="cb116-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb116-9">    wrapper_count_calls.num_calls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb116-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper_count_calls</span>
<span id="cb116-11"> </span>
<span id="cb116-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@count_calls</span></span>
<span id="cb116-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fibonacci(num):</span>
<span id="cb116-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb116-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> num</span>
<span id="cb116-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> fibonacci(num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fibonacci(num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb116-17"></span>
<span id="cb116-18">fibonacci(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Call 1 of fibonacci()
Call 2 of fibonacci()
Call 3 of fibonacci()
Call 4 of fibonacci()
Call 5 of fibonacci()
Call 6 of fibonacci()
Call 7 of fibonacci()
Call 8 of fibonacci()
Call 9 of fibonacci()
Call 10 of fibonacci()
Call 11 of fibonacci()
Call 12 of fibonacci()
Call 13 of fibonacci()
Call 14 of fibonacci()
Call 15 of fibonacci()
Call 16 of fibonacci()
Call 17 of fibonacci()
Call 18 of fibonacci()
Call 19 of fibonacci()
Call 20 of fibonacci()
Call 21 of fibonacci()
Call 22 of fibonacci()
Call 23 of fibonacci()
Call 24 of fibonacci()
Call 25 of fibonacci()
Call 26 of fibonacci()
Call 27 of fibonacci()
Call 28 of fibonacci()
Call 29 of fibonacci()
Call 30 of fibonacci()
Call 31 of fibonacci()
Call 32 of fibonacci()
Call 33 of fibonacci()
Call 34 of fibonacci()
Call 35 of fibonacci()
Call 36 of fibonacci()
Call 37 of fibonacci()
Call 38 of fibonacci()
Call 39 of fibonacci()
Call 40 of fibonacci()
Call 41 of fibonacci()
Call 42 of fibonacci()
Call 43 of fibonacci()
Call 44 of fibonacci()
Call 45 of fibonacci()
Call 46 of fibonacci()
Call 47 of fibonacci()
Call 48 of fibonacci()
Call 49 of fibonacci()
Call 50 of fibonacci()
Call 51 of fibonacci()
Call 52 of fibonacci()
Call 53 of fibonacci()
Call 54 of fibonacci()
Call 55 of fibonacci()
Call 56 of fibonacci()
Call 57 of fibonacci()
Call 58 of fibonacci()
Call 59 of fibonacci()
Call 60 of fibonacci()
Call 61 of fibonacci()
Call 62 of fibonacci()
Call 63 of fibonacci()
Call 64 of fibonacci()
Call 65 of fibonacci()
Call 66 of fibonacci()
Call 67 of fibonacci()
Call 68 of fibonacci()
Call 69 of fibonacci()
Call 70 of fibonacci()
Call 71 of fibonacci()
Call 72 of fibonacci()
Call 73 of fibonacci()
Call 74 of fibonacci()
Call 75 of fibonacci()
Call 76 of fibonacci()
Call 77 of fibonacci()
Call 78 of fibonacci()
Call 79 of fibonacci()
Call 80 of fibonacci()
Call 81 of fibonacci()
Call 82 of fibonacci()
Call 83 of fibonacci()
Call 84 of fibonacci()
Call 85 of fibonacci()
Call 86 of fibonacci()
Call 87 of fibonacci()
Call 88 of fibonacci()
Call 89 of fibonacci()
Call 90 of fibonacci()
Call 91 of fibonacci()
Call 92 of fibonacci()
Call 93 of fibonacci()
Call 94 of fibonacci()
Call 95 of fibonacci()
Call 96 of fibonacci()
Call 97 of fibonacci()
Call 98 of fibonacci()
Call 99 of fibonacci()
Call 100 of fibonacci()
Call 101 of fibonacci()
Call 102 of fibonacci()
Call 103 of fibonacci()
Call 104 of fibonacci()
Call 105 of fibonacci()
Call 106 of fibonacci()
Call 107 of fibonacci()
Call 108 of fibonacci()
Call 109 of fibonacci()
Call 110 of fibonacci()
Call 111 of fibonacci()
Call 112 of fibonacci()
Call 113 of fibonacci()
Call 114 of fibonacci()
Call 115 of fibonacci()
Call 116 of fibonacci()
Call 117 of fibonacci()
Call 118 of fibonacci()
Call 119 of fibonacci()
Call 120 of fibonacci()
Call 121 of fibonacci()
Call 122 of fibonacci()
Call 123 of fibonacci()
Call 124 of fibonacci()
Call 125 of fibonacci()
Call 126 of fibonacci()
Call 127 of fibonacci()
Call 128 of fibonacci()
Call 129 of fibonacci()
Call 130 of fibonacci()
Call 131 of fibonacci()
Call 132 of fibonacci()
Call 133 of fibonacci()
Call 134 of fibonacci()
Call 135 of fibonacci()
Call 136 of fibonacci()
Call 137 of fibonacci()
Call 138 of fibonacci()
Call 139 of fibonacci()
Call 140 of fibonacci()
Call 141 of fibonacci()
Call 142 of fibonacci()
Call 143 of fibonacci()
Call 144 of fibonacci()
Call 145 of fibonacci()
Call 146 of fibonacci()
Call 147 of fibonacci()
Call 148 of fibonacci()
Call 149 of fibonacci()
Call 150 of fibonacci()
Call 151 of fibonacci()
Call 152 of fibonacci()
Call 153 of fibonacci()
Call 154 of fibonacci()
Call 155 of fibonacci()
Call 156 of fibonacci()
Call 157 of fibonacci()
Call 158 of fibonacci()
Call 159 of fibonacci()
Call 160 of fibonacci()
Call 161 of fibonacci()
Call 162 of fibonacci()
Call 163 of fibonacci()
Call 164 of fibonacci()
Call 165 of fibonacci()
Call 166 of fibonacci()
Call 167 of fibonacci()
Call 168 of fibonacci()
Call 169 of fibonacci()
Call 170 of fibonacci()
Call 171 of fibonacci()
Call 172 of fibonacci()
Call 173 of fibonacci()
Call 174 of fibonacci()
Call 175 of fibonacci()
Call 176 of fibonacci()
Call 177 of fibonacci()</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="94">
<pre><code>55</code></pre>
</div>
</div>
<div id="cell-108" class="cell" data-execution_count="95">
<div class="sourceCode cell-code" id="cb119" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb119-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cache(func):</span>
<span id="cb119-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Keep a cache of previous function calls"""</span></span>
<span id="cb119-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@functools.wraps</span>(func)</span>
<span id="cb119-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> wrapper_cache(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb119-5">        cache_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(kwargs.items())</span>
<span id="cb119-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> cache_key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> wrapper_cache.cache:</span>
<span id="cb119-7">            wrapper_cache.cache[cache_key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb119-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper_cache.cache[cache_key]</span>
<span id="cb119-9">    wrapper_cache.cache <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb119-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> wrapper_cache</span>
<span id="cb119-11"></span>
<span id="cb119-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@cache</span></span>
<span id="cb119-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@count_calls</span></span>
<span id="cb119-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fibonacci(num):</span>
<span id="cb119-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb119-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> num</span>
<span id="cb119-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> fibonacci(num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fibonacci(num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb119-18"></span>
<span id="cb119-19">fibonacci(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Call 1 of fibonacci()
Call 2 of fibonacci()
Call 3 of fibonacci()
Call 4 of fibonacci()
Call 5 of fibonacci()
Call 6 of fibonacci()
Call 7 of fibonacci()
Call 8 of fibonacci()
Call 9 of fibonacci()
Call 10 of fibonacci()
Call 11 of fibonacci()</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="95">
<pre><code>55</code></pre>
</div>
</div>
<div id="cell-109" class="cell" data-execution_count="96">
<div class="sourceCode cell-code" id="cb122" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb122-1">fibonacci(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="96">
<pre><code>21</code></pre>
</div>
</div>
<div id="cell-110" class="cell" data-execution_count="97">
<div class="sourceCode cell-code" id="cb124" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb124-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@functools.lru_cache</span>(maxsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb124-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fibonacci(num: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb124-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb124-4">        value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num</span>
<span id="cb124-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb124-6">        value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fibonacci(num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fibonacci(num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb124-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Calculated fibonacci(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb124-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> value</span>
<span id="cb124-9"></span>
<span id="cb124-10"></span>
<span id="cb124-11">fibonacci(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Calculated fibonacci(1) = 1
Calculated fibonacci(0) = 0
Calculated fibonacci(2) = 1
Calculated fibonacci(3) = 2
Calculated fibonacci(4) = 3
Calculated fibonacci(5) = 5
Calculated fibonacci(6) = 8
Calculated fibonacci(7) = 13
Calculated fibonacci(8) = 21
Calculated fibonacci(9) = 34
Calculated fibonacci(10) = 55</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="97">
<pre><code>55</code></pre>
</div>
</div>
<div id="cell-111" class="cell" data-execution_count="98">
<div class="sourceCode cell-code" id="cb127" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb127-1">fibonacci(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="98">
<pre><code>21</code></pre>
</div>
</div>
<div id="cell-112" class="cell" data-execution_count="99">
<div class="sourceCode cell-code" id="cb129" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb129-1">fibonacci(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Calculated fibonacci(1) = 1
Calculated fibonacci(0) = 0
Calculated fibonacci(2) = 1
Calculated fibonacci(3) = 2
Calculated fibonacci(4) = 3
Calculated fibonacci(5) = 5</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="99">
<pre><code>5</code></pre>
</div>
</div>
<div id="cell-113" class="cell" data-execution_count="100">
<div class="sourceCode cell-code" id="cb132" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb132-1">fibonacci(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Calculated fibonacci(6) = 8
Calculated fibonacci(7) = 13
Calculated fibonacci(8) = 21</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="100">
<pre><code>21</code></pre>
</div>
</div>
<div id="cell-114" class="cell" data-execution_count="102">
<div class="sourceCode cell-code" id="cb135" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb135-1">fibonacci(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="102">
<pre><code>5</code></pre>
</div>
</div>
<div id="cell-115" class="cell" data-execution_count="103">
<div class="sourceCode cell-code" id="cb137" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb137-1">fibonacci.cache_info()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="103">
<pre><code>CacheInfo(hits=17, misses=20, maxsize=4, currsize=4)</code></pre>
</div>
</div>
</section>
<section id="adding-information-about-units" class="level3">
<h3 class="anchored" data-anchor-id="adding-information-about-units">Adding Information About Units</h3>
<div id="cell-117" class="cell">
<div class="sourceCode cell-code" id="cb139" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb139-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_unit(unit):</span>
<span id="cb139-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_unit_wrapper(func):</span>
<span id="cb139-3">        func.unit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unit</span>
<span id="cb139-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> func</span>
<span id="cb139-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> set_unit_wrapper</span></code></pre></div>
</div>
<div id="cell-118" class="cell">
<div class="sourceCode cell-code" id="cb140" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb140-1"> </span></code></pre></div>
</div>
</section>
</section>
<section id="getter-and-setters" class="level2">
<h2 class="anchored" data-anchor-id="getter-and-setters">Getter and Setters</h2>
<div id="cell-121" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb141" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb141-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Label:</span>
<span id="cb141-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, text, font):</span>
<span id="cb141-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text</span>
<span id="cb141-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._font <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> font</span>
<span id="cb141-5"></span>
<span id="cb141-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_text(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb141-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._text</span>
<span id="cb141-8"></span>
<span id="cb141-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_text(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, value):</span>
<span id="cb141-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value</span>
<span id="cb141-11"></span>
<span id="cb141-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_font(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb141-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._font</span>
<span id="cb141-14"></span>
<span id="cb141-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_font(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, value):</span>
<span id="cb141-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._font <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value</span></code></pre></div>
</div>
<div id="cell-122" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb142" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb142-1">label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Label(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fruits"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"JetBrains Mono NL"</span>)</span></code></pre></div>
</div>
<div id="cell-123" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb143" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb143-1">label._text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hello'</span></span></code></pre></div>
</div>
<div id="cell-124" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb144" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb144-1">label._text</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>'hello'</code></pre>
</div>
</div>
</section>
<section id="properties-introducing-functionality-to-attributes" class="level2">
<h2 class="anchored" data-anchor-id="properties-introducing-functionality-to-attributes">Properties: Introducing Functionality to Attributes</h2>
<p>These notes are derived from <a href="https://realpython.com/python-getter-setter/">this</a> Real Python article. Attributes can be manipulated in two ways: - directly - via <em>getter</em> and <em>setter</em> methods (requires non-public API)</p>
<p>Rather than define our own getter/setter methods manually, we can use the <code>property</code> decorator.</p>
<p>The following example sets <code>name</code> and <code>birth_date</code> as properties, and assigns them <code>setter</code> methods</p>
<div id="cell-127" class="cell">
<div class="sourceCode cell-code" id="cb146" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb146-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> date</span>
<span id="cb146-2"></span>
<span id="cb146-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Employee:</span>
<span id="cb146-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name, birth_date):</span>
<span id="cb146-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> name</span>
<span id="cb146-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.birth_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> birth_date</span>
<span id="cb146-7"></span>
<span id="cb146-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb146-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> name(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb146-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name</span>
<span id="cb146-11"></span>
<span id="cb146-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@name.setter</span></span>
<span id="cb146-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> name(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, value):</span>
<span id="cb146-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value.upper()</span>
<span id="cb146-15"></span>
<span id="cb146-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb146-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> birth_date(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb146-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._birth_date</span>
<span id="cb146-19"></span>
<span id="cb146-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@birth_date.setter</span></span>
<span id="cb146-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> birth_date(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, value):</span>
<span id="cb146-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._birth_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> date.fromisoformat(value)</span></code></pre></div>
</div>
</section>
<section id="descriptors-attributes-with-attached-behaviors" class="level2">
<h2 class="anchored" data-anchor-id="descriptors-attributes-with-attached-behaviors">Descriptors: Attributes with Attached Behaviors</h2>
<p>We can add to the previous example a new attribute, <code>start_date</code> and associated getter/setter methods:</p>
<div id="cell-130" class="cell">
<div class="sourceCode cell-code" id="cb147" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb147-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> date</span>
<span id="cb147-2"></span>
<span id="cb147-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Employee:</span>
<span id="cb147-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name, birth_date, start_date):</span>
<span id="cb147-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> name</span>
<span id="cb147-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.birth_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> birth_date</span>
<span id="cb147-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.start_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start_date</span>
<span id="cb147-8"></span>
<span id="cb147-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb147-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> name(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb147-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name</span>
<span id="cb147-12"></span>
<span id="cb147-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@name.setter</span></span>
<span id="cb147-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> name(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, value):</span>
<span id="cb147-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value.upper()</span>
<span id="cb147-16"></span>
<span id="cb147-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb147-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> birth_date(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb147-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._birth_date</span>
<span id="cb147-20"></span>
<span id="cb147-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@birth_date.setter</span></span>
<span id="cb147-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> birth_date(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, value):</span>
<span id="cb147-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._birth_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> date.fromisoformat(value)</span>
<span id="cb147-24"></span>
<span id="cb147-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb147-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> start_date(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb147-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._start_date</span>
<span id="cb147-28"></span>
<span id="cb147-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@start_date.setter</span></span>
<span id="cb147-30">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> start_date(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, value):</span>
<span id="cb147-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._start_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> date.fromisoformat(value)</span></code></pre></div>
</div>
<p>This seems repetitive so we can refactor the code and set up a <code>Date()</code> object since our attributes are setup the same way:</p>
<div id="cell-132" class="cell">
<div class="sourceCode cell-code" id="cb148" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb148-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> date</span>
<span id="cb148-2"></span>
<span id="cb148-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Date:</span>
<span id="cb148-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__set_name__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, owner, name):</span>
<span id="cb148-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> name</span>
<span id="cb148-6"></span>
<span id="cb148-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__get__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, instance, owner):</span>
<span id="cb148-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> instance.__dict__[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name]</span>
<span id="cb148-9"></span>
<span id="cb148-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__set__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, instance, value):</span>
<span id="cb148-11">        instance.__dict__[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> date.fromisoformat(value)</span>
<span id="cb148-12"></span>
<span id="cb148-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Employee:</span>
<span id="cb148-14">    birth_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Date()</span>
<span id="cb148-15">    start_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Date()</span>
<span id="cb148-16"></span>
<span id="cb148-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, name, birth_date, start_date):</span>
<span id="cb148-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> name</span>
<span id="cb148-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.birth_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> birth_date</span>
<span id="cb148-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.start_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start_date</span>
<span id="cb148-21"></span>
<span id="cb148-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb148-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> name(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb148-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name</span>
<span id="cb148-25"></span>
<span id="cb148-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@name.setter</span></span>
<span id="cb148-27">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> name(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, value):</span>
<span id="cb148-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value.upper()</span></code></pre></div>
</div>


</section>
</section>

 ]]></description>
  <guid>http://thenewexecutor.github.io/notes/Decorators.html</guid>
  <pubDate>Mon, 27 Oct 2025 06:25:28 GMT</pubDate>
</item>
<item>
  <title>Multivariate Statistics</title>
  <link>http://thenewexecutor.github.io/notes/MultivariateStatisticsNotes.html</link>
  <description><![CDATA[ 




<section id="multivariate-statistics" class="level1">
<h1>Multivariate Statistics</h1>
<p>Expectation value and variance have clear definitions for scalar quantities, but what about the analogous definitions for vectors and matrices?</p>
<section id="random-scalars" class="level2">
<h2 class="anchored" data-anchor-id="random-scalars">Random Scalars</h2>
<p>For a given random variable <img src="https://latex.codecogs.com/png.latex?X">, with probability distribution <img src="https://latex.codecogs.com/png.latex?f(x)"> we have the following definitions:</p>
<p><strong>Expectation Value</strong>:</p>
<p><img src="https://latex.codecogs.com/png.latex?E(X)%20=%20%5Cint%5E%5Cinfty_%7B-%5Cinfty%7D%20xf(x)dx%20=%20%5Cmu"></p>
<p><strong>Variance</strong>:</p>
<p><img src="https://latex.codecogs.com/png.latex?V(X)%20=%20E%5CBig(%5BX-E(X)%5D%5E2%5CBig)%20=%20E(X%5E2)%20-%20%5Cmu%5E2"> <strong>Covariance</strong>:</p>
<p><img src="https://latex.codecogs.com/png.latex?Cov(X,%20Y)%20=%20E%5CBig(%5BX-E(X)%5D%5BY-E(Y)%5D%5CBig)%20=%20E(XY)%20-%20%5Cmu_X%5Cmu_Y"></p>
<p><img src="https://latex.codecogs.com/png.latex?Cov(aX,%20bY)%20=%20E%5CBig(%5BaX-aE(X)%5D%5BbY-bE(Y)%5D%5CBig)%20=%20abE(XY)%20-%20a%5Cmu_Xb%5Cmu_Y%20=%20abCov(X,Y)"></p>
</section>
<section id="random-vectors" class="level2">
<h2 class="anchored" data-anchor-id="random-vectors">Random Vectors</h2>
<p>For a given random vector <img src="https://latex.codecogs.com/png.latex?X%20=%0A%5Cbegin%7Bpmatrix%7D%0AX_i%5C%5C%0A%5Cvdots%20%5C%5C%0AX_n%5C%5C%0A%5Cend%7Bpmatrix%7D"></p>
<p><strong>Expectation Value</strong>: <img src="https://latex.codecogs.com/png.latex?E(X)%20=%20%5Cbegin%7Bpmatrix%7D%0AE(X_i)%5C%5C%0A%5Cvdots%20%5C%5C%0AE(X_n)%5C%5C%0A%5Cend%7Bpmatrix%7D%0A"></p>
<p><strong>Variance</strong>: The variance of a random vector <img src="https://latex.codecogs.com/png.latex?X"> with expectation <img src="https://latex.codecogs.com/png.latex?%5Cmu"> is defined to be a matrix <img src="https://latex.codecogs.com/png.latex?%5CSigma"> whose elements are given by <img src="https://latex.codecogs.com/png.latex?%5CSigma_%7Bij%7D%20=%20E(%5BX-%5Cmu%5D%5BX-%5Cmu%5D%5ET)_%7Bij%7D%20=%20E(%5BX-%5Cmu%5D_i%5BX-%5Cmu%5D_j)"></p>
<p>where the subscript <img src="https://latex.codecogs.com/png.latex?T"> denotes the transpose of a vector. The diagonal elements are variances whereas the off-diagonal elements are covariances:</p>
<p><img src="https://latex.codecogs.com/png.latex?Var(X)%20=%20%5Cbegin%7Bpmatrix%7D%0AV(X_1)%20&amp;%20Cov(X_1,%20X_2)%20&amp;%5Cdots%20&amp;%20Cov(X_1,X_n)%5C%5C%0ACov(X_2,X_1)%20&amp;%20V(X_2)%20&amp;%20%5Cdots%20%20&amp;%20Cov(X_2,X_n)%20%5C%5C%0A%5Cvdots%20&amp;%20%5Cdots%20&amp;%20%5Cddots%20&amp;%20%5Cvdots%20%5C%5C%0ACov(X_n,X_1)%20&amp;%20Cov(X_n,%20X_2)%20&amp;%20%5Cdots%20&amp;%20V(X_n)%5C%5C%0A%5Cend%7Bpmatrix%7D%0A"></p>
</section>
</section>
<section id="useful-relations" class="level1">
<h1>Useful Relations</h1>
<section id="expectation-is-a-linear-operator" class="level2">
<h2 class="anchored" data-anchor-id="expectation-is-a-linear-operator">Expectation is a Linear Operator</h2>
<p>For a scalar <img src="https://latex.codecogs.com/png.latex?a"> and random variable <img src="https://latex.codecogs.com/png.latex?X">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%20E(aX)%20&amp;=%20%5Cint%5E%5Cinfty_%7B-%5Cinfty%7D%20axf(x)dx%20=%20%20a%5Cint%5E%5Cinfty_%7B-%5Cinfty%7D%20xf(x)dx%20%5C%5C%20&amp;=%20a%20E(X)%5C%5C&amp;=%20a%5Cmu%20%5Cend%7Balign%7D"></p>
<p>Given vectors <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?X"> of length <img src="https://latex.codecogs.com/png.latex?n">, the expectation of their scalar product <img src="https://latex.codecogs.com/png.latex?E(a%5ET%20X)%20=%20E(X%5ETa)"> is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?E(a%5ETX)%20=%20E%5CBig(%5Csum%5En_%7Bi=1%7D%20a_iX_i%5CBig)%20=%20%5Csum%5En_%7Bi=1%7D%20E(a_iX_i)%20=%20%5Csum%5En_%7Bi=1%7D%20a_iE(X_i)%20=%20a%5ETE(X)"> <img src="https://latex.codecogs.com/png.latex?E(X%5ETa)%20=%20E%5CBig(%5Csum%5En_%7Bi=1%7D%20X_ia_i%5CBig)%20=%20%5Csum%5En_%7Bi=1%7D%20E(X_ia_i)%20=%20%5Csum%5En_%7Bi=1%7D%20E(X_i)a_i%20=%20E(X%5ET)a"></p>
<p>Given a matrix <img src="https://latex.codecogs.com/png.latex?A"> acting on vector <img src="https://latex.codecogs.com/png.latex?X">, the expectation of their product <img src="https://latex.codecogs.com/png.latex?E(AX)"> is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?E(AX)_%7Bij%7D%20=%20E%5CBig(%20%5Csum_%7Bk%7D%20A_%7Bik%7DX_%7Bkj%7D%20%20%5CBig)%20=%20%5Csum_%7Bk%7D%20E(A_%7Bik%7DX_%7Bkj%7D)%20=%20%5Csum_%7Bk%7D%20A_%7Bik%7DE(X_%7Bkj%7D)%20=%20AE(X)_%7Bij%7D"></p>
<p>which implies <img src="https://latex.codecogs.com/png.latex?%20E(AX)%20=%20A%5Cmu"></p>
<p>Similarly:</p>
<p><img src="https://latex.codecogs.com/png.latex?E(XA)_%7Bij%7D%20=%20E%5CBig(%20%5Csum_%7Bk%7D%20X_%7Bik%7DA_%7Bkj%7D%20%20%5CBig)%20=%20%5Csum_%7Bk%7D%20E(X_%7Bik%7DA_%7Bkj%7D)%20=%20%5Csum_%7Bk%7D%20E(X_%7Bik%7D)A_%7Bkj%7D%20=%20(E(X)A)_%7Bij%7D"></p>
<p>which implies <img src="https://latex.codecogs.com/png.latex?E(XA)%20=%20%5Cmu%20A"></p>
</section>
<section id="constants-get-squared-in-variance" class="level2">
<h2 class="anchored" data-anchor-id="constants-get-squared-in-variance">Constants Get Squared in Variance</h2>
<p>For a scalar <img src="https://latex.codecogs.com/png.latex?a"> and random variable <img src="https://latex.codecogs.com/png.latex?X">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7DV(aX)%20&amp;=%20E%5CBig(%5BaX-E(aX)%5D%5E2%5CBig)%20=%20E((aX)%5E2)%20-%20(a%5Cmu)%5E2%20=%20a%5E2(E(X%5E2)%20-%20%5Cmu%5E2)%20%5C%5C%20&amp;=%20a%5E2V(X)%5Cend%7Balign%7D"></p>
<p>For matrix <img src="https://latex.codecogs.com/png.latex?A"> acting on vector <img src="https://latex.codecogs.com/png.latex?X">, the variance <img src="https://latex.codecogs.com/png.latex?V(AX)"> is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%20V(AX)%20&amp;=%20E%5CBig(%5Cbig%5BAX%20-%20A%5Cmu%5Cbig%5D%5Cbig%5BAX%20-%20A%5Cmu%5Cbig%5D%5ET%5CBig)%20%5C%5C%20&amp;=%20E%5CBig(%5Cbig%5BA(X%20-%20%5Cmu)%5Cbig%5D%5Cbig%5BA(X%20-%20%5Cmu)%5Cbig%5D%5ET%5CBig)%5C%5C%20&amp;=%0AE%5CBig(%5Cbig%5BA(X%20-%20%5Cmu)%5Cbig%5D%5Cbig%5B(X%20-%20%5Cmu)%5ETA%5ET%5Cbig%5D%5CBig)%5C%5C%20&amp;=%20AE%5CBig((X-%5Cmu)(X-%5Cmu)%5ET%5CBig)A%5ET%5C%5C%20&amp;=%20A%5CSigma%20A%5ET%20%5Cend%7Balign%7D"></p>
</section>
<section id="variance-of-a-sum" class="level2">
<h2 class="anchored" data-anchor-id="variance-of-a-sum">Variance of a Sum</h2>
<p>Given random variables <img src="https://latex.codecogs.com/png.latex?X"> and <img src="https://latex.codecogs.com/png.latex?Y"> and their respective means <img src="https://latex.codecogs.com/png.latex?%5Cmu_X"> and <img src="https://latex.codecogs.com/png.latex?%5Cmu_Y">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Balign%7D%0AVar(X%20+%20Y)%20&amp;=%20E(X%20+%20Y%20-%20%5Cmu_X%20-%20%5Cmu_Y)%5E2%5C%5C%0A&amp;=%20E%5Cbig%5B(X-%5Cmu_X)%5E2%20+%20(Y-%5Cmu_Y)%5E2%20+%202(X-%5Cmu_X)(Y-%5Cmu_Y)%5Cbig%5D%5C%5C%0A&amp;=%20Var(X)%20+%20Var(Y)%20+%202Cov(X,Y)%5C%5C%0A%5Cend%7Balign%7D"></p>
<p>With constants in the mix, this becomes:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Balign%7D%0AVar(aX%20+%20bY)%20&amp;=%20%20Var(aX)%20+%20Var(bY)%20+%202Cov(aX,bY)%5C%5C%0A&amp;=%20a%5E2Var(X)%20+%20b%5E2Var(Y)%20+%202abCov(X,Y)%5C%5C%0A%5Cend%7Balign%7D"></p>
<p>This is especially helpful to understand variances of differences, or when coefficients are negative in general.</p>
</section>
<section id="expectation-of-a-quadratic-form" class="level2">
<h2 class="anchored" data-anchor-id="expectation-of-a-quadratic-form">Expectation of a Quadratic Form</h2>
<p>Given a random vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D"> of size <img src="https://latex.codecogs.com/png.latex?n"> mean <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5Cmu%7D">, and covariance matrix <img src="https://latex.codecogs.com/png.latex?Var(%5Cmathbf%7By%7D)=%5CSigma">, the expectation of the product <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D%5ET%5Cmathbf%7BA%7D%5Cmathbf%7By%7D"> can be found by looking at the expectation of each matrix element.</p>
<p>The matrix elements of a product of the matrices <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BABC%7D"> can be expressed as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A(%5Cmathbf%7BABC%7D)_%7Bij%7D%20&amp;=%20%5Csum_%7Bk%7D(%5Cmathbf%7BAB%7D)_%7Bik%7Dc_%7Bkj%7D%5C%5C%0A&amp;=%20%5Csum_%7Bk%7D(%5Cmathbf%7BAB%7D)_%7Bik%7Dc_%7Bkj%7D%5C%5C%0A&amp;=%20%5Csum_%7Bk%7D%20%5Cbig(%5Csum_%7Bl%7D%20a_%7Bil%7Db_%7Blk%7D%5Cbig)c_%7Bkj%7D%5C%5C%0A&amp;=%20%5Csum_%7Bk%7D%20%5Csum_%7Bl%7D%20a_%7Bil%7Db_%7Blk%7Dc_%7Bkj%7D%5C%5C%0A%5Cend%7Balign%7D%0A"></p>
<p>In the quadratic form <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D%5ET%5Cmathbf%7BA%7D%5Cmathbf%7By%7D">, the row index <img src="https://latex.codecogs.com/png.latex?i"> of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D%5ET">, a row vector and the column index of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D">, a column vector, are both restricted to 1. If we ommit them, the elements of the quadratic form are given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A(%5Cmathbf%7By%7D%5ET%5Cmathbf%7BA%7D%5Cmathbf%7By%7D)_%7Bij%7D%20&amp;=%20%5Csum_%7Bk%7D%20%5Csum_%7Bl%7D%20y_%7Bl%7Da_%7Blk%7Dy_%7Bk%7D%5C%5C%0A&amp;=%20%5Csum_%7Bk%7D%20%5Csum_%7Bl%7D%20y_%7Bl%7Dy_%7Bk%7Da_%7Blk%7D%5C%5C%0A%5Cend%7Balign%7D"></p>
<p>Remembering the definition of covariance, and the assumption of independent observations, we can look at expectation value element-wise:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AE(%5Cmathbf%7By%7D%5ET%5Cmathbf%7BA%7D%5Cmathbf%7By%7D)_%7Bij%7D%20&amp;=%20E%5Cbig(%5Csum_%7Bk%7D%5Csum_%7Bl%7D%20y_%7Bl%7Dy_%7Bk%7Da_%7Blk%7D%5Cbig)%5C%5C%0A&amp;=%20%5Csum_%7Bk%7D%5Csum_%7Bl%7D%20E(y_%7Bl%7Dy_%7Bk%7D)a_%7Blk%7D%5C%5C%0A&amp;=%20%5Csum_%7Bk%7D%5Csum_%7Bl%7D%20%5Cbig(Cov(y_%7Bl%7D,y_%7Bk%7D)%20+%20%5Cmu_l%5Cmu_k%5Cbig)a_%7Blk%7D%5C%5C%0A&amp;=%20%5Csum_%7Bk%7D%5Csum_%7Bl%7D%20Cov(y_%7Bl%7D,y_%7Bk%7D)a_%7Blk%7D%20+%20%5Csum_%7Bk%7D%5Csum_%7Bl%7D%5Cmu_la_%7Blk%7D%5Cmu_k%5C%5C%0A&amp;=%20%5Csum_%7Bk%7D%5Csum_%7Bl%7D%20Var(y)_%7Blk%7Da_%7Blk%7D%20+%20%5Csum_%7Bk%7D%5Csum_%7Bl%7D%5Cmu_la_%7Blk%7D%5Cmu_k%5C%5C%0A&amp;=%20%5Csum_%7Bk%7D%5Csum_%7Bl%7D%20Var(y)_%7Bkl%7Da_%7Blk%7D%20+%20%5Csum_%7Bk%7D%5Csum_%7Bl%7D%5Cmu_la_%7Blk%7D%5Cmu_k%5Ctag%7Bsymmetry%20of%20cov%20matrix%7D%5C%5C%0A&amp;=%20%5Csum_%7Bi%7D%20Var(y)_%7Bii%7Da_%7Bii%7D%20+%20%5Csum_%7Bk%7D%5Csum_%7Bl%7D%5Cmu_la_%7Blk%7D%5Cmu_k%20%5Ctag%7Bindependent%20observations/diagonal%20matrix%7D%5C%5C%0A&amp;=%20trace(%5CSigma%20%5Cmathbf%7BA%7D)%20+%20%5Cbig(%5Cmathbf%7B%5Cmu%7D%5ET%5Cmathbf%7BA%7D%5Cmathbf%7B%5Cmu%7D%5Cbig)_%7Blk%7D%5C%5C%0A%5Cend%7Balign%7D"></p>
<p>Thus, on the matrix level we have: <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AE(%5Cmathbf%7By%7D%5ET%5Cmathbf%7BA%7D%5Cmathbf%7By%7D)%20&amp;=%20trace(%5CSigma%20%5Cmathbf%7BA%7D)%20+%20%5Cmathbf%7B%5Cmu%7D%5ET%5Cmathbf%7BA%7D%5Cmathbf%7B%5Cmu%7D%5C%5C%0A%5Cend%7Balign%7D"></p>
</section>
<section id="multivariate-gaussian" class="level2">
<h2 class="anchored" data-anchor-id="multivariate-gaussian">Multivariate Gaussian</h2>
<p>The multivariate Gaussian distribution appears often and has the probability density function:</p>
<p><img src="https://latex.codecogs.com/png.latex?f(x)%20=%20%5Cdfrac%7B1%7D%7B(2%5Cpi)%5E%7Bp/2%7D%7C%5CSigma%7C%5E%7B1/2%7D%7D%20%5Cexp%5CBig%5B-%5Cfrac%7B1%7D%7B2%7D(x-%5Cmu)%5ET%5CSigma%5E%7B-1%7D(x-%5Cmu)%5CBig%5D"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?x"> is a <img src="https://latex.codecogs.com/png.latex?p">-dimensional random vector, <img src="https://latex.codecogs.com/png.latex?%5Cmu%20=%20E(x)">, <img src="https://latex.codecogs.com/png.latex?%5CSigma"> is the covariance matrix and <img src="https://latex.codecogs.com/png.latex?%7C%5CSigma%7C"> is the determinant of <img src="https://latex.codecogs.com/png.latex?%5CSigma">.</p>
<p><strong>Useful Theorem Results:</strong></p>
<ol type="1">
<li><p>If <img src="https://latex.codecogs.com/png.latex?Z%5Csim%20N(0,1)"> and <img src="https://latex.codecogs.com/png.latex?x%20=%20%5Cmu%20+%20%5CSigma%5E%7B1/2%7DZ">, then <img src="https://latex.codecogs.com/png.latex?x%5Csim%20N(%5Cmu,%5CSigma)">.</p></li>
<li><p>If <img src="https://latex.codecogs.com/png.latex?x%20%5Csim%20N(%5Cmu,%5CSigma)">, then <img src="https://latex.codecogs.com/png.latex?%5CSigma%5E%7B-1/2%7D(x-%5Cmu)%5Csim%20N(0,1)"></p></li>
<li><p>If <img src="https://latex.codecogs.com/png.latex?x%5Csim%20N(%5Cmu,%20%5CSigma)"> and <img src="https://latex.codecogs.com/png.latex?a"> is a vector of same length as <img src="https://latex.codecogs.com/png.latex?x">, then <img src="https://latex.codecogs.com/png.latex?a%5ETx%20%5Csim%20N(a%5ET%5Cmu,%20a%5ET%5CSigma%20a)">.</p></li>
<li><p>Let $ V = (x-)<sup>T</sup>{-1}(x-)$. Then <img src="https://latex.codecogs.com/png.latex?V%20%5Csim%20%5Cchi%5E2_p"></p></li>
</ol>
<div id="cell-14" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4">mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-5">diag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.6</span></span>
<span id="cb1-6">cov <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, diag], [diag, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb1-7">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.multivariate_normal(mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mean,cov<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cov, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span>
<span id="cb1-8">x.shape</span>
<span id="cb1-9"></span>
<span id="cb1-10">plt.plot(x[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], x[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-11">plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb1-12">plt.grid()</span>
<span id="cb1-13">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/MultivariateStatisticsNotes_files/figure-html/cell-2-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-15" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">x.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>(800, 2)</code></pre>
</div>
</div>
<section id="kl-divergence-for-guassian-distributions" class="level3">
<h3 class="anchored" data-anchor-id="kl-divergence-for-guassian-distributions">KL Divergence for Guassian Distributions</h3>
<p>One useful is the Kullback-Leibler divergence, <img src="https://latex.codecogs.com/png.latex?D_%7BKL%7D">, a metric for comparing two probability distributions, between two Guassians, which we now show here.</p>
<p>Recall that the KL is given by <img src="https://latex.codecogs.com/png.latex?D_%7BKL%7D(P%7C%7CQ)%20=%20E_P%20%5CBig%5B%5Clog%20%5Cfrac%7BP%7D%7BQ%7D%5CBig%5D"></p>
<p>Let <img src="https://latex.codecogs.com/png.latex?P"> and <img src="https://latex.codecogs.com/png.latex?Q"> be two multivariate Gaussians of dimension <img src="https://latex.codecogs.com/png.latex?n"> with means <img src="https://latex.codecogs.com/png.latex?%5Cmu_P,%20%5Cmu_Q"> and variances <img src="https://latex.codecogs.com/png.latex?%5CSigma_P,%20%5CSigma_Q">, respectively. We begin to find the <img src="https://latex.codecogs.com/png.latex?D_%7BKL%7D"> between these two starting off by cancelling the common normalizing constants, flipping the inverse determinants, and turning the logarithm of a fraction into a difference of logarithms, cancelling out the exponentials in the process:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AD_%7BKL%7D(P%7C%7CQ)%20&amp;=%20E_P%5CBigg%5B%5Clog%5CBig%5B%5Cfrac%7B%5Cdfrac%7B1%7D%7B(2%5Cpi)%5E%7Bn/2%7D%7C%5CSigma_P%7C%5E%7B1/2%7D%7D%20%5Cexp%5Cbig%5B-%5Cfrac%7B1%7D%7B2%7D(x-%5Cmu_P)%5ET%5CSigma_P%5E%7B-1%7D(x-%5Cmu_P)%5Cbig%5D%7D%7B%5Cdfrac%7B1%7D%7B(2%5Cpi)%5E%7Bn/2%7D%7C%5CSigma_Q%7C%5E%7B1/2%7D%7D%20%5Cexp%5Cbig%5B-%5Cfrac%7B1%7D%7B2%7D(x-%5Cmu_Q)%5ET%5CSigma_Q%5E%7B-1%7D(x-%5Cmu_Q)%5Cbig%5D%7D%5CBig%5D%5CBigg%5D%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20&amp;=%20E_P%5CBigg%5B%5Clog%5CBig%5B%5Cfrac%7B%7C%5CSigma_Q%7C%5E%7B1/2%7D%20%5Cexp%5Cbig%5B-%5Cfrac%7B1%7D%7B2%7D(x-%5Cmu_P)%5ET%5CSigma_P%5E%7B-1%7D(x-%5Cmu_P)%5Cbig%5D%7D%7B%7C%5CSigma_P%7C%5E%7B1/2%7D%20%5Cexp%5Cbig%5B-%5Cfrac%7B1%7D%7B2%7D(x-%5Cmu_Q)%5ET%5CSigma_Q%5E%7B-1%7D(x-%5Cmu_Q)%5Cbig%5D%7D%5CBig%5D%5CBigg%5D%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20&amp;=%20E_P%5CBig%5B%5Cfrac%7B1%7D%7B2%7D%5Clog%20%5Cfrac%7B%7C%5CSigma_Q%7C%7D%7B%7C%5CSigma_P%7C%7D%20%20-%5Cfrac%7B1%7D%7B2%7D(x-%5Cmu_P)%5ET%5CSigma_P%5E%7B-1%7D(x-%5Cmu_P)%20+%20%5Cfrac%7B1%7D%7B2%7D(x-%5Cmu_Q)%5ET%5CSigma_Q%5E%7B-1%7D(x-%5Cmu_Q)%5CBig%5D%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20&amp;=%20%5Cfrac%7B1%7D%7B2%7D%5Clog%20%5Cfrac%7B%7C%5CSigma_Q%7C%7D%7B%7C%5CSigma_P%7C%7D%20+%20%5Cfrac%7B1%7D%7B2%7DE_P%5CBig%5B-(x-%5Cmu_P)%5ET%5CSigma_P%5E%7B-1%7D(x-%5Cmu_P)%20+%20(x-%5Cmu_Q)%5ET%5CSigma_Q%5E%7B-1%7D(x-%5Cmu_Q)%5CBig%5D%5C%5C%0A%20%20%20%20%20&amp;=%5Cfrac%7B1%7D%7B2%7D%5Clog%20%5Cfrac%7B%7C%5CSigma_Q%7C%7D%7B%7C%5CSigma_P%7C%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%5CBig%5B-trace(%0A%20%20%20%20%20%5CSigma_P%5CSigma_P%5E%7B-1%7D)%20+%20trace(%5CSigma_Q%5CSigma_P%5E%7B-1%7D)%20+%20(%5Cmu_P-%5Cmu_Q)%5ET%5CSigma_Q%5E%7B-1%7D(%5Cmu_P-%5Cmu_Q)%5CBig%5D%5C%5C%0A%20%20%20%20%20&amp;=%5Cfrac%7B1%7D%7B2%7D%5Clog%20%5Cfrac%7B%7C%5CSigma_Q%7C%7D%7B%7C%5CSigma_P%7C%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%5CBig%5B-n%20+%20trace(%5CSigma_Q%5CSigma_P%5E%7B-1%7D)%20+%20(%5Cmu_P-%5Cmu_Q)%5ET%5CSigma_Q%5E%7B-1%7D(%5Cmu_P-%5Cmu_Q)%5CBig%5D%5C%5C%0A%20%20%20%20%20&amp;=%20%5Cfrac%7B1%7D%7B2%7D%5CBigg%5B%5Clog%20%5Cfrac%7B%7C%5CSigma_Q%7C%7D%7B%7C%5CSigma_P%7C%7D%20%20-n%20+%20trace(%5CSigma_Q%5CSigma_P%5E%7B-1%7D)%20+%20(%5Cmu_P-%5Cmu_Q)%5ET%5CSigma_Q%5E%7B-1%7D(%5Cmu_P-%5Cmu_Q)%5CBigg%5D%5C%5C%0A%5Cend%7Balign%7D%20%20%20%20%20%0A"></p>
<p>In our derivation, we used the expectation of quadratic forms results from before, <img src="https://latex.codecogs.com/png.latex?E(%5Cmathbf%7By%7D%5ET%5Cmathbf%7BA%7D%5Cmathbf%7By%7D)%20=%20trace(%5CSigma%20%5Cmathbf%7BA%7D)%20+%20%5Cmathbf%7B%5Cmu%7D%5ET%5Cmathbf%7BA%7D%5Cmathbf%7B%5Cmu%7D">, with the vectors <img src="https://latex.codecogs.com/png.latex?y%20=%20x%20-%20%5Cmu_i">, matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%20=%5CSigma_i%5E%7B-1%7D"> and expectations, <img src="https://latex.codecogs.com/png.latex?E_P(x)%20=%20%5Cmu_P">, <img src="https://latex.codecogs.com/png.latex?E_P(x%20-%20%5Cmu_P)%20=%200"> and <img src="https://latex.codecogs.com/png.latex?E_P(x-%5Cmu_Q)">.</p>


</section>
</section>
</section>

 ]]></description>
  <guid>http://thenewexecutor.github.io/notes/MultivariateStatisticsNotes.html</guid>
  <pubDate>Mon, 27 Oct 2025 06:25:28 GMT</pubDate>
</item>
<item>
  <title>Clustering Notes</title>
  <link>http://thenewexecutor.github.io/notes/ClusteringNotes.html</link>
  <description><![CDATA[ 




<section id="clustering-notes" class="level1">
<h1>Clustering Notes</h1>
<p>The following notes follow along this blog <a href="https://towardsdatascience.com/an-introduction-to-clustering-algorithms-in-python-123438574097">post</a>. Clustering methods all use a central idea of a <strong>distance</strong> or <strong>metric</strong> defined by a function <img src="https://latex.codecogs.com/png.latex?d(i,j)">. It is often the Euclidean distance.</p>
<section id="dbscan" class="level2">
<h2 class="anchored" data-anchor-id="dbscan">DBSCAN</h2>
<section id="concepts" class="level3">
<h3 class="anchored" data-anchor-id="concepts">Concepts</h3>
<p>Consider a set of points in some space to be clustered. Let <img src="https://latex.codecogs.com/png.latex?X%20=%20%5C%7Bx_1,%20...,%20x_n%5C%7D">, a set of <img src="https://latex.codecogs.com/png.latex?n"> objects, <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> be a parameter specifying a radius of a neighborhood with respect to some point. Points in DBSCAN fall into 3 categories: - a point <img src="https://latex.codecogs.com/png.latex?p"> is a <strong>core point</strong> if there are at least a minimum number of points within <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> of it, including itself - a point <img src="https://latex.codecogs.com/png.latex?q"> is <strong>directly reachable</strong> from point <img src="https://latex.codecogs.com/png.latex?p"> if <img src="https://latex.codecogs.com/png.latex?q"> is within distance <img src="https://latex.codecogs.com/png.latex?%5Cepsilon">, but only if <img src="https://latex.codecogs.com/png.latex?p"> is a core point - a point <img src="https://latex.codecogs.com/png.latex?q"> is <strong>reachable</strong> form <img src="https://latex.codecogs.com/png.latex?p"> if there is a path <img src="https://latex.codecogs.com/png.latex?p_1,%20...,%20p_n"> with <img src="https://latex.codecogs.com/png.latex?p_1%20=%20p"> and <img src="https://latex.codecogs.com/png.latex?p_n%20=%20q"> where each <img src="https://latex.codecogs.com/png.latex?p_%7Bi+1%7D"> is directly reachable from <img src="https://latex.codecogs.com/png.latex?p_i">. This implies that the initial point and all points on the path must be core points, with the potential exception of <img src="https://latex.codecogs.com/png.latex?q"> - all points not reachable from any other point are <strong>outliers</strong> or <strong>noise points</strong></p>
<p>Reachability is not a symmetric relation, so another concept of connection is required for the extent of clusters: - two points are <strong>density-connected</strong> if there is a point <img src="https://latex.codecogs.com/png.latex?o"> such that both <img src="https://latex.codecogs.com/png.latex?p"> and <img src="https://latex.codecogs.com/png.latex?q"> are reachable from <img src="https://latex.codecogs.com/png.latex?o"></p>
<p>Clusters satisfy two properties: - all points within a cluster are mutually density-connected - if a point is density-reachable from some point of the cluster, it is part of the cluster as well</p>
</section>
<section id="steps" class="level3">
<h3 class="anchored" data-anchor-id="steps">Steps</h3>
<ol start="0" type="1">
<li><p>Choose minimum points <img src="https://latex.codecogs.com/png.latex?m_%7Bpts%7D"> threshold and <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"></p></li>
<li><p>Find the points in the <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> neighborhood of every point, and identify the core points with more than <img src="https://latex.codecogs.com/png.latex?m_%7Bpts%7D"> neighbors</p></li>
<li><p>Find the connected components of <em>core</em> points on the neighbor graph, ignoring all non-core points</p></li>
<li><p>Assign each non-core point to a nearby cluster if the cluster is an <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> neighbor, otherwise assign it to noise</p></li>
</ol>
</section>
<section id="optimization-criterion" class="level3">
<h3 class="anchored" data-anchor-id="optimization-criterion">Optimization Criterion</h3>
<p>For any possible clustering <img src="https://latex.codecogs.com/png.latex?C%20=%20%5C%7BC_1,%20...,%20C_t%5C%7D"> out of the set of all clusterings <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BC%7D">, DBSCAN minimizes the number of clusters such that every pair of points, <img src="https://latex.codecogs.com/png.latex?p,%20q"> in a cluster is density-reachable.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cunderset%7BC%20%5Csubset%5Cmathcal%7BC%7D,%20d_%7Bdb%7D(p,%20q)%20%5Cle%20%5Cepsilon%20%5Cforall%20p,%20q%20%5Cin%20C_i%20%5Cforall%20C_i%20%5Cin%20C%7D%5Cmin%20%7CC%7C"></p>
</section>
</section>
<section id="hdbscan" class="level2">
<h2 class="anchored" data-anchor-id="hdbscan">HDBSCAN</h2>
<p>This is a hierarchical extension of DBSCAN. For a chosen <img src="https://latex.codecogs.com/png.latex?m_%7Bpts%7D"></p>
<section id="concepts-1" class="level3">
<h3 class="anchored" data-anchor-id="concepts-1">Concepts</h3>
<section id="core-distance-d_corex_p" class="level4">
<h4 class="anchored" data-anchor-id="core-distance-d_corex_p">Core Distance <img src="https://latex.codecogs.com/png.latex?d_%7Bcore%7D(x_p)"></h4>
<p>applies to object <img src="https://latex.codecogs.com/png.latex?x_p%20%5Cin%20X">, with respect to <img src="https://latex.codecogs.com/png.latex?m_%7Bpts%7D">, is defined as the distance from <img src="https://latex.codecogs.com/png.latex?x_p"> to its <img src="https://latex.codecogs.com/png.latex?m_%7Bpts%7D">-nearest neighbor, including itself</p>
</section>
<section id="epsilon-core-object" class="level4">
<h4 class="anchored" data-anchor-id="epsilon-core-object"><img src="https://latex.codecogs.com/png.latex?%5Cepsilon">-Core Object</h4>
<p>Any object <img src="https://latex.codecogs.com/png.latex?x_p%20%5Cin%20X"> is where the following holds: <img src="https://latex.codecogs.com/png.latex?d_%7Bcore%7D(x_p)%20%5Cle%20%5Cepsilon"></p>
</section>
<section id="mutual-reachability-distance-d_mreachx_p-x_q" class="level4">
<h4 class="anchored" data-anchor-id="mutual-reachability-distance-d_mreachx_p-x_q">Mutual Reachability Distance <img src="https://latex.codecogs.com/png.latex?d_%7Bmreach%7D(x_p,%20x_q)"></h4>
<p>is defined as <img src="https://latex.codecogs.com/png.latex?d_%7Bmreach%7D(x_p,%20x_q)%20%5Cequiv%5Cmax%5C%7Bd_%7Bcore%7D(x_p),%20d_%7Bcore%7D(x_q),%20d(x_p,%20x_q)%20%5C%7D"></p>
</section>
<section id="mutual-reachability-graph-g_m_pts" class="level4">
<h4 class="anchored" data-anchor-id="mutual-reachability-graph-g_m_pts">Mutual Reachability Graph <img src="https://latex.codecogs.com/png.latex?G_%7Bm_%7Bpts%7D%7D"></h4>
<p>The <em>complete</em> graph in which the objects of <img src="https://latex.codecogs.com/png.latex?X"> are vertices and the weight of each edge is the mutual reachability distance (wrt <img src="https://latex.codecogs.com/png.latex?m_%7Bpts%7D">) between the respective pair of objects.</p>
</section>
<section id="subgraphs-of-g_m_pts-and-hierarchies" class="level4">
<h4 class="anchored" data-anchor-id="subgraphs-of-g_m_pts-and-hierarchies">Subgraphs of <img src="https://latex.codecogs.com/png.latex?G_%7Bm_%7Bpts%7D%7D"> and Hierarchies</h4>
<p>If we take a subgraph <img src="https://latex.codecogs.com/png.latex?G_%7Bm_%7Bpts%7D,%20%5Cepsilon%7D"> obtained by removing all edges from <img src="https://latex.codecogs.com/png.latex?G_%7Bm_%7Bpts%7D%7D"> with weights greater than <img src="https://latex.codecogs.com/png.latex?%5Cepsilon">, then the connected components are the <img src="https://latex.codecogs.com/png.latex?%5Cepsilon">-core objects in the DBSCAN clusters, and remaining objects noise. Thus, DBSCAN partitions for <img src="https://latex.codecogs.com/png.latex?%5Cepsilon%20%5Cin%20%5B0,%20%5Cinfty)"> can be produced in a hierarchical way: at 0 we have the finest clusters, or leaves of a dendrogram, while at higher values, we approach the root of the dendrogram.</p>
</section>
</section>
<section id="steps-1" class="level3">
<h3 class="anchored" data-anchor-id="steps-1">Steps</h3>
<section id="core-algorithm" class="level4">
<h4 class="anchored" data-anchor-id="core-algorithm">Core Algorithm</h4>
<ol type="1">
<li>Compute core distance wrt <img src="https://latex.codecogs.com/png.latex?m_%7Bpts%7D"> for all data objects in <img src="https://latex.codecogs.com/png.latex?X"></li>
<li>Compute minimum spanning tree (MST) of <img src="https://latex.codecogs.com/png.latex?G_%7Bm_%7Bpts%7D%7D">, the mutual reachability graph</li>
<li>Extend the MST to obtain <img src="https://latex.codecogs.com/png.latex?MST_%7Bext%7D"> by adding for each vertex, a “self edge” with the core distance of the corresponding object as weight</li>
<li>Extract the HDBSCAN hierarchy as a dendrogram from <img src="https://latex.codecogs.com/png.latex?MST_%7Bext%7D">
<ul>
<li>4.1 For the root of the tree, assign all objects the same label</li>
<li>4.2 Iteratively remove all edges from the <img src="https://latex.codecogs.com/png.latex?MST_%7Bext%7D"> in decreasing order of weight, with ties being removed simultaenously
<ul>
<li>4.2.1 Before each removal, set the dendrogram scale value of the current hierarchical level as the weight of the edge(s) to be removed</li>
<li>4.2.2 After each removal, assign labels to connected component(s) that contain the end vertices of removed edges, a new cluster label to a component if it still has at least one edge, else noise</li>
</ul></li>
</ul></li>
</ol>
</section>
<section id="customizable-cluster-processing-final-step" class="level4">
<h4 class="anchored" data-anchor-id="customizable-cluster-processing-final-step">Customizable Cluster Processing Final Step</h4>
<p>When reaching a lower <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> level in the tree, we must consider what happens to the clusters. We can define a separate minimum cluster size which can be applied to the following: - if <strong>all</strong> cluster’s subcomponents are spurious, it <strong>disappears</strong> - if <strong>only one</strong> of cluster’s subcomponents is <em>not spurious</em>, keep original label, ie <strong>cluster shrinkage</strong> - if <strong>two or more</strong> of cluster’s subcomponents are <em>not spurious</em>, <strong>“true” cluster split</strong></p>
</section>
</section>
<section id="optimal-clustering" class="level3">
<h3 class="anchored" data-anchor-id="optimal-clustering">Optimal Clustering</h3>
<section id="cluster-stability" class="level4">
<h4 class="anchored" data-anchor-id="cluster-stability">Cluster Stability</h4>
<p>When increasing the density threshold, we can see prominent clusters remain and shrink or split while others disappear. A cluster can be seen as a set of points that whose density <img src="https://latex.codecogs.com/png.latex?f(x)">, exceed a threshold, ie. <img src="https://latex.codecogs.com/png.latex?%5Clambda%20=%201/%7B%5Cepsilon%7D">. For a density contour cluster <img src="https://latex.codecogs.com/png.latex?C_i"> that appears at density level <img src="https://latex.codecogs.com/png.latex?%5Clambda_%7Bmin%7D(C_i)">, we can formalize its stability by defining its <strong>excess of mass</strong> as:</p>
<p><img src="https://latex.codecogs.com/png.latex?E(C_i)%20=%20%5Cint_%7Bx%20%5Cin%20C_%7Bi%7D%7D%5CBig(%20f(x)%20-%20%5Clambda_%7Bmin%7D(C_i)%5CBig)dx"></p>
<p>This exhibits monotonic behavior along branches of the dendrogram, so it cannot be used to compare stabilities of nested clusters. Instead, we can define the <strong>relative excess of mass</strong>:</p>
<p><img src="https://latex.codecogs.com/png.latex?E_R(C_i)%20=%20%5Cint_%7Bx%20%5Cin%20C_%7Bi%7D%7D%5CBig(%20%5Clambda_%7Bmax%7D(x,%20C_i)%20-%20%5Clambda_%7Bmin%7D(C_i)%5CBig)dx"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Clambda_%7Bmax%7D(C_i)"> is the density level at which <img src="https://latex.codecogs.com/png.latex?C_i"> is split or disappears, and <img src="https://latex.codecogs.com/png.latex?%5Clambda_%7Bmax%7D(x,%20C_i)%20=%20%5Cmin%5C%7Bf(x),%20%5Clambda_%7Bmax%7D(C_i)%5C%7D"></p>
<p>For an HDBSCAN hierarchy, where we have finite data set <img src="https://latex.codecogs.com/png.latex?X">, cluster labels, and desnity thresholds associated with each hierarchical level, we can adapt the previous expression to define the <strong>stability</strong> of a cluster <img src="https://latex.codecogs.com/png.latex?C_i"> as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20S(C_i)%20=%20%5Csum_%7Bx_j%20%5Cin%20C_i%7D%20%5CBig(%20%5Clambda_%7Bmax%7D(x,%20C_i)%20-%20%5Clambda_%7Bmin%7D(C_i)%5CBig)%20=%20%5Csum_%7Bx_j%20%5Cin%20C_i%7D%20%5CBig(%5Cfrac%7B1%7D%7B%5Cepsilon_%7Bmin%7D(x_j,%20C_i)%7D%20-%20%5Cfrac%7B1%7D%7B%5Cepsilon_%7Bmax%7D(C_i)%7D%5CBig)"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Clambda_%7Bmin%7D(C_i)"> is the minimum density level at which <img src="https://latex.codecogs.com/png.latex?C_i"> exists, <img src="https://latex.codecogs.com/png.latex?%5Clambda_%7Bmax%7D(x_j,%20C_i)"> is the density level beyond which object <img src="https://latex.codecogs.com/png.latex?x_j"> no longer belongs to cluster <img src="https://latex.codecogs.com/png.latex?C_i"> and <img src="https://latex.codecogs.com/png.latex?%5Cepsilon_%7Bmax%7D(C_i)"> and <img src="https://latex.codecogs.com/png.latex?%5Cepsilon_%7Bmin%7D(x_j,%20C_i)"> are the corresponding values for the threshold <img src="https://latex.codecogs.com/png.latex?%5Cepsilon">.</p>
</section>
<section id="cluster-selection-algorithm" class="level4">
<h4 class="anchored" data-anchor-id="cluster-selection-algorithm">Cluster Selection Algorithm</h4>
<p>With the notion of cluster stability developed, we can have extraction of the most prominent clusters formulated as an optimization problem of maximizing cluster stabilities subject to constraints:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cunderset%7B%5Cdelta_2,%20...,%20%5Cdelta_%7B%5Ckappa%7D%7D%5Cmax%20J%20=%20%5Csum%5E%5Ckappa_%7Bi=2%7D%5Cdelta_iS(C_i)"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bsubject%20to%7D%20%5Cbegin%7Bcases%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cdelta_i%20%5Cin%20%5C%7B0,1%5C%7D,%20i=2,...,%5Ckappa%20%5C%5C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Csum_%7Bj%20%5Cin%20I_h%7D%20%5Cdelta_j%20=%201,%20%5Cforall%20h%20%5Cin%20L%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cend%7Bcases%7D"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cdelta_i"> indicates if cluster <img src="https://latex.codecogs.com/png.latex?i"> is in the flat solution, <img src="https://latex.codecogs.com/png.latex?L%20=%20%5C%7Bh%20%7C%20C_h%20%5Ctext%7Bis%20a%20leaf%20cluster%7D%5C%7D"> is the set of indices of leaf clusters, and <img src="https://latex.codecogs.com/png.latex?I_h%20=%20%5C%7Bj%20%7C%20j%20%5Cne%201%20%5Ctext%7B%20and%20%7DC_j%20%5Ctext%7B%20is%20an%20ascendant%20of%20%7D%20C_h%5C%7D">, the set of indices of all clusters on the path from <img src="https://latex.codecogs.com/png.latex?C_h"> (included) to the root (excluded). The constraints prevent nested clusters on the same path from being selected at the same time.</p>
<p>Selecting the clusters requires bottom up processing of nodes excluding the root, starting with the leaves, deciding whether to keep node <img src="https://latex.codecogs.com/png.latex?C_i"> or a best so far selection of clusters in its subtrees. In the process, the total stability, <img src="https://latex.codecogs.com/png.latex?%5Chat%7BS%7D(C_i)"> is updated:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Chat%7BS%7D(C_i)%20=%20%5Cbegin%7Bcases%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20S(C_i),%20&amp;%5Ctext%7Bif%20%7D%20C_i%20%5Ctext%7B%20is%20a%20leaf%20node%7D%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cmax%5C%7BS(C_i),%20%5Chat%7BS%7D(C_%7Bi_l%7D)%20+%20%5Chat%7BS%7D(C_%7Bi_r%7D)%20&amp;%5Ctext%7Bif%20%7D%20C_i%20%5Ctext%7B%20is%20an%20internal%20node%7D%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cend%7Bcases%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20"></p>
<section id="steps-2" class="level5">
<h5 class="anchored" data-anchor-id="steps-2">Steps</h5>
<ol type="1">
<li>Initialize <img src="https://latex.codecogs.com/png.latex?%5Cdelta_2%20=%20...%20%5Cdelta_%5Ckappa%20=%201"> and for all leaf nodes, set <img src="https://latex.codecogs.com/png.latex?%5Chat%7BS%7D(C_h)%20=%20S(C_h)"></li>
<li>Starting from the deepest levels, do bottom-up (excluding root):
<ul>
<li>2.1 If <img src="https://latex.codecogs.com/png.latex?S(C_i)%20%3C%20%5Chat%7BS%7D(C_%7Bi_r%7D)%20+%20%5Chat%7BS%7D(C_%7Bi_l%7D)">, set <img src="https://latex.codecogs.com/png.latex?%5Chat%7BS%7D(C_i)%20=%20%5Chat%7BS%7D(C_%7Bi_l%7D)%20+%20%5Chat%7BS%7D(C_%7Bi_r%7D)"> and set <img src="https://latex.codecogs.com/png.latex?%5Cdelta_i=0"></li>
<li>2.2 Else, set <img src="https://latex.codecogs.com/png.latex?%5Chat%7BS%7D(C_i)%20=%20S(C_i)"> and set <img src="https://latex.codecogs.com/png.latex?%5Cdelta_%7B(.)%7D%20=%200"> for all clusters in <img src="https://latex.codecogs.com/png.latex?C_i">’s subtrees.</li>
</ul></li>
</ol>
</section>
</section>
</section>
<section id="implementation" class="level3">
<h3 class="anchored" data-anchor-id="implementation">Implementation</h3>
<p>Hierarchical clustering can typically be slow but thanks to parallelization, can be sped up via GPUs. Nvidia’s <a href="https://developer.nvidia.com/blog/faster-hdbscan-soft-clustering-with-rapids-cuml/">blog</a> entry, <em>Faster HDBSCAN Soft Clustering with RAPIDS cuML</em>, shows comparisons with multiple methods on datasets of varying sizes.</p>
<div id="cell-24" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> data</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb1-6">sns.set_context(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'poster'</span>)</span>
<span id="cb1-7">sns.set_style(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>)</span>
<span id="cb1-8">sns.set_color_codes()</span>
<span id="cb1-9">plot_kwds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alpha'</span> : <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s'</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'linewidths'</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}</span></code></pre></div>
</div>
<div id="cell-25" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">moons, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.make_moons(n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, noise<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb2-2">blobs, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.make_blobs(n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, centers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.25</span>), (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>)], cluster_std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb2-3">test_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vstack([moons, blobs])</span>
<span id="cb2-4">plt.scatter(test_data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], test_data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>plot_kwds)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-26" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hdbscan</span>
<span id="cb3-2"></span>
<span id="cb3-3">clusterer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hdbscan.HDBSCAN(min_cluster_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, gen_min_span_tree<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-4">clusterer.fit(test_data)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>HDBSCAN(gen_min_span_tree=True)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked=""><label for="sk-estimator-id-1" class="sk-toggleable__label sk-toggleable__label-arrow">HDBSCAN</label><div class="sk-toggleable__content"><pre>HDBSCAN(gen_min_span_tree=True)</pre></div></div></div></div></div>
</div>
</div>
<div id="cell-27" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">clusterer.minimum_spanning_tree_.plot(edge_cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>,</span>
<span id="cb4-2">                                      edge_alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>,</span>
<span id="cb4-3">                                      node_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>,</span>
<span id="cb4-4">                                      edge_linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-28" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">clusterer.single_linkage_tree_.plot(cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>, colorbar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-29" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">clusterer.condensed_tree_.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-30" class="cell" data-scrolled="true" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">clusterer.condensed_tree_.plot(select_clusters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, selection_palette<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sns.color_palette())</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-31" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette()</span>
<span id="cb8-2">cluster_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [sns.desaturate(palette[col], sat)</span>
<span id="cb8-3">                  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> col, sat <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span></span>
<span id="cb8-4">                  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(clusterer.labels_, clusterer.probabilities_)]</span>
<span id="cb8-5">plt.scatter(test_data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], test_data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cluster_colors, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>plot_kwds)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="soft-clustering-for-hdbscan" class="level3">
<h3 class="anchored" data-anchor-id="soft-clustering-for-hdbscan">Soft Clustering for HDBSCAN</h3>
<section id="concept" class="level4">
<h4 class="anchored" data-anchor-id="concept">Concept</h4>
<ul>
<li>Hard clustering assigns a single cluster label or noise</li>
<li>Soft clustering assigns a vector of probabilities</li>
</ul>
</section>
<section id="instructional-implementation" class="level4">
<h4 class="anchored" data-anchor-id="instructional-implementation">Instructional Implementation</h4>
<div id="cell-36" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hdbscan</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb9-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.spatial.distance <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cdist</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb9-11">sns.set_context(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'poster'</span>)</span>
<span id="cb9-12">sns.set_style(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>)</span>
<span id="cb9-13">sns.set_color_codes()</span>
<span id="cb9-14"></span>
<span id="cb9-15">plot_kwds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alpha'</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s'</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'linewidths'</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}</span>
<span id="cb9-16">palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'deep'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span></code></pre></div>
</div>
<div id="cell-37" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'clusterable_data.npy'</span>)</span>
<span id="cb10-2">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure()</span>
<span id="cb10-3">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">111</span>)</span>
<span id="cb10-4">plt.scatter(data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>plot_kwds)</span>
<span id="cb10-5">ax.set_xticks([])</span>
<span id="cb10-6">ax.set_yticks([])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-38" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>2309</code></pre>
</div>
</div>
<div id="cell-39" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># build a clustering object to fit the data</span></span>
<span id="cb13-2">clusterer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hdbscan.HDBSCAN(min_cluster_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>).fit(data)</span>
<span id="cb13-3">clusterer.labels_</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>array([ 5,  5,  5, ..., -1, -1,  5], dtype=int64)</code></pre>
</div>
</div>
<div id="cell-40" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(clusterer.labels_)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>2309</code></pre>
</div>
</div>
<div id="cell-41" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">clusterer.probabilities_</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>array([1.        , 0.85883269, 0.90828071, ..., 0.        , 0.        ,
       1.        ])</code></pre>
</div>
</div>
<div id="cell-42" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">clusterer.probabilities_</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>array([1.        , 0.85883269, 0.90828071, ..., 0.        , 0.        ,
       1.        ])</code></pre>
</div>
</div>
<div id="cell-43" class="cell" data-scrolled="true" data-execution_count="16">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># visualize clustering using scores as saturation</span></span>
<span id="cb21-2">pal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'deep'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb21-3">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [sns.desaturate(pal[col], sat) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> col, sat <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(clusterer.labels_,</span>
<span id="cb21-4">                                                            clusterer.probabilities_)]</span>
<span id="cb21-5">plt.scatter(data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>plot_kwds)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="distance-based-membership" class="level5">
<h5 class="anchored" data-anchor-id="distance-based-membership">Distance Based Membership</h5>
<p>This takes advantage of features to examine clustering further, as pointed out in these <a href="https://hdbscan.readthedocs.io/en/latest/advanced_hdbscan.html#">docs</a>. In particular, we use the <a href="https://github.com/scikit-learn-contrib/hdbscan/blob/master/hdbscan/plots.py#L54"><code>CondensedTree</code></a> object, obtained via `clusterer. which is a dendrogram, or family tree of various clusters.</p>
<ul>
<li><code>_raw_tree</code> is the tree in the form of a numpy <a href="https://numpy.org/doc/stable/reference/generated/numpy.recarray.html">recarray</a> allowing lookup based on field names where each row represents an edge between a parent and child clusters:
<ul>
<li><strong>parent</strong>: id of parent cluster</li>
<li><strong>child</strong>: id of child cluster</li>
<li><strong>lambda_val</strong>: inverse distance, aka density at which edge forms</li>
<li><strong>child_size</strong>: number of points in the child cluster</li>
</ul></li>
</ul>
<div id="cell-46" class="cell" hidden="true" data-execution_count="94">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> exemplars(cluster_id, condensed_tree):</span>
<span id="cb22-2">    raw_tree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> condensed_tree._raw_tree</span>
<span id="cb22-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Just the cluster elements of the tree, excluding singleton points</span></span>
<span id="cb22-4">    clusterer_tree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> raw_tree[raw_tree[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child_size'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb22-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the leaf cluster nodes under the cluster we are considering</span></span>
<span id="cb22-6">    leaves <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hdbscan.plots._recurse_leaf_dfs(clusterer_tree, cluster_id)</span>
<span id="cb22-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now collect up the last remaining points of each leaf cluster (the heart of the leaf)</span></span>
<span id="cb22-8">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([])</span>
<span id="cb22-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> leaf <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> leaves:</span>
<span id="cb22-10">        max_lambda <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> raw_tree[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lambda_val'</span>][raw_tree[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'parent'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> leaf].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb22-11">        points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> raw_tree[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child'</span>][(raw_tree[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'parent'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> leaf) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span></span>
<span id="cb22-12">                                   (raw_tree[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lambda_val'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> max_lambda)]</span>
<span id="cb22-13">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.hstack((result, points))</span>
<span id="cb22-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result.astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int32'</span>)</span>
<span id="cb22-15"></span>
<span id="cb22-16">tree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clusterer.condensed_tree_</span>
<span id="cb22-17">plt.scatter(data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grey'</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>plot_kwds)</span>
<span id="cb22-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tree._select_clusters()):</span>
<span id="cb22-19">    c_exemplars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exemplars(c, tree)</span>
<span id="cb22-20">    plt.scatter(data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][c_exemplars], data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][c_exemplars], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>palette[i], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>plot_kwds)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>C:\Users\Jonathan\AppData\Local\Temp\ipykernel_16588\4108267181.py:20: UserWarning: *c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* &amp; *y*.  Please use the *color* keyword-argument or provide a 2D array with a single row if you intend to specify the same RGB or RGBA value for all points.
  plt.scatter(data.T[0][c_exemplars], data.T[1][c_exemplars], c=palette[i], **plot_kwds)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-18-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-47" class="cell" hidden="true" data-scrolled="true" data-execution_count="111">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> min_dist_to_exemplar(point, cluster_exemplars, data):</span>
<span id="cb24-2">    dists <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cdist([data[point]], data[cluster_exemplars.astype(np.int32)])</span>
<span id="cb24-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> dists.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()</span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> dist_vector(point, exemplar_dict, data):</span>
<span id="cb24-6">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb24-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> cluster <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> exemplar_dict:</span>
<span id="cb24-8">        result[cluster] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> min_dist_to_exemplar(point, exemplar_dict[cluster], data)</span>
<span id="cb24-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.array(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(result.values()))</span>
<span id="cb24-10"></span>
<span id="cb24-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> dist_membership_vector(point, exemplar_dict, data, softmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb24-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> softmax:</span>
<span id="cb24-13">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>dist_vector(point, exemplar_dict, data))</span>
<span id="cb24-14">        result[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>np.isfinite(result)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.finfo(np.double).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span></span>
<span id="cb24-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb24-16">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>dist_vector(point, exemplar_dict, data)</span>
<span id="cb24-17">        result[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>np.isfinite(result)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.finfo(np.double).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span></span>
<span id="cb24-18">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> result.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb24-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb24-20"></span>
<span id="cb24-21"></span>
<span id="cb24-22">exemplar_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c:exemplars(c, tree) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tree._select_clusters()}</span>
<span id="cb24-23">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.empty((data.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb24-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(data.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb24-25">    membership_vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dist_membership_vector(x, exemplar_dict, data)</span>
<span id="cb24-26">    color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(membership_vector)</span>
<span id="cb24-27">    saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> membership_vector[color]</span>
<span id="cb24-28">    colors[x] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.desaturate(pal[color], saturation)</span>
<span id="cb24-29">plt.scatter(data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>plot_kwds)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>C:\Users\Jonathan\AppData\Local\Temp\ipykernel_16588\1075745609.py:16: RuntimeWarning: divide by zero encountered in divide
  result = 1./dist_vector(point, exemplar_dict, data)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-19-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="outlier-based-membership" class="level5">
<h5 class="anchored" data-anchor-id="outlier-based-membership">Outlier Based Membership</h5>
<ul>
<li>these are density-based memberships using cluster persistence as a baseline of comparison</li>
<li>GLOSH algorithm compares cluster persistence with how long a point stayed in the cluster</li>
<li>we can compare cluster persistence with the <em>merge height</em> of the point with a fixed cluster in the dendrogram
<ul>
<li>merge height represents the disimilarity between two clusters</li>
<li>we can do that with multiple clusters to form a vector which can be normalized into memership scores</li>
</ul></li>
</ul>
<div id="cell-50" class="cell" data-scrolled="true" data-execution_count="126">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> max_lambda_val(cluster, tree):</span>
<span id="cb26-2">    cluster_tree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tree[tree[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child_size'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb26-3">    leaves <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hdbscan.plots._recurse_leaf_dfs(cluster_tree, cluster)</span>
<span id="cb26-4">    max_lambda <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb26-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> leaf <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> leaves:</span>
<span id="cb26-6">        max_lambda <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(max_lambda,</span>
<span id="cb26-7">                         tree[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lambda_val'</span>][tree[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'parent'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> leaf].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>())</span>
<span id="cb26-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> max_lambda</span>
<span id="cb26-9"></span>
<span id="cb26-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> points_in_cluster(cluster, tree):</span>
<span id="cb26-11">    leaves <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hdbscan.plots._recurse_leaf_dfs(tree, cluster)</span>
<span id="cb26-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> leaves</span>
<span id="cb26-13"></span>
<span id="cb26-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> merge_height(point, cluster, tree, point_dict):</span>
<span id="cb26-15">    cluster_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tree[tree[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> cluster]</span>
<span id="cb26-16">    cluster_height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cluster_row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lambda_val'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb26-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> point <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> point_dict[cluster]:</span>
<span id="cb26-18">        merge_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tree[tree[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(point)][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb26-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> merge_row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lambda_val'</span>]</span>
<span id="cb26-20">        </span>
<span id="cb26-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb26-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> point <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> point_dict[cluster]:</span>
<span id="cb26-23">            parent_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tree[tree[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> cluster]</span>
<span id="cb26-24">            cluster <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parent_row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'parent'</span>].astype(np.float64)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb26-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tree[tree[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'parent'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> cluster]:</span>
<span id="cb26-26">            child_cluster <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child'</span>])</span>
<span id="cb26-27">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> child_cluster <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> point:</span>
<span id="cb26-28">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lambda_val'</span>]</span>
<span id="cb26-29">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> child_cluster <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> point_dict <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> point <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> point_dict[child_cluster]:</span>
<span id="cb26-30">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lambda_val'</span>]</span>
<span id="cb26-31">            </span>
<span id="cb26-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> per_cluster_scores(point, cluster_ids, tree, max_lambda_dict, point_dict):</span>
<span id="cb26-33">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb26-34">    point_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tree[tree[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> point]</span>
<span id="cb26-35">    point_cluster <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(point_row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'parent'</span>])</span>
<span id="cb26-36">    max_lambda <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_lambda_dict[point_cluster] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-8</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># avoid zero lambda vals in odd cases</span></span>
<span id="cb26-37">    </span>
<span id="cb26-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cluster_ids:</span>
<span id="cb26-39">        height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merge_height(point, c, tree, point_dict)</span>
<span id="cb26-40">        result[c] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (max_lambda <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (max_lambda <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> height))</span>
<span id="cb26-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb26-42"></span>
<span id="cb26-43"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> outlier_membership_vector(point, cluster_ids, tree,</span>
<span id="cb26-44">                              max_lambda_dict, point_dict, softmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb26-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> softmax:</span>
<span id="cb26-46">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(np.array(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(per_cluster_scores(point,</span>
<span id="cb26-47">                                                         cluster_ids,</span>
<span id="cb26-48">                                                         tree,</span>
<span id="cb26-49">                                                         max_lambda_dict,</span>
<span id="cb26-50">                                                         point_dict</span>
<span id="cb26-51">                                                         ).values())))</span>
<span id="cb26-52">        result[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>np.isfinite(result)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.finfo(np.double).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span></span>
<span id="cb26-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb26-54">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(per_cluster_scores(point,</span>
<span id="cb26-55">                                                  cluster_ids,</span>
<span id="cb26-56">                                                  tree,</span>
<span id="cb26-57">                                                  max_lambda_dict,</span>
<span id="cb26-58">                                                  point_dict</span>
<span id="cb26-59">                                                 ).values()))</span>
<span id="cb26-60">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> result.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb26-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb26-62"></span>
<span id="cb26-63">cluster_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tree._select_clusters()</span>
<span id="cb26-64">raw_tree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tree._raw_tree</span>
<span id="cb26-65">all_possible_clusters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(data.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], raw_tree[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'parent'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).astype(np.float64)</span>
<span id="cb26-66">max_lambda_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c:max_lambda_val(c, raw_tree) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> all_possible_clusters}</span>
<span id="cb26-67">point_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(points_in_cluster(c, raw_tree)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> all_possible_clusters}</span>
<span id="cb26-68">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.empty((data.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb26-69"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(data.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb26-70">    membership_vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outlier_membership_vector(x, cluster_ids, raw_tree,</span>
<span id="cb26-71">                                                  max_lambda_dict, point_dict, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb26-72">    color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(membership_vector)</span>
<span id="cb26-73">    saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> membership_vector[color]</span>
<span id="cb26-74">    colors[x] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.desaturate(pal[color], saturation)</span>
<span id="cb26-75">plt.scatter(data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>plot_kwds)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-20-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="middle-way" class="level5">
<h5 class="anchored" data-anchor-id="middle-way">Middle Way</h5>
<p>To combine distance and membership approaches we can: - view membership vectors as probability distributions - combining them can be achieved via Bayes’ rule</p>
<div id="cell-53" class="cell" hidden="true" data-execution_count="129">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> combined_membership_vector(point, data, tree, exemplar_dict, cluster_ids,</span>
<span id="cb27-2">                    max_lambda_dict, point_dict, softmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb27-3">    raw_tree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tree._raw_tree</span>
<span id="cb27-4">    dist_vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dist_membership_vector(point, exemplar_dict, data, softmax)</span>
<span id="cb27-5">    outl_vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outlier_membership_vector(point, cluster_ids, raw_tree,</span>
<span id="cb27-6">                                         max_lambda_dict, point_dict, softmax)</span>
<span id="cb27-7">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dist_vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> outl_vec</span>
<span id="cb27-8">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> result.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb27-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb27-10"></span>
<span id="cb27-11">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.empty((data.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb27-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(data.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb27-13">    membership_vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combined_membership_vector(x, data, tree, exemplar_dict, cluster_ids,</span>
<span id="cb27-14">                                                   max_lambda_dict, point_dict, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb27-15">    color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(membership_vector)</span>
<span id="cb27-16">    saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> membership_vector[color]</span>
<span id="cb27-17">    colors[x] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.desaturate(pal[color], saturation)</span>
<span id="cb27-18">plt.scatter(data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>plot_kwds)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>C:\Users\Jonathan\AppData\Local\Temp\ipykernel_16588\1075745609.py:16: RuntimeWarning: divide by zero encountered in divide
  result = 1./dist_vector(point, exemplar_dict, data)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-21-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="converting-a-conditional-probability" class="level5">
<h5 class="anchored" data-anchor-id="converting-a-conditional-probability">Converting a Conditional Probability</h5>
<p>The previous computation was the probability vector that a point is in each cluster, given that the point is in a cluster. To convert the conditional probability to a joint one, we need to: - multiply it by the probability that that there is a cluster to which the point belongs - this can be estimated from the merge height and comparing it with the max density - this should result in a number between 0 and 1</p>
<ul>
<li>plotting can show the $ $ cluster and the corresponding color</li>
</ul>
<div id="cell-56" class="cell" data-scrolled="true" data-execution_count="130">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> prob_in_some_cluster(point, tree, cluster_ids, point_dict, max_lambda_dict):</span>
<span id="cb29-2">    heights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb29-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> cluster <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cluster_ids:</span>
<span id="cb29-4">        heights.append(merge_height(point, cluster, tree._raw_tree, point_dict))</span>
<span id="cb29-5">    height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(heights)</span>
<span id="cb29-6">    nearest_cluster <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cluster_ids[np.argmax(heights)]</span>
<span id="cb29-7">    max_lambda <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_lambda_dict[nearest_cluster]</span>
<span id="cb29-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> max_lambda</span>
<span id="cb29-9"></span>
<span id="cb29-10">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.empty((data.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb29-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(data.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb29-12">    membership_vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combined_membership_vector(x, data, tree, exemplar_dict, cluster_ids,</span>
<span id="cb29-13">                                                   max_lambda_dict, point_dict, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb29-14">    membership_vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> prob_in_some_cluster(x, tree, cluster_ids, point_dict, max_lambda_dict)</span>
<span id="cb29-15">    color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(membership_vector)</span>
<span id="cb29-16">    saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> membership_vector[color]</span>
<span id="cb29-17">    colors[x] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.desaturate(pal[color], saturation)</span>
<span id="cb29-18">plt.scatter(data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], data.T[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>plot_kwds)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>C:\Users\Jonathan\AppData\Local\Temp\ipykernel_16588\1075745609.py:16: RuntimeWarning: divide by zero encountered in divide
  result = 1./dist_vector(point, exemplar_dict, data)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-22-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="soft-clustering-in-practice" class="level4">
<h4 class="anchored" data-anchor-id="soft-clustering-in-practice">Soft Clustering in Practice</h4>
<p>What are the general steps involved in performing a soft clustering analysis?</p>
<ol type="1">
<li>dimensionality reduction as a prerequisite to 2D visualization:
<ul>
<li>PCA</li>
<li>TSNE</li>
<li>UMAP<br>
</li>
</ul></li>
<li>visualization of raw data</li>
<li>soft clustering via HDBSCAN</li>
<li>visualization of cluster membership
<ul>
<li>hard clustering color coding</li>
<li>soft clustering color saturation<br>
</li>
</ul></li>
<li>quantitative analysis of cluster membership probabilities</li>
</ol>
<div id="cell-59" class="cell" data-execution_count="131">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datasets</span>
<span id="cb31-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.manifold <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TSNE</span>
<span id="cb31-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb31-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb31-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb31-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hdbscan</span>
<span id="cb31-7"></span>
<span id="cb31-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loading raw data, 8x8 gray scale of handwritten digits, plotting low dimensional projection</span></span>
<span id="cb31-9">digits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.load_digits()</span>
<span id="cb31-10">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> digits.data</span>
<span id="cb31-11">projection <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TSNE().fit_transform(data)</span>
<span id="cb31-12">plt.scatter(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>projection.T, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>plot_kwds)</span>
<span id="cb31-13"></span>
<span id="cb31-14"></span>
<span id="cb31-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># setting up a clustering object, fitting and clustering the data </span></span>
<span id="cb31-16">clusterer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hdbscan.HDBSCAN(min_cluster_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, prediction_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).fit(data)</span>
<span id="cb31-17">color_palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Paired'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb31-18">cluster_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [color_palette[x] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb31-19">                  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb31-20">                  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> clusterer.labels_]</span>
<span id="cb31-21">cluster_member_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [sns.desaturate(x, p) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x, p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span></span>
<span id="cb31-22">                         <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(cluster_colors, clusterer.probabilities_)]</span>
<span id="cb31-23">plt.scatter(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>projection.T, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cluster_member_colors, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-23-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Some of the data is noisy, so we can examine the noisy ones more through soft clustering.</p>
<div id="cell-61" class="cell" data-execution_count="136">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">soft_clusters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hdbscan.all_points_membership_vectors(clusterer)</span>
<span id="cb32-2">color_palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Paired'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb32-3">cluster_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [color_palette[np.argmax(x)]</span>
<span id="cb32-4">                  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> soft_clusters]</span>
<span id="cb32-5">plt.scatter(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>projection.T, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cluster_colors, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-24-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can show uncertainty by coupling probability with desaturation of color. The higher the probability, the more saturated or pure the color. The lower the probability, the more gray it will be. Here we can see that desaturation is a harsh treatment with lots of gray, and that a lower limit may be more visually meaningful.</p>
<div id="cell-63" class="cell" data-execution_count="143">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">color_palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.color_palette(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Paired'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb33-2">cluster_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [sns.desaturate(color_palette[np.argmax(x)], np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(x))</span>
<span id="cb33-3">                  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> soft_clusters]</span>
<span id="cb33-4">plt.scatter(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>projection.T, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cluster_colors, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-25-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>One question to investigate is what points have high likelihoods for two clusters and low for the others. It’s worthwhile to note that the probabilities are joint ones, and that points have a probability of not being in a cluster.</p>
<div id="cell-65" class="cell" data-execution_count="158">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> top_two_probs_diff(probs):</span>
<span id="cb34-2">    sorted_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sort(probs)</span>
<span id="cb34-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> sorted_probs[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> sorted_probs[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb34-4"></span>
<span id="cb34-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the differences between the top two probabilities</span></span>
<span id="cb34-6">diffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([top_two_probs_diff(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> soft_clusters])</span>
<span id="cb34-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select out the indices that have a small difference, and a larger total probability, extract from tuple form</span></span>
<span id="cb34-8">mixed_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where((diffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(soft_clusters, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb34-9"></span>
<span id="cb34-10">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mixed_points</span>
<span id="cb34-11">          <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(data.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])]</span>
<span id="cb34-12">plt.scatter(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>projection.T, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-26-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-66" class="cell" data-execution_count="162">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure()</span>
<span id="cb35-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, image <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(digits.images[mixed_points][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>]):</span>
<span id="cb35-3">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb35-4">    ax.imshow(image)</span>
<span id="cb35-5">plt.tight_layout()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-27-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-67" class="cell" data-scrolled="true" data-execution_count="152">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">plt.hist(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(soft_clusters, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="152">
<pre><code>(array([ 36.,  47.,  92., 171., 332., 229., 181., 297., 153., 259.]),
 array([0.58730357, 0.62857321, 0.66984285, 0.7111125 , 0.75238214,
        0.79365178, 0.83492143, 0.87619107, 0.91746071, 0.95873036,
        1.        ]),
 &lt;BarContainer object of 10 artists&gt;)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-28-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="k-means-clustering" class="level2">
<h2 class="anchored" data-anchor-id="k-means-clustering">K-means Clustering</h2>
<section id="description" class="level3">
<h3 class="anchored" data-anchor-id="description">Description</h3>
<p>Given a set of observations <img src="https://latex.codecogs.com/png.latex?(x_1,%20x_2,%20...,%20x_n)"> in a <img src="https://latex.codecogs.com/png.latex?d">-dimensional vector space, k-means clustering partitions the <img src="https://latex.codecogs.com/png.latex?n"> observations into <img src="https://latex.codecogs.com/png.latex?k"> sets, <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BS%7D%20=%20%5C%7BS_1,%20S_2,%20...%20S_k%5C%7D">. The goal is to minimize the variance within each cluster:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cunderset%7B%5Ctextbf%7BS%7D%7D%7B%5Carg%5Cmin%7D%20%5Csum%5Ek_%7Bi=1%7D%20%5Csum_%7Bx%5Cin%20S_i%7D%20%7C%7Cx%20-%20%5Cmu_i%7C%7C%5E2%20=%20%5Cunderset%7B%5Ctextbf%7BS%7D%7D%7B%5Carg%5Cmin%7D%5Csum%5Ek_%7Bi=1%7D%7CS_i%7C%5Ctext%7BVar%7DS_i"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmu_i"> is the mean or centroid of the points in <img src="https://latex.codecogs.com/png.latex?S_i">.</p>
</section>
<section id="steps-3" class="level3">
<h3 class="anchored" data-anchor-id="steps-3">Steps</h3>
<section id="initialization" class="level4">
<h4 class="anchored" data-anchor-id="initialization">Initialization</h4>
<p>First choose <img src="https://latex.codecogs.com/png.latex?k"> and initialize randomly chosen <img src="https://latex.codecogs.com/png.latex?k"> centroids at <img src="https://latex.codecogs.com/png.latex?t%20=%200">, the initial step.</p>
</section>
<section id="assignment" class="level4">
<h4 class="anchored" data-anchor-id="assignment">Assignment</h4>
<p>Assign each observation to the cluster with the nearest mean, in terms of Euclidean distance. Each set is thus:</p>
<p><img src="https://latex.codecogs.com/png.latex?S%5E%7B(t)%7D_i%20=%20%5Cbig%5C%7Bx_p%20:%20%7C%7Cx_p%20-%20m_i%5E%7B(t)%7D%7C%7C%5E2%20%5Cle%20%7C%7Cx_p%20-%20m_j%5E%7B(t)%7D%7C%7C%5E2%20%5Cforall%20j,%201%20%5Cle%20j%20%5Cle%20k%20%5Cbig%5C%7D"></p>
</section>
<section id="update" class="level4">
<h4 class="anchored" data-anchor-id="update">Update</h4>
<p>After assignment, update to find the new means for the next iteration, <img src="https://latex.codecogs.com/png.latex?t%20+%201">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20m_i%5E%7Bt%20+%201%7D%20=%20%5Cfrac%7B1%7D%7B%7CS_i%5E%7B(t)%7D%7C%7D%5Csum_%7Bx_j%20%5Cin%20S_i%5E%7B(t)%7D%7Dx_j"></p>
<p>The number of computations scales with the number of samples <img src="https://latex.codecogs.com/png.latex?n">, the number of centers <img src="https://latex.codecogs.com/png.latex?k">, the number of dimensions <img src="https://latex.codecogs.com/png.latex?d"> and the number of iterations <img src="https://latex.codecogs.com/png.latex?i">, for <img src="https://latex.codecogs.com/png.latex?O(nkdi)"></p>
</section>
</section>
<section id="creating-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="creating-the-dataset">Creating the Dataset</h3>
<div id="cell-79" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import statements</span></span>
<span id="cb38-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_blobs</span>
<span id="cb38-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb38-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb38-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb38-6">sns.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'notebook'</span>)</span>
<span id="cb38-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate and plot data with predetermined model and classes</span></span>
<span id="cb38-8">X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_blobs(n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, n_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, centers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb38-9">                  cluster_std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb38-10"></span>
<span id="cb38-11">plt.scatter(X[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], X[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'viridis'</span>)</span>
<span id="cb38-12">plt.xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb38-13">plt.ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb38-14">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-29-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-80" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb39-2">Y[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y</span>
<span id="cb39-3">Y</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>array([[2., 0.],
       [0., 0.],
       [3., 0.],
       [3., 0.],
       [1., 0.],
       [0., 0.],
       [2., 0.],
       [0., 0.],
       [0., 0.],
       [1., 0.],
       [1., 0.],
       [2., 0.],
       [1., 0.],
       [1., 0.],
       [1., 0.],
       [3., 0.],
       [2., 0.],
       [2., 0.],
       [1., 0.],
       [1., 0.],
       [1., 0.],
       [3., 0.],
       [2., 0.],
       [2., 0.],
       [2., 0.],
       [3., 0.],
       [2., 0.],
       [1., 0.],
       [3., 0.],
       [2., 0.],
       [2., 0.],
       [1., 0.],
       [1., 0.],
       [0., 0.],
       [0., 0.],
       [1., 0.],
       [1., 0.],
       [1., 0.],
       [3., 0.],
       [3., 0.],
       [2., 0.],
       [1., 0.],
       [3., 0.],
       [3., 0.],
       [0., 0.],
       [0., 0.],
       [2., 0.],
       [3., 0.],
       [3., 0.],
       [2., 0.],
       [0., 0.],
       [1., 0.],
       [3., 0.],
       [2., 0.],
       [3., 0.],
       [3., 0.],
       [0., 0.],
       [1., 0.],
       [1., 0.],
       [3., 0.],
       [0., 0.],
       [0., 0.],
       [2., 0.],
       [0., 0.],
       [0., 0.],
       [2., 0.],
       [0., 0.],
       [3., 0.],
       [2., 0.],
       [2., 0.],
       [0., 0.],
       [1., 0.],
       [2., 0.],
       [0., 0.],
       [3., 0.],
       [3., 0.],
       [1., 0.],
       [3., 0.],
       [3., 0.],
       [0., 0.],
       [1., 0.],
       [3., 0.],
       [1., 0.],
       [1., 0.],
       [1., 0.],
       [1., 0.],
       [2., 0.],
       [0., 0.],
       [2., 0.],
       [1., 0.],
       [0., 0.],
       [2., 0.],
       [0., 0.],
       [3., 0.],
       [3., 0.],
       [1., 0.],
       [0., 0.],
       [3., 0.],
       [0., 0.],
       [3., 0.],
       [1., 0.],
       [0., 0.],
       [3., 0.],
       [2., 0.],
       [3., 0.],
       [0., 0.],
       [3., 0.],
       [1., 0.],
       [1., 0.],
       [2., 0.],
       [0., 0.],
       [1., 0.],
       [2., 0.],
       [2., 0.],
       [1., 0.],
       [3., 0.],
       [2., 0.],
       [2., 0.],
       [3., 0.],
       [0., 0.],
       [2., 0.],
       [2., 0.],
       [2., 0.],
       [2., 0.],
       [0., 0.],
       [2., 0.],
       [2., 0.],
       [3., 0.],
       [2., 0.],
       [0., 0.],
       [1., 0.],
       [0., 0.],
       [0., 0.],
       [3., 0.],
       [2., 0.],
       [3., 0.],
       [0., 0.],
       [2., 0.],
       [2., 0.],
       [1., 0.],
       [2., 0.],
       [3., 0.],
       [2., 0.],
       [1., 0.],
       [1., 0.],
       [2., 0.],
       [0., 0.],
       [3., 0.],
       [0., 0.],
       [1., 0.],
       [2., 0.],
       [1., 0.],
       [3., 0.],
       [0., 0.],
       [0., 0.],
       [3., 0.],
       [2., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [3., 0.],
       [3., 0.],
       [1., 0.],
       [0., 0.],
       [1., 0.],
       [1., 0.],
       [1., 0.],
       [3., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [1., 0.],
       [3., 0.],
       [0., 0.],
       [2., 0.],
       [1., 0.],
       [0., 0.],
       [2., 0.],
       [3., 0.],
       [0., 0.],
       [3., 0.],
       [3., 0.],
       [2., 0.],
       [1., 0.],
       [0., 0.],
       [1., 0.],
       [2., 0.],
       [3., 0.],
       [0., 0.],
       [3., 0.],
       [3., 0.],
       [1., 0.],
       [3., 0.],
       [0., 0.],
       [2., 0.],
       [1., 0.],
       [3., 0.],
       [1., 0.],
       [2., 0.]])</code></pre>
</div>
</div>
<div id="cell-81" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.cluster <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> KMeans</span></code></pre></div>
</div>
<div id="cell-82" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">n_clusters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb42-2"></span>
<span id="cb42-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit and predict clusters</span></span>
<span id="cb42-4">kmeans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KMeans(n_clusters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_clusters)</span>
<span id="cb42-5">kmeans.fit(X)</span>
<span id="cb42-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(kmeans.cluster_centers_)</span>
<span id="cb42-7">y_km <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kmeans.fit_predict(X)</span>
<span id="cb42-8"></span>
<span id="cb42-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot predictions, one class at a time</span></span>
<span id="cb42-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cyan'</span>]):</span>
<span id="cb42-11">    plt.scatter(X[y_km <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>i,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], X[y_km <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> i,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>c)</span>
<span id="cb42-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[-5.56465793 -2.34988939]
 [-1.92101646  5.21673484]
 [ 0.05161133 -5.35489826]
 [-2.40167949 10.17352695]]</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-32-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="hierarchical-clustering" class="level2">
<h2 class="anchored" data-anchor-id="hierarchical-clustering">Hierarchical Clustering</h2>
<p><a href="https://scikit-learn.org/stable/modules/clustering.html#hierarchical-clustering">Hierarchical clustering</a> involves starting with treating each observation as a set, and then at the following step, creating a new cluster from the two “nearest” clusters, according to the defined distance metric. There are multiple ways the idea of a distance metric can extend to clusters. Some common choices include the average, closest members, or farthest nembers.</p>
<div id="cell-85" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import hierarchical clustering libraries</span></span>
<span id="cb44-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.cluster <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AgglomerativeClustering</span>
<span id="cb44-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb44-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb44-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.cluster.hierarchy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dendrogram, linkage, to_tree</span>
<span id="cb44-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext autoreload</span>
<span id="cb44-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>autoreload <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb44-8">sns.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb44-9">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>]]</span></code></pre></div>
</div>
<div id="cell-86" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> llf(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>):</span>
<span id="cb45-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>)</span></code></pre></div>
</div>
<div id="cell-87" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linkage(data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ward'</span>)</span>
<span id="cb46-2">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb46-3">dn_truncated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dendrogram(Z, orientation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, truncate_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lastp'</span>, leaf_label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>llf)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-35-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-88" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">dn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dendrogram(Z, orientation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, truncate_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, leaf_label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>llf)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-36-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-89" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">dn_truncated</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>{'icoord': [[5.0, 5.0, 15.0, 15.0],
  [25.0, 25.0, 35.0, 35.0],
  [10.0, 10.0, 30.0, 30.0]],
 'dcoord': [[0.0, 43.30127018922193, 43.30127018922193, 0.0],
  [0.0, 45.389321169086415, 45.389321169086415, 0.0],
  [43.30127018922193,
   154.2898015331631,
   154.2898015331631,
   45.389321169086415]],
 'ivl': ['9', '15', '0', '14'],
 'leaves': [9, 15, 0, 14],
 'color_list': ['C1', 'C2', 'C0'],
 'leaves_color_list': ['C1', 'C1', 'C2', 'C2'],
 'traversal': [18, 16, 9, 15, 17, 0, 14]}</code></pre>
</div>
</div>
<div id="cell-90" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">dn[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'icoord'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>[[15.0, 15.0, 25.0, 25.0],
 [5.0, 5.0, 20.0, 20.0],
 [55.0, 55.0, 65.0, 65.0],
 [85.0, 85.0, 95.0, 95.0],
 [75.0, 75.0, 90.0, 90.0],
 [60.0, 60.0, 82.5, 82.5],
 [45.0, 45.0, 71.25, 71.25],
 [35.0, 35.0, 58.125, 58.125],
 [12.5, 12.5, 46.5625, 46.5625]]</code></pre>
</div>
</div>
<div id="cell-91" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">dn[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dcoord'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>[[0.0, 25.0, 25.0, 0.0],
 [0.0, 43.30127018922193, 43.30127018922193, 25.0],
 [0.0, 1.0, 1.0, 0.0],
 [0.0, 1.0, 1.0, 0.0],
 [0.0, 1.7320508075688772, 1.7320508075688772, 1.0],
 [1.0, 5.422176684690383, 5.422176684690383, 1.7320508075688772],
 [0.0, 8.262364471909155, 8.262364471909155, 5.422176684690383],
 [0.0, 45.389321169086415, 45.389321169086415, 8.262364471909155],
 [43.30127018922193, 154.2898015331631, 154.2898015331631, 45.389321169086415]]</code></pre>
</div>
</div>
<div id="cell-92" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">dn_truncated[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'icoord'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>[[5.0, 5.0, 15.0, 15.0], [25.0, 25.0, 35.0, 35.0], [10.0, 10.0, 30.0, 30.0]]</code></pre>
</div>
</div>
<div id="cell-93" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">dn_truncated[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dcoord'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>[[0.0, 43.30127018922193, 43.30127018922193, 0.0],
 [0.0, 45.389321169086415, 45.389321169086415, 0.0],
 [43.30127018922193, 154.2898015331631, 154.2898015331631, 45.389321169086415]]</code></pre>
</div>
</div>
<div id="cell-94" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb58-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(dn[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'icoord'</span>][k], dn[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dcoord'</span>][k]):</span>
<span id="cb58-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(i)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(75.0, 0.0)
(75.0, 1.7320508075688772)
(90.0, 1.7320508075688772)
(90.0, 1.0)</code></pre>
</div>
</div>
<section id="linkage-matrix" class="level3">
<h3 class="anchored" data-anchor-id="linkage-matrix">Linkage Matrix</h3>
<p>Full documentation for <code>Scipy</code>’s implementation is found <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.linkage.html">here</a>. The original observations are treated as <img src="https://latex.codecogs.com/png.latex?n"> clusters. There are <img src="https://latex.codecogs.com/png.latex?n-1"> new clusters created beyond these total, with indices ranging from <img src="https://latex.codecogs.com/png.latex?n+1"> to <img src="https://latex.codecogs.com/png.latex?2n-1">, ordered by the inter-cluster distance. Each of thse new clusters is made from two other clusters. The <img src="https://latex.codecogs.com/png.latex?n-1%20%5Ctimes%204"> linkage matrix <img src="https://latex.codecogs.com/png.latex?Z"> encodes information about the new clusters in the following manner: Each row <img src="https://latex.codecogs.com/png.latex?i"> (keeping in mind zero indexing) describes the <img src="https://latex.codecogs.com/png.latex?(i+1)">th cluster by listing the indices of the two source clusters, the inter-cluster distance between these two clusters, and finally, the number of members of the new cluster.</p>
<div id="cell-97" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">Z</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>array([[  2.        ,   3.        ,   1.        ,   2.        ],
       [  1.        ,   4.        ,   1.        ,   2.        ],
       [  5.        ,  11.        ,   1.73205081,   3.        ],
       [ 10.        ,  12.        ,   5.42217668,   5.        ],
       [  6.        ,  13.        ,   8.26236447,   6.        ],
       [  7.        ,   8.        ,  25.        ,   2.        ],
       [  9.        ,  15.        ,  43.30127019,   3.        ],
       [  0.        ,  14.        ,  45.38932117,   7.        ],
       [ 16.        ,  17.        , 154.28980153,  10.        ]])</code></pre>
</div>
</div>
<div id="cell-98" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">plt.show()</span></code></pre></div>
</div>
</section>
<section id="converting-the-linkage-matrix-to-tree" class="level3">
<h3 class="anchored" data-anchor-id="converting-the-linkage-matrix-to-tree">Converting the Linkage Matrix to Tree</h3>
<div id="cell-101" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">to_tree(Z)</span>
<span id="cb63-2">rootnode, nodelist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_tree(Z, rd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb63-3">rootnode</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>&lt;__main__.ClusterNode at 0x29427b86370&gt;</code></pre>
</div>
</div>
<div id="cell-102" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">rootnode.get_right().pre_order()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>[0, 6, 2, 3, 5, 1, 4]</code></pre>
</div>
</div>
<div id="cell-103" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nodelist)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>19</code></pre>
</div>
</div>
<div id="cell-104" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">nodelist[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>].pre_order()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>[4]</code></pre>
</div>
</div>
</section>
<section id="visualization-with-plotly" class="level3">
<h3 class="anchored" data-anchor-id="visualization-with-plotly">Visualization with Plotly</h3>
<div id="cell-106" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span></code></pre></div>
</div>
<div id="cell-107" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">np.array(data)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>array([[-30],
       [  4],
       [  1],
       [  2],
       [  5],
       [  6],
       [ 10],
       [ 50],
       [ 75],
       [100]])</code></pre>
</div>
</div>
<div id="cell-108" class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data)</span></code></pre></div>
</div>
<div id="cell-109" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>5</code></pre>
</div>
</div>
<div id="cell-110" class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">traversal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dn_truncated[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'traversal'</span>]</span></code></pre></div>
</div>
<div id="cell-111" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1">traversal.reverse()</span></code></pre></div>
</div>
<div id="cell-112" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(traversal)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>7</code></pre>
</div>
</div>
<div id="cell-113" class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1">traversal[p:]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>[14]</code></pre>
</div>
</div>
<div id="cell-114" class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import plotly.figure_factory as ff</span></span>
<span id="cb83-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb83-3">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb83-4">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data)</span>
<span id="cb83-5">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb83-6">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_dendrogram(np.array(data), hovertext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>traversal[p:],</span>
<span id="cb83-7">                        labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data, orientation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>p, truncate_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lastp'</span>, leaf_label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>llf)</span>
<span id="cb83-8">fig.update_layout(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb83-9">fig.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>                            <div id="00788a1c-91a0-492d-80a0-bd276461ba85" class="plotly-graph-div" style="height:500px; width:800px;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("00788a1c-91a0-492d-80a0-bd276461ba85")) {                    Plotly.newPlot(                        "00788a1c-91a0-492d-80a0-bd276461ba85",                        [{"hoverinfo": "text", "marker": {"color": "rgb(61,153,112)"}, "mode": "lines", "text": "17", "type": "scatter", "x": [0.0, 40.0, 40.0, 0.0], "xaxis": "x", "y": [-5.0, -5.0, -15.0, -15.0], "yaxis": "y"}, {"hoverinfo": "text", "marker": {"color": "rgb(255,65,54)"}, "mode": "lines", "text": "0", "type": "scatter", "x": [0.0, 50.0, 50.0, 0.0], "xaxis": "x", "y": [-25.0, -25.0, -35.0, -35.0], "yaxis": "y"}, {"hoverinfo": "text", "marker": {"color": "rgb(0,116,217)"}, "mode": "lines", "text": "14", "type": "scatter", "x": [40.0, 130.0, 130.0, 50.0], "xaxis": "x", "y": [-10.0, -10.0, -30.0, -30.0], "yaxis": "y"}],                        {"autosize": false, "height": 500, "hovermode": "closest", "showlegend": false, "template": {"data": {"bar": [{"error_x": {"color": "#2a3f5f"}, "error_y": {"color": "#2a3f5f"}, "marker": {"line": {"color": "#E5ECF6", "width": 0.5}}, "type": "bar"}], "barpolar": [{"marker": {"line": {"color": "#E5ECF6", "width": 0.5}}, "type": "barpolar"}], "carpet": [{"aaxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "baxis": {"endlinecolor": "#2a3f5f", "gridcolor": "white", "linecolor": "white", "minorgridcolor": "white", "startlinecolor": "#2a3f5f"}, "type": "carpet"}], "choropleth": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "choropleth"}], "contour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "contour"}], "contourcarpet": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "contourcarpet"}], "heatmap": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmap"}], "heatmapgl": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "heatmapgl"}], "histogram": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "histogram"}], "histogram2d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2d"}], "histogram2dcontour": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "histogram2dcontour"}], "mesh3d": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "type": "mesh3d"}], "parcoords": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "parcoords"}], "pie": [{"automargin": true, "type": "pie"}], "scatter": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter"}], "scatter3d": [{"line": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatter3d"}], "scattercarpet": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattercarpet"}], "scattergeo": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergeo"}], "scattergl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattergl"}], "scattermapbox": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scattermapbox"}], "scatterpolar": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolar"}], "scatterpolargl": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterpolargl"}], "scatterternary": [{"marker": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "type": "scatterternary"}], "surface": [{"colorbar": {"outlinewidth": 0, "ticks": ""}, "colorscale": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "type": "surface"}], "table": [{"cells": {"fill": {"color": "#EBF0F8"}, "line": {"color": "white"}}, "header": {"fill": {"color": "#C8D4E3"}, "line": {"color": "white"}}, "type": "table"}]}, "layout": {"annotationdefaults": {"arrowcolor": "#2a3f5f", "arrowhead": 0, "arrowwidth": 1}, "autotypenumbers": "strict", "coloraxis": {"colorbar": {"outlinewidth": 0, "ticks": ""}}, "colorscale": {"diverging": [[0, "#8e0152"], [0.1, "#c51b7d"], [0.2, "#de77ae"], [0.3, "#f1b6da"], [0.4, "#fde0ef"], [0.5, "#f7f7f7"], [0.6, "#e6f5d0"], [0.7, "#b8e186"], [0.8, "#7fbc41"], [0.9, "#4d9221"], [1, "#276419"]], "sequential": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]], "sequentialminus": [[0.0, "#0d0887"], [0.1111111111111111, "#46039f"], [0.2222222222222222, "#7201a8"], [0.3333333333333333, "#9c179e"], [0.4444444444444444, "#bd3786"], [0.5555555555555556, "#d8576b"], [0.6666666666666666, "#ed7953"], [0.7777777777777778, "#fb9f3a"], [0.8888888888888888, "#fdca26"], [1.0, "#f0f921"]]}, "colorway": ["#636efa", "#EF553B", "#00cc96", "#ab63fa", "#FFA15A", "#19d3f3", "#FF6692", "#B6E880", "#FF97FF", "#FECB52"], "font": {"color": "#2a3f5f"}, "geo": {"bgcolor": "white", "lakecolor": "white", "landcolor": "#E5ECF6", "showlakes": true, "showland": true, "subunitcolor": "white"}, "hoverlabel": {"align": "left"}, "hovermode": "closest", "mapbox": {"style": "light"}, "paper_bgcolor": "white", "plot_bgcolor": "#E5ECF6", "polar": {"angularaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "radialaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "scene": {"xaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "yaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}, "zaxis": {"backgroundcolor": "#E5ECF6", "gridcolor": "white", "gridwidth": 2, "linecolor": "white", "showbackground": true, "ticks": "", "zerolinecolor": "white"}}, "shapedefaults": {"line": {"color": "#2a3f5f"}}, "ternary": {"aaxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "baxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}, "bgcolor": "#E5ECF6", "caxis": {"gridcolor": "white", "linecolor": "white", "ticks": ""}}, "title": {"x": 0.05}, "xaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}, "yaxis": {"automargin": true, "gridcolor": "white", "linecolor": "white", "ticks": "", "title": {"standoff": 15}, "zerolinecolor": "white", "zerolinewidth": 2}}}, "width": 800, "xaxis": {"mirror": "allticks", "rangemode": "tozero", "showgrid": false, "showline": true, "showticklabels": true, "ticks": "outside", "type": "linear", "zeroline": false}, "yaxis": {"mirror": "allticks", "rangemode": "tozero", "showgrid": false, "showline": true, "showticklabels": true, "tickmode": "array", "ticks": "outside", "ticktext": ["0", "14", "9", "15"], "tickvals": [-5.0, -15.0, -25.0, -35.0], "type": "linear", "zeroline": false}},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('00788a1c-91a0-492d-80a0-bd276461ba85');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>
<div id="cell-115" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">nodelist[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>].pre_order()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>[2, 3, 5, 1, 4]</code></pre>
</div>
</div>
<div id="cell-116" class="cell" data-scrolled="true" data-execution_count="135">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1">dn_truncated</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="135">
<pre><code>{'icoord': [[15.0, 15.0, 25.0, 25.0],
  [5.0, 5.0, 20.0, 20.0],
  [45.0, 45.0, 55.0, 55.0],
  [35.0, 35.0, 50.0, 50.0],
  [12.5, 12.5, 42.5, 42.5]],
 'dcoord': [[0.0, 25.0, 25.0, 0.0],
  [0.0, 43.30127018922193, 43.30127018922193, 25.0],
  [0.0, 8.262364471909155, 8.262364471909155, 0.0],
  [0.0, 45.389321169086415, 45.389321169086415, 8.262364471909155],
  [43.30127018922193,
   154.2898015331631,
   154.2898015331631,
   45.389321169086415]],
 'ivl': ['9', '7', '8', '0', '6', '13'],
 'leaves': [9, 7, 8, 0, 6, 13],
 'color_list': ['C1', 'C1', 'C2', 'C2', 'C0'],
 'leaves_color_list': ['C1', 'C1', 'C1', 'C2', 'C2', 'C2']}</code></pre>
</div>
</div>
<div id="cell-117" class="cell" data-execution_count="118">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1">Z</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="118">
<pre><code>array([[  2.        ,   3.        ,   1.        ,   2.        ],
       [  1.        ,   4.        ,   1.        ,   2.        ],
       [  5.        ,  11.        ,   1.73205081,   3.        ],
       [ 10.        ,  12.        ,   5.42217668,   5.        ],
       [  6.        ,  13.        ,   8.26236447,   6.        ],
       [  7.        ,   8.        ,  25.        ,   2.        ],
       [  9.        ,  15.        ,  43.30127019,   3.        ],
       [  0.        ,  14.        ,  45.38932117,   7.        ],
       [ 16.        ,  17.        , 154.28980153,  10.        ]])</code></pre>
</div>
</div>
<div id="cell-118" class="cell" data-scrolled="true" data-execution_count="43">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1">dn</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>{'icoord': [[15.0, 15.0, 25.0, 25.0],
  [5.0, 5.0, 20.0, 20.0],
  [55.0, 55.0, 65.0, 65.0],
  [85.0, 85.0, 95.0, 95.0],
  [75.0, 75.0, 90.0, 90.0],
  [60.0, 60.0, 82.5, 82.5],
  [45.0, 45.0, 71.25, 71.25],
  [35.0, 35.0, 58.125, 58.125],
  [12.5, 12.5, 46.5625, 46.5625]],
 'dcoord': [[0.0, 25.0, 25.0, 0.0],
  [0.0, 43.30127018922193, 43.30127018922193, 25.0],
  [0.0, 1.0, 1.0, 0.0],
  [0.0, 1.0, 1.0, 0.0],
  [0.0, 1.7320508075688772, 1.7320508075688772, 1.0],
  [1.0, 5.422176684690383, 5.422176684690383, 1.7320508075688772],
  [0.0, 8.262364471909155, 8.262364471909155, 5.422176684690383],
  [0.0, 45.389321169086415, 45.389321169086415, 8.262364471909155],
  [43.30127018922193,
   154.2898015331631,
   154.2898015331631,
   45.389321169086415]],
 'ivl': ['9', '7', '8', '0', '6', '2', '3', '5', '1', '4'],
 'leaves': [9, 7, 8, 0, 6, 2, 3, 5, 1, 4],
 'color_list': ['C1', 'C1', 'C2', 'C2', 'C2', 'C2', 'C2', 'C2', 'C0'],
 'leaves_color_list': ['C1',
  'C1',
  'C1',
  'C2',
  'C2',
  'C2',
  'C2',
  'C2',
  'C2',
  'C2'],
 'traversal': [18,
  16,
  9,
  15,
  7,
  8,
  17,
  0,
  14,
  6,
  13,
  10,
  2,
  3,
  12,
  5,
  11,
  1,
  4]}</code></pre>
</div>
</div>
<div id="cell-119" class="cell" data-execution_count="120">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1">dn_truncated</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="120">
<pre><code>{'icoord': [[15.0, 15.0, 25.0, 25.0],
  [5.0, 5.0, 20.0, 20.0],
  [45.0, 45.0, 55.0, 55.0],
  [35.0, 35.0, 50.0, 50.0],
  [12.5, 12.5, 42.5, 42.5]],
 'dcoord': [[0.0, 25.0, 25.0, 0.0],
  [0.0, 43.30127018922193, 43.30127018922193, 25.0],
  [0.0, 8.262364471909155, 8.262364471909155, 0.0],
  [0.0, 45.389321169086415, 45.389321169086415, 8.262364471909155],
  [43.30127018922193,
   154.2898015331631,
   154.2898015331631,
   45.389321169086415]],
 'ivl': ['9', '7', '8', '0', '6', '(5)'],
 'leaves': [9, 7, 8, 0, 6, 13],
 'color_list': ['C1', 'C1', 'C2', 'C2', 'C0'],
 'leaves_color_list': ['C1', 'C1', 'C1', 'C2', 'C2', 'C2']}</code></pre>
</div>
</div>
<div id="cell-120" class="cell" data-execution_count="115">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1">i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb94-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dn_truncated[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dcoord'</span>][i])</span>
<span id="cb94-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dn_truncated[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'icoord'</span>][i])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0.0, 25.0, 25.0, 0.0]
[15.0, 15.0, 25.0, 25.0]</code></pre>
</div>
</div>
<div id="cell-121" class="cell" data-execution_count="116">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1">dn_truncated[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dcoord'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="116">
<pre><code>[[0.0, 25.0, 25.0, 0.0],
 [0.0, 43.30127018922193, 43.30127018922193, 25.0],
 [0.0, 8.262364471909155, 8.262364471909155, 0.0],
 [0.0, 45.389321169086415, 45.389321169086415, 8.262364471909155],
 [43.30127018922193, 154.2898015331631, 154.2898015331631, 45.389321169086415]]</code></pre>
</div>
</div>
<div id="cell-122" class="cell" data-execution_count="117">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1">dn_truncated[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'icoord'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="117">
<pre><code>[[15.0, 15.0, 25.0, 25.0],
 [5.0, 5.0, 20.0, 20.0],
 [45.0, 45.0, 55.0, 55.0],
 [35.0, 35.0, 50.0, 50.0],
 [12.5, 12.5, 42.5, 42.5]]</code></pre>
</div>
</div>
<div id="cell-123" class="cell" data-execution_count="99">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1">nodelist[].pre_order()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="99">
<pre><code>[4]</code></pre>
</div>
</div>
<div id="cell-124" class="cell">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1">nodelist[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span></code></pre></div>
</div>
<div id="cell-125" class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1">data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="53">
<pre><code>[1]</code></pre>
</div>
</div>
<div id="cell-126" class="cell">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#from plotly.figure_factory import create_dendrogram</span></span>
<span id="cb105-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb105-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb105-4">Index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'E'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'G'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'H'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'I'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'J'</span>]</span>
<span id="cb105-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(np.random.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)), index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Index)</span>
<span id="cb105-6">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_dendrogram(df, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Index, orientation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>, hovertext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)))</span>
<span id="cb105-7">fig.show()</span></code></pre></div>
</div>
</section>
</section>
<section id="implementing-cluster-order-in-scipy" class="level2">
<h2 class="anchored" data-anchor-id="implementing-cluster-order-in-scipy">Implementing Cluster Order in Scipy</h2>
<section id="modification-of-_dendrogram_calculate_info-function" class="level3">
<h3 class="anchored" data-anchor-id="modification-of-_dendrogram_calculate_info-function">Modification of <code>_dendrogram_calculate_info</code> function</h3>
<ul>
<li><code>_dendrogram_calculate_info</code> now has a list to track the cluster indices during construction of the dendrogram</li>
</ul>
<div id="cell-130" class="cell" data-code_folding="[127,131,135,147,158,178,240,306,371,438,517,596,674,883,947,955,960,977,983,994,1004,1064,1090,1167,1256,1315,1323,1331,1449,1517,1521,1531,1535,1578,1585,1589,1598,1673,1746,1858,1968,1976,1987,1997,2027,2072,2231,2315,2376,2390,2396,2402,2541,2926,2941,2967,2985,2990,3224,3306,3377,3457,3544]" hidden="true" data-execution_count="45">
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb106-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Hierarchical clustering (:mod:`scipy.cluster.hierarchy`)</span></span>
<span id="cb106-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">========================================================</span></span>
<span id="cb106-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.. currentmodule:: scipy.cluster.hierarchy</span></span>
<span id="cb106-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">These functions cut hierarchical clusterings into flat clusterings</span></span>
<span id="cb106-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">or find the roots of the forest formed by a cut by providing the flat</span></span>
<span id="cb106-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">cluster ids of each observation.</span></span>
<span id="cb106-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.. autosummary::</span></span>
<span id="cb106-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   :toctree: generated/</span></span>
<span id="cb106-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   fcluster</span></span>
<span id="cb106-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   fclusterdata</span></span>
<span id="cb106-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   leaders</span></span>
<span id="cb106-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">These are routines for agglomerative clustering.</span></span>
<span id="cb106-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.. autosummary::</span></span>
<span id="cb106-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   :toctree: generated/</span></span>
<span id="cb106-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   linkage</span></span>
<span id="cb106-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   single</span></span>
<span id="cb106-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   complete</span></span>
<span id="cb106-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   average</span></span>
<span id="cb106-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   weighted</span></span>
<span id="cb106-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   centroid</span></span>
<span id="cb106-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   median</span></span>
<span id="cb106-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   ward</span></span>
<span id="cb106-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">These routines compute statistics on hierarchies.</span></span>
<span id="cb106-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.. autosummary::</span></span>
<span id="cb106-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   :toctree: generated/</span></span>
<span id="cb106-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   cophenet</span></span>
<span id="cb106-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   from_mlab_linkage</span></span>
<span id="cb106-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   inconsistent</span></span>
<span id="cb106-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   maxinconsts</span></span>
<span id="cb106-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   maxdists</span></span>
<span id="cb106-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   maxRstat</span></span>
<span id="cb106-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   to_mlab_linkage</span></span>
<span id="cb106-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Routines for visualizing flat clusters.</span></span>
<span id="cb106-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.. autosummary::</span></span>
<span id="cb106-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   :toctree: generated/</span></span>
<span id="cb106-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   dendrogram</span></span>
<span id="cb106-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">These are data structures and routines for representing hierarchies as</span></span>
<span id="cb106-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">tree objects.</span></span>
<span id="cb106-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.. autosummary::</span></span>
<span id="cb106-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   :toctree: generated/</span></span>
<span id="cb106-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   ClusterNode</span></span>
<span id="cb106-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   leaves_list</span></span>
<span id="cb106-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   to_tree</span></span>
<span id="cb106-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   cut_tree</span></span>
<span id="cb106-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   optimal_leaf_ordering</span></span>
<span id="cb106-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">These are predicates for checking the validity of linkage and</span></span>
<span id="cb106-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">inconsistency matrices as well as for checking isomorphism of two</span></span>
<span id="cb106-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">flat cluster assignments.</span></span>
<span id="cb106-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.. autosummary::</span></span>
<span id="cb106-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   :toctree: generated/</span></span>
<span id="cb106-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   is_valid_im</span></span>
<span id="cb106-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   is_valid_linkage</span></span>
<span id="cb106-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   is_isomorphic</span></span>
<span id="cb106-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   is_monotonic</span></span>
<span id="cb106-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   correspond</span></span>
<span id="cb106-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   num_obs_linkage</span></span>
<span id="cb106-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Utility routines for plotting:</span></span>
<span id="cb106-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.. autosummary::</span></span>
<span id="cb106-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   :toctree: generated/</span></span>
<span id="cb106-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   set_link_color_palette</span></span>
<span id="cb106-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Utility classes:</span></span>
<span id="cb106-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.. autosummary::</span></span>
<span id="cb106-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   :toctree: generated/</span></span>
<span id="cb106-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   DisjointSet -- data structure for incremental connectivity queries</span></span>
<span id="cb106-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copyright (C) Damian Eads, 2007-2008. New BSD License.</span></span>
<span id="cb106-68"></span>
<span id="cb106-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hierarchy.py (derived from cluster.py, http://scipy-cluster.googlecode.com)</span></span>
<span id="cb106-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb106-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Author: Damian Eads</span></span>
<span id="cb106-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Date:   September 22, 2007</span></span>
<span id="cb106-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb106-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copyright (c) 2007, 2008, Damian Eads</span></span>
<span id="cb106-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb106-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All rights reserved.</span></span>
<span id="cb106-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb106-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Redistribution and use in source and binary forms, with or without</span></span>
<span id="cb106-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># modification, are permitted provided that the following conditions</span></span>
<span id="cb106-80"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># are met:</span></span>
<span id="cb106-81"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   - Redistributions of source code must retain the above</span></span>
<span id="cb106-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     copyright notice, this list of conditions and the</span></span>
<span id="cb106-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     following disclaimer.</span></span>
<span id="cb106-84"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   - Redistributions in binary form must reproduce the above copyright</span></span>
<span id="cb106-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     notice, this list of conditions and the following disclaimer</span></span>
<span id="cb106-86"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     in the documentation and/or other materials provided with the</span></span>
<span id="cb106-87"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     distribution.</span></span>
<span id="cb106-88"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   - Neither the name of the author nor the names of its</span></span>
<span id="cb106-89"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     contributors may be used to endorse or promote products derived</span></span>
<span id="cb106-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     from this software without specific prior written permission.</span></span>
<span id="cb106-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb106-92"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></span>
<span id="cb106-93"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></span>
<span id="cb106-94"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></span>
<span id="cb106-95"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span></span>
<span id="cb106-96"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span></span>
<span id="cb106-97"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span></span>
<span id="cb106-98"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></span>
<span id="cb106-99"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></span>
<span id="cb106-100"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></span>
<span id="cb106-101"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></span>
<span id="cb106-102"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></span>
<span id="cb106-103"></span>
<span id="cb106-104"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb106-105"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> bisect</span>
<span id="cb106-106"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> deque</span>
<span id="cb106-107"></span>
<span id="cb106-108"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb106-109"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.cluster <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> _hierarchy, _optimal_leaf_ordering</span>
<span id="cb106-110"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy.spatial.distance <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> distance</span>
<span id="cb106-111"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy._lib._disjoint_set <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DisjointSet</span>
<span id="cb106-112"></span>
<span id="cb106-113"></span>
<span id="cb106-114">_LINKAGE_METHODS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'single'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'complete'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'average'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'centroid'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb106-115">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'median'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ward'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weighted'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>}</span>
<span id="cb106-116">_EUCLIDEAN_METHODS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'centroid'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'median'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ward'</span>)</span>
<span id="cb106-117"></span>
<span id="cb106-118">__all__ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ClusterNode'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DisjointSet'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'average'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'centroid'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'complete'</span>,</span>
<span id="cb106-119">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cophenet'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'correspond'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cut_tree'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dendrogram'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fcluster'</span>,</span>
<span id="cb106-120">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fclusterdata'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'from_mlab_linkage'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inconsistent'</span>,</span>
<span id="cb106-121">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_isomorphic'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_monotonic'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_valid_im'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_valid_linkage'</span>,</span>
<span id="cb106-122">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'leaders'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'leaves_list'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'linkage'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'maxRstat'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'maxdists'</span>,</span>
<span id="cb106-123">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'maxinconsts'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'median'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_obs_linkage'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'optimal_leaf_ordering'</span>,</span>
<span id="cb106-124">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'set_link_color_palette'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'single'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'to_mlab_linkage'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'to_tree'</span>,</span>
<span id="cb106-125">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ward'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weighted'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>]</span>
<span id="cb106-126"></span>
<span id="cb106-127"></span>
<span id="cb106-128"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ClusterWarning(<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">UserWarning</span>):</span>
<span id="cb106-129">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb106-130"></span>
<span id="cb106-131"></span>
<span id="cb106-132"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _warning(s):</span>
<span id="cb106-133">    warnings.warn(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scipy.cluster: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> s, ClusterWarning, stacklevel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb106-134"></span>
<span id="cb106-135"></span>
<span id="cb106-136"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _copy_array_if_base_present(a):</span>
<span id="cb106-137">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-138"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Copy the array if its base points to a parent array.</span></span>
<span id="cb106-139"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-140">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> a.base <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-141">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a.copy()</span>
<span id="cb106-142">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> np.issubsctype(a, np.float32):</span>
<span id="cb106-143">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.array(a, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.double)</span>
<span id="cb106-144">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-145">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a</span>
<span id="cb106-146"></span>
<span id="cb106-147"></span>
<span id="cb106-148"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _copy_arrays_if_base_present(T):</span>
<span id="cb106-149">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-150"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Accept a tuple of arrays T. Copies the array T[i] if its base array</span></span>
<span id="cb106-151"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    points to an actual array. Otherwise, the reference is just copied.</span></span>
<span id="cb106-152"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This is useful if the arrays are being passed to a C function that</span></span>
<span id="cb106-153"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    does not do proper striding.</span></span>
<span id="cb106-154"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-155">    l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [_copy_array_if_base_present(a) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> T]</span>
<span id="cb106-156">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> l</span>
<span id="cb106-157"></span>
<span id="cb106-158"></span>
<span id="cb106-159"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _randdm(pnts):</span>
<span id="cb106-160">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-161"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Generate a random distance matrix stored in condensed form.</span></span>
<span id="cb106-162"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-163"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-164"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    pnts : int</span></span>
<span id="cb106-165"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The number of points in the distance matrix. Has to be at least 2.</span></span>
<span id="cb106-166"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-167"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-168"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    D : ndarray</span></span>
<span id="cb106-169"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A ``pnts * (pnts - 1) / 2`` sized vector is returned.</span></span>
<span id="cb106-170"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-171">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pnts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb106-172">        D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand(pnts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (pnts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb106-173">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-174">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The number of points in the distance matrix "</span></span>
<span id="cb106-175">                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"must be at least 2."</span>)</span>
<span id="cb106-176">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> D</span>
<span id="cb106-177"></span>
<span id="cb106-178"></span>
<span id="cb106-179"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> single(y):</span>
<span id="cb106-180">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-181"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Perform single/min/nearest linkage on the condensed distance matrix ``y``.</span></span>
<span id="cb106-182"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-183"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-184"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    y : ndarray</span></span>
<span id="cb106-185"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The upper triangular of the distance matrix. The result of</span></span>
<span id="cb106-186"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``pdist`` is returned in this form.</span></span>
<span id="cb106-187"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-188"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-189"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-190"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The linkage matrix.</span></span>
<span id="cb106-191"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-192"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-193"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage: for advanced creation of hierarchical clusterings.</span></span>
<span id="cb106-194"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    scipy.spatial.distance.pdist : pairwise distance metrics</span></span>
<span id="cb106-195"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-196"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-197"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import single, fcluster</span></span>
<span id="cb106-198"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-199"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    First, we need a toy dataset to play with::</span></span>
<span id="cb106-200"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x x    x x</span></span>
<span id="cb106-201"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x        x</span></span>
<span id="cb106-202"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x        x</span></span>
<span id="cb106-203"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x x    x x</span></span>
<span id="cb106-204"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-205"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-206"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-207"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-208"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Then, we get a condensed distance matrix from this dataset:</span></span>
<span id="cb106-209"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; y = pdist(X)</span></span>
<span id="cb106-210"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Finally, we can perform the clustering:</span></span>
<span id="cb106-211"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = single(y)</span></span>
<span id="cb106-212"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z</span></span>
<span id="cb106-213"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[ 0.,  1.,  1.,  2.],</span></span>
<span id="cb106-214"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 2., 12.,  1.,  3.],</span></span>
<span id="cb106-215"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 3.,  4.,  1.,  2.],</span></span>
<span id="cb106-216"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 5., 14.,  1.,  3.],</span></span>
<span id="cb106-217"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 6.,  7.,  1.,  2.],</span></span>
<span id="cb106-218"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 8., 16.,  1.,  3.],</span></span>
<span id="cb106-219"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 9., 10.,  1.,  2.],</span></span>
<span id="cb106-220"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [11., 18.,  1.,  3.],</span></span>
<span id="cb106-221"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [13., 15.,  2.,  6.],</span></span>
<span id="cb106-222"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [17., 20.,  2.,  9.],</span></span>
<span id="cb106-223"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [19., 21.,  2., 12.]])</span></span>
<span id="cb106-224"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The linkage matrix ``Z`` represents a dendrogram - see</span></span>
<span id="cb106-225"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `scipy.cluster.hierarchy.linkage` for a detailed explanation of its</span></span>
<span id="cb106-226"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    contents.</span></span>
<span id="cb106-227"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    We can use `scipy.cluster.hierarchy.fcluster` to see to which cluster</span></span>
<span id="cb106-228"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    each initial point would belong given a distance threshold:</span></span>
<span id="cb106-229"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 0.9, criterion='distance')</span></span>
<span id="cb106-230"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([ 7,  8,  9, 10, 11, 12,  4,  5,  6,  1,  2,  3], dtype=int32)</span></span>
<span id="cb106-231"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 1, criterion='distance')</span></span>
<span id="cb106-232"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([3, 3, 3, 4, 4, 4, 2, 2, 2, 1, 1, 1], dtype=int32)</span></span>
<span id="cb106-233"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 2, criterion='distance')</span></span>
<span id="cb106-234"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)</span></span>
<span id="cb106-235"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Also, `scipy.cluster.hierarchy.dendrogram` can be used to generate a</span></span>
<span id="cb106-236"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    plot of the dendrogram.</span></span>
<span id="cb106-237"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-238">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> linkage(y, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'single'</span>, metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'euclidean'</span>)</span>
<span id="cb106-239"></span>
<span id="cb106-240"></span>
<span id="cb106-241"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> complete(y):</span>
<span id="cb106-242">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-243"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Perform complete/max/farthest point linkage on a condensed distance matrix.</span></span>
<span id="cb106-244"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-245"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-246"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    y : ndarray</span></span>
<span id="cb106-247"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The upper triangular of the distance matrix. The result of</span></span>
<span id="cb106-248"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``pdist`` is returned in this form.</span></span>
<span id="cb106-249"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-250"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-251"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-252"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A linkage matrix containing the hierarchical clustering. See</span></span>
<span id="cb106-253"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        the `linkage` function documentation for more information</span></span>
<span id="cb106-254"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        on its structure.</span></span>
<span id="cb106-255"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-256"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-257"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage: for advanced creation of hierarchical clusterings.</span></span>
<span id="cb106-258"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    scipy.spatial.distance.pdist : pairwise distance metrics</span></span>
<span id="cb106-259"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-260"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-261"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import complete, fcluster</span></span>
<span id="cb106-262"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-263"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    First, we need a toy dataset to play with::</span></span>
<span id="cb106-264"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x x    x x</span></span>
<span id="cb106-265"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x        x</span></span>
<span id="cb106-266"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x        x</span></span>
<span id="cb106-267"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x x    x x</span></span>
<span id="cb106-268"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-269"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-270"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-271"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-272"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Then, we get a condensed distance matrix from this dataset:</span></span>
<span id="cb106-273"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; y = pdist(X)</span></span>
<span id="cb106-274"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Finally, we can perform the clustering:</span></span>
<span id="cb106-275"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = complete(y)</span></span>
<span id="cb106-276"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z</span></span>
<span id="cb106-277"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[ 0.        ,  1.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-278"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 3.        ,  4.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-279"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 6.        ,  7.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-280"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 9.        , 10.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-281"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 2.        , 12.        ,  1.41421356,  3.        ],</span></span>
<span id="cb106-282"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 5.        , 13.        ,  1.41421356,  3.        ],</span></span>
<span id="cb106-283"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 8.        , 14.        ,  1.41421356,  3.        ],</span></span>
<span id="cb106-284"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [11.        , 15.        ,  1.41421356,  3.        ],</span></span>
<span id="cb106-285"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [16.        , 17.        ,  4.12310563,  6.        ],</span></span>
<span id="cb106-286"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [18.        , 19.        ,  4.12310563,  6.        ],</span></span>
<span id="cb106-287"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [20.        , 21.        ,  5.65685425, 12.        ]])</span></span>
<span id="cb106-288"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The linkage matrix ``Z`` represents a dendrogram - see</span></span>
<span id="cb106-289"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `scipy.cluster.hierarchy.linkage` for a detailed explanation of its</span></span>
<span id="cb106-290"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    contents.</span></span>
<span id="cb106-291"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    We can use `scipy.cluster.hierarchy.fcluster` to see to which cluster</span></span>
<span id="cb106-292"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    each initial point would belong given a distance threshold:</span></span>
<span id="cb106-293"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 0.9, criterion='distance')</span></span>
<span id="cb106-294"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12], dtype=int32)</span></span>
<span id="cb106-295"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 1.5, criterion='distance')</span></span>
<span id="cb106-296"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4], dtype=int32)</span></span>
<span id="cb106-297"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 4.5, criterion='distance')</span></span>
<span id="cb106-298"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], dtype=int32)</span></span>
<span id="cb106-299"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 6, criterion='distance')</span></span>
<span id="cb106-300"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)</span></span>
<span id="cb106-301"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Also, `scipy.cluster.hierarchy.dendrogram` can be used to generate a</span></span>
<span id="cb106-302"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    plot of the dendrogram.</span></span>
<span id="cb106-303"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-304">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> linkage(y, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'complete'</span>, metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'euclidean'</span>)</span>
<span id="cb106-305"></span>
<span id="cb106-306"></span>
<span id="cb106-307"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> average(y):</span>
<span id="cb106-308">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-309"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Perform average/UPGMA linkage on a condensed distance matrix.</span></span>
<span id="cb106-310"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-311"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-312"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    y : ndarray</span></span>
<span id="cb106-313"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The upper triangular of the distance matrix. The result of</span></span>
<span id="cb106-314"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``pdist`` is returned in this form.</span></span>
<span id="cb106-315"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-316"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-317"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-318"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A linkage matrix containing the hierarchical clustering. See</span></span>
<span id="cb106-319"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        `linkage` for more information on its structure.</span></span>
<span id="cb106-320"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-321"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-322"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage: for advanced creation of hierarchical clusterings.</span></span>
<span id="cb106-323"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    scipy.spatial.distance.pdist : pairwise distance metrics</span></span>
<span id="cb106-324"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-325"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-326"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import average, fcluster</span></span>
<span id="cb106-327"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-328"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    First, we need a toy dataset to play with::</span></span>
<span id="cb106-329"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x x    x x</span></span>
<span id="cb106-330"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x        x</span></span>
<span id="cb106-331"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x        x</span></span>
<span id="cb106-332"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x x    x x</span></span>
<span id="cb106-333"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-334"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-335"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-336"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-337"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Then, we get a condensed distance matrix from this dataset:</span></span>
<span id="cb106-338"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; y = pdist(X)</span></span>
<span id="cb106-339"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Finally, we can perform the clustering:</span></span>
<span id="cb106-340"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = average(y)</span></span>
<span id="cb106-341"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z</span></span>
<span id="cb106-342"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[ 0.        ,  1.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-343"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 3.        ,  4.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-344"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 6.        ,  7.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-345"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 9.        , 10.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-346"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 2.        , 12.        ,  1.20710678,  3.        ],</span></span>
<span id="cb106-347"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 5.        , 13.        ,  1.20710678,  3.        ],</span></span>
<span id="cb106-348"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 8.        , 14.        ,  1.20710678,  3.        ],</span></span>
<span id="cb106-349"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [11.        , 15.        ,  1.20710678,  3.        ],</span></span>
<span id="cb106-350"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [16.        , 17.        ,  3.39675184,  6.        ],</span></span>
<span id="cb106-351"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [18.        , 19.        ,  3.39675184,  6.        ],</span></span>
<span id="cb106-352"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [20.        , 21.        ,  4.09206523, 12.        ]])</span></span>
<span id="cb106-353"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The linkage matrix ``Z`` represents a dendrogram - see</span></span>
<span id="cb106-354"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `scipy.cluster.hierarchy.linkage` for a detailed explanation of its</span></span>
<span id="cb106-355"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    contents.</span></span>
<span id="cb106-356"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    We can use `scipy.cluster.hierarchy.fcluster` to see to which cluster</span></span>
<span id="cb106-357"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    each initial point would belong given a distance threshold:</span></span>
<span id="cb106-358"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 0.9, criterion='distance')</span></span>
<span id="cb106-359"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12], dtype=int32)</span></span>
<span id="cb106-360"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 1.5, criterion='distance')</span></span>
<span id="cb106-361"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4], dtype=int32)</span></span>
<span id="cb106-362"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 4, criterion='distance')</span></span>
<span id="cb106-363"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], dtype=int32)</span></span>
<span id="cb106-364"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 6, criterion='distance')</span></span>
<span id="cb106-365"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)</span></span>
<span id="cb106-366"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Also, `scipy.cluster.hierarchy.dendrogram` can be used to generate a</span></span>
<span id="cb106-367"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    plot of the dendrogram.</span></span>
<span id="cb106-368"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-369">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> linkage(y, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'average'</span>, metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'euclidean'</span>)</span>
<span id="cb106-370"></span>
<span id="cb106-371"></span>
<span id="cb106-372"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> weighted(y):</span>
<span id="cb106-373">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-374"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Perform weighted/WPGMA linkage on the condensed distance matrix.</span></span>
<span id="cb106-375"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See `linkage` for more information on the return</span></span>
<span id="cb106-376"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    structure and algorithm.</span></span>
<span id="cb106-377"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-378"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-379"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    y : ndarray</span></span>
<span id="cb106-380"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The upper triangular of the distance matrix. The result of</span></span>
<span id="cb106-381"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``pdist`` is returned in this form.</span></span>
<span id="cb106-382"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-383"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-384"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-385"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A linkage matrix containing the hierarchical clustering. See</span></span>
<span id="cb106-386"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        `linkage` for more information on its structure.</span></span>
<span id="cb106-387"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-388"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-389"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage : for advanced creation of hierarchical clusterings.</span></span>
<span id="cb106-390"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    scipy.spatial.distance.pdist : pairwise distance metrics</span></span>
<span id="cb106-391"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-392"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-393"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import weighted, fcluster</span></span>
<span id="cb106-394"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-395"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    First, we need a toy dataset to play with::</span></span>
<span id="cb106-396"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x x    x x</span></span>
<span id="cb106-397"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x        x</span></span>
<span id="cb106-398"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x        x</span></span>
<span id="cb106-399"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x x    x x</span></span>
<span id="cb106-400"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-401"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-402"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-403"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-404"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Then, we get a condensed distance matrix from this dataset:</span></span>
<span id="cb106-405"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; y = pdist(X)</span></span>
<span id="cb106-406"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Finally, we can perform the clustering:</span></span>
<span id="cb106-407"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = weighted(y)</span></span>
<span id="cb106-408"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z</span></span>
<span id="cb106-409"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[ 0.        ,  1.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-410"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 6.        ,  7.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-411"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 3.        ,  4.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-412"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 9.        , 11.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-413"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 2.        , 12.        ,  1.20710678,  3.        ],</span></span>
<span id="cb106-414"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 8.        , 13.        ,  1.20710678,  3.        ],</span></span>
<span id="cb106-415"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 5.        , 14.        ,  1.20710678,  3.        ],</span></span>
<span id="cb106-416"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [10.        , 15.        ,  1.20710678,  3.        ],</span></span>
<span id="cb106-417"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [18.        , 19.        ,  3.05595762,  6.        ],</span></span>
<span id="cb106-418"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [16.        , 17.        ,  3.32379407,  6.        ],</span></span>
<span id="cb106-419"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [20.        , 21.        ,  4.06357713, 12.        ]])</span></span>
<span id="cb106-420"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The linkage matrix ``Z`` represents a dendrogram - see</span></span>
<span id="cb106-421"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `scipy.cluster.hierarchy.linkage` for a detailed explanation of its</span></span>
<span id="cb106-422"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    contents.</span></span>
<span id="cb106-423"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    We can use `scipy.cluster.hierarchy.fcluster` to see to which cluster</span></span>
<span id="cb106-424"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    each initial point would belong given a distance threshold:</span></span>
<span id="cb106-425"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 0.9, criterion='distance')</span></span>
<span id="cb106-426"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([ 7,  8,  9,  1,  2,  3, 10, 11, 12,  4,  6,  5], dtype=int32)</span></span>
<span id="cb106-427"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 1.5, criterion='distance')</span></span>
<span id="cb106-428"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([3, 3, 3, 1, 1, 1, 4, 4, 4, 2, 2, 2], dtype=int32)</span></span>
<span id="cb106-429"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 4, criterion='distance')</span></span>
<span id="cb106-430"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1], dtype=int32)</span></span>
<span id="cb106-431"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 6, criterion='distance')</span></span>
<span id="cb106-432"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)</span></span>
<span id="cb106-433"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Also, `scipy.cluster.hierarchy.dendrogram` can be used to generate a</span></span>
<span id="cb106-434"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    plot of the dendrogram.</span></span>
<span id="cb106-435"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-436">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> linkage(y, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weighted'</span>, metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'euclidean'</span>)</span>
<span id="cb106-437"></span>
<span id="cb106-438"></span>
<span id="cb106-439"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> centroid(y):</span>
<span id="cb106-440">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-441"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Perform centroid/UPGMC linkage.</span></span>
<span id="cb106-442"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See `linkage` for more information on the input matrix,</span></span>
<span id="cb106-443"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    return structure, and algorithm.</span></span>
<span id="cb106-444"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The following are common calling conventions:</span></span>
<span id="cb106-445"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    1. ``Z = centroid(y)``</span></span>
<span id="cb106-446"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       Performs centroid/UPGMC linkage on the condensed distance</span></span>
<span id="cb106-447"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       matrix ``y``.</span></span>
<span id="cb106-448"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    2. ``Z = centroid(X)``</span></span>
<span id="cb106-449"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       Performs centroid/UPGMC linkage on the observation matrix ``X``</span></span>
<span id="cb106-450"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       using Euclidean distance as the distance metric.</span></span>
<span id="cb106-451"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-452"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-453"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    y : ndarray</span></span>
<span id="cb106-454"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A condensed distance matrix. A condensed</span></span>
<span id="cb106-455"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        distance matrix is a flat array containing the upper</span></span>
<span id="cb106-456"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        triangular of the distance matrix. This is the form that</span></span>
<span id="cb106-457"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``pdist`` returns. Alternatively, a collection of</span></span>
<span id="cb106-458"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        m observation vectors in n dimensions may be passed as</span></span>
<span id="cb106-459"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        an m by n array.</span></span>
<span id="cb106-460"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-461"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-462"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-463"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A linkage matrix containing the hierarchical clustering. See</span></span>
<span id="cb106-464"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        the `linkage` function documentation for more information</span></span>
<span id="cb106-465"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        on its structure.</span></span>
<span id="cb106-466"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-467"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-468"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage: for advanced creation of hierarchical clusterings.</span></span>
<span id="cb106-469"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    scipy.spatial.distance.pdist : pairwise distance metrics</span></span>
<span id="cb106-470"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-471"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-472"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import centroid, fcluster</span></span>
<span id="cb106-473"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-474"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    First, we need a toy dataset to play with::</span></span>
<span id="cb106-475"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x x    x x</span></span>
<span id="cb106-476"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x        x</span></span>
<span id="cb106-477"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x        x</span></span>
<span id="cb106-478"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x x    x x</span></span>
<span id="cb106-479"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-480"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-481"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-482"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-483"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Then, we get a condensed distance matrix from this dataset:</span></span>
<span id="cb106-484"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; y = pdist(X)</span></span>
<span id="cb106-485"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Finally, we can perform the clustering:</span></span>
<span id="cb106-486"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = centroid(y)</span></span>
<span id="cb106-487"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z</span></span>
<span id="cb106-488"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[ 0.        ,  1.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-489"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 3.        ,  4.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-490"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 9.        , 10.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-491"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 6.        ,  7.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-492"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 2.        , 12.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-493"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 5.        , 13.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-494"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 8.        , 15.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-495"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [11.        , 14.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-496"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [18.        , 19.        ,  3.33333333,  6.        ],</span></span>
<span id="cb106-497"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [16.        , 17.        ,  3.33333333,  6.        ],</span></span>
<span id="cb106-498"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [20.        , 21.        ,  3.33333333, 12.        ]])</span></span>
<span id="cb106-499"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The linkage matrix ``Z`` represents a dendrogram - see</span></span>
<span id="cb106-500"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `scipy.cluster.hierarchy.linkage` for a detailed explanation of its</span></span>
<span id="cb106-501"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    contents.</span></span>
<span id="cb106-502"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    We can use `scipy.cluster.hierarchy.fcluster` to see to which cluster</span></span>
<span id="cb106-503"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    each initial point would belong given a distance threshold:</span></span>
<span id="cb106-504"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 0.9, criterion='distance')</span></span>
<span id="cb106-505"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([ 7,  8,  9, 10, 11, 12,  1,  2,  3,  4,  5,  6], dtype=int32)</span></span>
<span id="cb106-506"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 1.1, criterion='distance')</span></span>
<span id="cb106-507"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([5, 5, 6, 7, 7, 8, 1, 1, 2, 3, 3, 4], dtype=int32)</span></span>
<span id="cb106-508"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 2, criterion='distance')</span></span>
<span id="cb106-509"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([3, 3, 3, 4, 4, 4, 1, 1, 1, 2, 2, 2], dtype=int32)</span></span>
<span id="cb106-510"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 4, criterion='distance')</span></span>
<span id="cb106-511"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)</span></span>
<span id="cb106-512"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Also, `scipy.cluster.hierarchy.dendrogram` can be used to generate a</span></span>
<span id="cb106-513"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    plot of the dendrogram.</span></span>
<span id="cb106-514"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-515">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> linkage(y, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'centroid'</span>, metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'euclidean'</span>)</span>
<span id="cb106-516"></span>
<span id="cb106-517"></span>
<span id="cb106-518"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> median(y):</span>
<span id="cb106-519">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-520"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Perform median/WPGMC linkage.</span></span>
<span id="cb106-521"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See `linkage` for more information on the return structure</span></span>
<span id="cb106-522"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    and algorithm.</span></span>
<span id="cb106-523"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     The following are common calling conventions:</span></span>
<span id="cb106-524"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     1. ``Z = median(y)``</span></span>
<span id="cb106-525"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Performs median/WPGMC linkage on the condensed distance matrix</span></span>
<span id="cb106-526"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``y``.  See ``linkage`` for more information on the return</span></span>
<span id="cb106-527"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        structure and algorithm.</span></span>
<span id="cb106-528"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     2. ``Z = median(X)``</span></span>
<span id="cb106-529"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Performs median/WPGMC linkage on the observation matrix ``X``</span></span>
<span id="cb106-530"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        using Euclidean distance as the distance metric. See `linkage`</span></span>
<span id="cb106-531"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        for more information on the return structure and algorithm.</span></span>
<span id="cb106-532"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-533"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-534"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    y : ndarray</span></span>
<span id="cb106-535"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A condensed distance matrix. A condensed</span></span>
<span id="cb106-536"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        distance matrix is a flat array containing the upper</span></span>
<span id="cb106-537"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        triangular of the distance matrix. This is the form that</span></span>
<span id="cb106-538"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``pdist`` returns.  Alternatively, a collection of</span></span>
<span id="cb106-539"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        m observation vectors in n dimensions may be passed as</span></span>
<span id="cb106-540"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        an m by n array.</span></span>
<span id="cb106-541"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-542"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-543"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-544"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The hierarchical clustering encoded as a linkage matrix.</span></span>
<span id="cb106-545"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-546"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-547"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage: for advanced creation of hierarchical clusterings.</span></span>
<span id="cb106-548"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    scipy.spatial.distance.pdist : pairwise distance metrics</span></span>
<span id="cb106-549"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-550"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-551"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import median, fcluster</span></span>
<span id="cb106-552"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-553"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    First, we need a toy dataset to play with::</span></span>
<span id="cb106-554"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x x    x x</span></span>
<span id="cb106-555"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x        x</span></span>
<span id="cb106-556"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x        x</span></span>
<span id="cb106-557"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x x    x x</span></span>
<span id="cb106-558"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-559"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-560"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-561"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-562"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Then, we get a condensed distance matrix from this dataset:</span></span>
<span id="cb106-563"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; y = pdist(X)</span></span>
<span id="cb106-564"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Finally, we can perform the clustering:</span></span>
<span id="cb106-565"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = median(y)</span></span>
<span id="cb106-566"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z</span></span>
<span id="cb106-567"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[ 0.        ,  1.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-568"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 3.        ,  4.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-569"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 9.        , 10.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-570"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 6.        ,  7.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-571"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 2.        , 12.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-572"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 5.        , 13.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-573"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 8.        , 15.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-574"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [11.        , 14.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-575"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [18.        , 19.        ,  3.        ,  6.        ],</span></span>
<span id="cb106-576"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [16.        , 17.        ,  3.5       ,  6.        ],</span></span>
<span id="cb106-577"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [20.        , 21.        ,  3.25      , 12.        ]])</span></span>
<span id="cb106-578"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The linkage matrix ``Z`` represents a dendrogram - see</span></span>
<span id="cb106-579"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `scipy.cluster.hierarchy.linkage` for a detailed explanation of its</span></span>
<span id="cb106-580"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    contents.</span></span>
<span id="cb106-581"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    We can use `scipy.cluster.hierarchy.fcluster` to see to which cluster</span></span>
<span id="cb106-582"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    each initial point would belong given a distance threshold:</span></span>
<span id="cb106-583"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 0.9, criterion='distance')</span></span>
<span id="cb106-584"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([ 7,  8,  9, 10, 11, 12,  1,  2,  3,  4,  5,  6], dtype=int32)</span></span>
<span id="cb106-585"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 1.1, criterion='distance')</span></span>
<span id="cb106-586"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([5, 5, 6, 7, 7, 8, 1, 1, 2, 3, 3, 4], dtype=int32)</span></span>
<span id="cb106-587"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 2, criterion='distance')</span></span>
<span id="cb106-588"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([3, 3, 3, 4, 4, 4, 1, 1, 1, 2, 2, 2], dtype=int32)</span></span>
<span id="cb106-589"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 4, criterion='distance')</span></span>
<span id="cb106-590"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)</span></span>
<span id="cb106-591"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Also, `scipy.cluster.hierarchy.dendrogram` can be used to generate a</span></span>
<span id="cb106-592"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    plot of the dendrogram.</span></span>
<span id="cb106-593"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-594">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> linkage(y, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'median'</span>, metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'euclidean'</span>)</span>
<span id="cb106-595"></span>
<span id="cb106-596"></span>
<span id="cb106-597"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ward(y):</span>
<span id="cb106-598">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-599"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Perform Ward's linkage on a condensed distance matrix.</span></span>
<span id="cb106-600"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See `linkage` for more information on the return structure</span></span>
<span id="cb106-601"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    and algorithm.</span></span>
<span id="cb106-602"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The following are common calling conventions:</span></span>
<span id="cb106-603"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    1. ``Z = ward(y)``</span></span>
<span id="cb106-604"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       Performs Ward's linkage on the condensed distance matrix ``y``.</span></span>
<span id="cb106-605"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    2. ``Z = ward(X)``</span></span>
<span id="cb106-606"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       Performs Ward's linkage on the observation matrix ``X`` using</span></span>
<span id="cb106-607"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       Euclidean distance as the distance metric.</span></span>
<span id="cb106-608"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-609"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-610"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    y : ndarray</span></span>
<span id="cb106-611"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A condensed distance matrix. A condensed</span></span>
<span id="cb106-612"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        distance matrix is a flat array containing the upper</span></span>
<span id="cb106-613"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        triangular of the distance matrix. This is the form that</span></span>
<span id="cb106-614"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``pdist`` returns.  Alternatively, a collection of</span></span>
<span id="cb106-615"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        m observation vectors in n dimensions may be passed as</span></span>
<span id="cb106-616"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        an m by n array.</span></span>
<span id="cb106-617"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-618"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-619"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-620"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The hierarchical clustering encoded as a linkage matrix. See</span></span>
<span id="cb106-621"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        `linkage` for more information on the return structure and</span></span>
<span id="cb106-622"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        algorithm.</span></span>
<span id="cb106-623"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-624"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-625"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage: for advanced creation of hierarchical clusterings.</span></span>
<span id="cb106-626"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    scipy.spatial.distance.pdist : pairwise distance metrics</span></span>
<span id="cb106-627"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-628"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-629"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import ward, fcluster</span></span>
<span id="cb106-630"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-631"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    First, we need a toy dataset to play with::</span></span>
<span id="cb106-632"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x x    x x</span></span>
<span id="cb106-633"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x        x</span></span>
<span id="cb106-634"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x        x</span></span>
<span id="cb106-635"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x x    x x</span></span>
<span id="cb106-636"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-637"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-638"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-639"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-640"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Then, we get a condensed distance matrix from this dataset:</span></span>
<span id="cb106-641"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; y = pdist(X)</span></span>
<span id="cb106-642"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Finally, we can perform the clustering:</span></span>
<span id="cb106-643"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = ward(y)</span></span>
<span id="cb106-644"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z</span></span>
<span id="cb106-645"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[ 0.        ,  1.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-646"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 3.        ,  4.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-647"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 6.        ,  7.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-648"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 9.        , 10.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-649"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 2.        , 12.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-650"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 5.        , 13.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-651"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 8.        , 14.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-652"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [11.        , 15.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-653"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [16.        , 17.        ,  5.77350269,  6.        ],</span></span>
<span id="cb106-654"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [18.        , 19.        ,  5.77350269,  6.        ],</span></span>
<span id="cb106-655"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [20.        , 21.        ,  8.16496581, 12.        ]])</span></span>
<span id="cb106-656"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The linkage matrix ``Z`` represents a dendrogram - see</span></span>
<span id="cb106-657"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `scipy.cluster.hierarchy.linkage` for a detailed explanation of its</span></span>
<span id="cb106-658"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    contents.</span></span>
<span id="cb106-659"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    We can use `scipy.cluster.hierarchy.fcluster` to see to which cluster</span></span>
<span id="cb106-660"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    each initial point would belong given a distance threshold:</span></span>
<span id="cb106-661"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 0.9, criterion='distance')</span></span>
<span id="cb106-662"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12], dtype=int32)</span></span>
<span id="cb106-663"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 1.1, criterion='distance')</span></span>
<span id="cb106-664"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8], dtype=int32)</span></span>
<span id="cb106-665"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 3, criterion='distance')</span></span>
<span id="cb106-666"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4], dtype=int32)</span></span>
<span id="cb106-667"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, 9, criterion='distance')</span></span>
<span id="cb106-668"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)</span></span>
<span id="cb106-669"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Also, `scipy.cluster.hierarchy.dendrogram` can be used to generate a</span></span>
<span id="cb106-670"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    plot of the dendrogram.</span></span>
<span id="cb106-671"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-672">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> linkage(y, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ward'</span>, metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'euclidean'</span>)</span>
<span id="cb106-673"></span>
<span id="cb106-674"></span>
<span id="cb106-675"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> linkage(y, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'single'</span>, metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'euclidean'</span>, optimal_ordering<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb106-676">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-677"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Perform hierarchical/agglomerative clustering.</span></span>
<span id="cb106-678"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The input y may be either a 1-D condensed distance matrix</span></span>
<span id="cb106-679"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    or a 2-D array of observation vectors.</span></span>
<span id="cb106-680"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    If y is a 1-D condensed distance matrix,</span></span>
<span id="cb106-681"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    then y must be a :math:`</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">binom{n}{2}` sized</span></span>
<span id="cb106-682"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    vector, where n is the number of original observations paired</span></span>
<span id="cb106-683"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    in the distance matrix. The behavior of this function is very</span></span>
<span id="cb106-684"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    similar to the MATLAB linkage function.</span></span>
<span id="cb106-685"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A :math:`(n-1)` by 4 matrix ``Z`` is returned. At the</span></span>
<span id="cb106-686"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :math:`i`-th iteration, clusters with indices ``Z[i, 0]`` and</span></span>
<span id="cb106-687"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ``Z[i, 1]`` are combined to form cluster :math:`n + i`. A</span></span>
<span id="cb106-688"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    cluster with an index less than :math:`n` corresponds to one of</span></span>
<span id="cb106-689"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    the :math:`n` original observations. The distance between</span></span>
<span id="cb106-690"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    clusters ``Z[i, 0]`` and ``Z[i, 1]`` is given by ``Z[i, 2]``. The</span></span>
<span id="cb106-691"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    fourth value ``Z[i, 3]`` represents the number of original</span></span>
<span id="cb106-692"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    observations in the newly formed cluster.</span></span>
<span id="cb106-693"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The following linkage methods are used to compute the distance</span></span>
<span id="cb106-694"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :math:`d(s, t)` between two clusters :math:`s` and</span></span>
<span id="cb106-695"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :math:`t`. The algorithm begins with a forest of clusters that</span></span>
<span id="cb106-696"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    have yet to be used in the hierarchy being formed. When two</span></span>
<span id="cb106-697"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    clusters :math:`s` and :math:`t` from this forest are combined</span></span>
<span id="cb106-698"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    into a single cluster :math:`u`, :math:`s` and :math:`t` are</span></span>
<span id="cb106-699"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    removed from the forest, and :math:`u` is added to the</span></span>
<span id="cb106-700"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    forest. When only one cluster remains in the forest, the algorithm</span></span>
<span id="cb106-701"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    stops, and this cluster becomes the root.</span></span>
<span id="cb106-702"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A distance matrix is maintained at each iteration. The ``d[i,j]``</span></span>
<span id="cb106-703"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    entry corresponds to the distance between cluster :math:`i` and</span></span>
<span id="cb106-704"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :math:`j` in the original forest.</span></span>
<span id="cb106-705"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    At each iteration, the algorithm must update the distance matrix</span></span>
<span id="cb106-706"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    to reflect the distance of the newly formed cluster u with the</span></span>
<span id="cb106-707"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    remaining clusters in the forest.</span></span>
<span id="cb106-708"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Suppose there are :math:`|u|` original observations</span></span>
<span id="cb106-709"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :math:`u[0], </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">ldots, u[|u|-1]` in cluster :math:`u` and</span></span>
<span id="cb106-710"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :math:`|v|` original objects :math:`v[0], </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">ldots, v[|v|-1]` in</span></span>
<span id="cb106-711"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    cluster :math:`v`. Recall, :math:`s` and :math:`t` are</span></span>
<span id="cb106-712"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    combined to form cluster :math:`u`. Let :math:`v` be any</span></span>
<span id="cb106-713"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    remaining cluster in the forest that is not :math:`u`.</span></span>
<span id="cb106-714"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The following are methods for calculating the distance between the</span></span>
<span id="cb106-715"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    newly formed cluster :math:`u` and each :math:`v`.</span></span>
<span id="cb106-716"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      * method='single' assigns</span></span>
<span id="cb106-717"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        .. math::</span></span>
<span id="cb106-718"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           d(u,v) = </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">min(dist(u[i],v[j]))</span></span>
<span id="cb106-719"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        for all points :math:`i` in cluster :math:`u` and</span></span>
<span id="cb106-720"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :math:`j` in cluster :math:`v`. This is also known as the</span></span>
<span id="cb106-721"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Nearest Point Algorithm.</span></span>
<span id="cb106-722"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      * method='complete' assigns</span></span>
<span id="cb106-723"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        .. math::</span></span>
<span id="cb106-724"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           d(u, v) = </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">max(dist(u[i],v[j]))</span></span>
<span id="cb106-725"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        for all points :math:`i` in cluster u and :math:`j` in</span></span>
<span id="cb106-726"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        cluster :math:`v`. This is also known by the Farthest Point</span></span>
<span id="cb106-727"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Algorithm or Voor Hees Algorithm.</span></span>
<span id="cb106-728"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      * method='average' assigns</span></span>
<span id="cb106-729"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        .. math::</span></span>
<span id="cb106-730"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           d(u,v) = </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">sum_{ij} </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">frac{d(u[i], v[j])}</span></span>
<span id="cb106-731"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                                   {(|u|*|v|)}</span></span>
<span id="cb106-732"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        for all points :math:`i` and :math:`j` where :math:`|u|`</span></span>
<span id="cb106-733"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        and :math:`|v|` are the cardinalities of clusters :math:`u`</span></span>
<span id="cb106-734"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        and :math:`v`, respectively. This is also called the UPGMA</span></span>
<span id="cb106-735"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        algorithm.</span></span>
<span id="cb106-736"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      * method='weighted' assigns</span></span>
<span id="cb106-737"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        .. math::</span></span>
<span id="cb106-738"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           d(u,v) = (dist(s,v) + dist(t,v))/2</span></span>
<span id="cb106-739"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        where cluster u was formed with cluster s and t and v</span></span>
<span id="cb106-740"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        is a remaining cluster in the forest (also called WPGMA).</span></span>
<span id="cb106-741"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      * method='centroid' assigns</span></span>
<span id="cb106-742"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        .. math::</span></span>
<span id="cb106-743"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           dist(s,t) = ||c_s-c_t||_2</span></span>
<span id="cb106-744"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        where :math:`c_s` and :math:`c_t` are the centroids of</span></span>
<span id="cb106-745"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        clusters :math:`s` and :math:`t`, respectively. When two</span></span>
<span id="cb106-746"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        clusters :math:`s` and :math:`t` are combined into a new</span></span>
<span id="cb106-747"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        cluster :math:`u`, the new centroid is computed over all the</span></span>
<span id="cb106-748"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        original objects in clusters :math:`s` and :math:`t`. The</span></span>
<span id="cb106-749"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        distance then becomes the Euclidean distance between the</span></span>
<span id="cb106-750"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        centroid of :math:`u` and the centroid of a remaining cluster</span></span>
<span id="cb106-751"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :math:`v` in the forest. This is also known as the UPGMC</span></span>
<span id="cb106-752"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        algorithm.</span></span>
<span id="cb106-753"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      * method='median' assigns :math:`d(s,t)` like the ``centroid``</span></span>
<span id="cb106-754"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        method. When two clusters :math:`s` and :math:`t` are combined</span></span>
<span id="cb106-755"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        into a new cluster :math:`u`, the average of centroids s and t</span></span>
<span id="cb106-756"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        give the new centroid :math:`u`. This is also known as the</span></span>
<span id="cb106-757"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        WPGMC algorithm.</span></span>
<span id="cb106-758"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      * method='ward' uses the Ward variance minimization algorithm.</span></span>
<span id="cb106-759"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The new entry :math:`d(u,v)` is computed as follows,</span></span>
<span id="cb106-760"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        .. math::</span></span>
<span id="cb106-761"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           d(u,v) = </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">sqrt{</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">frac{|v|+|s|}</span></span>
<span id="cb106-762"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                               {T}d(v,s)^2</span></span>
<span id="cb106-763"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                        + </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">frac{|v|+|t|}</span></span>
<span id="cb106-764"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                               {T}d(v,t)^2</span></span>
<span id="cb106-765"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                        - </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">frac{|v|}</span></span>
<span id="cb106-766"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                               {T}d(s,t)^2}</span></span>
<span id="cb106-767"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        where :math:`u` is the newly joined cluster consisting of</span></span>
<span id="cb106-768"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        clusters :math:`s` and :math:`t`, :math:`v` is an unused</span></span>
<span id="cb106-769"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        cluster in the forest, :math:`T=|v|+|s|+|t|`, and</span></span>
<span id="cb106-770"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :math:`|*|` is the cardinality of its argument. This is also</span></span>
<span id="cb106-771"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        known as the incremental algorithm.</span></span>
<span id="cb106-772"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Warning: When the minimum distance pair in the forest is chosen, there</span></span>
<span id="cb106-773"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    may be two or more pairs with the same minimum distance. This</span></span>
<span id="cb106-774"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    implementation may choose a different minimum than the MATLAB</span></span>
<span id="cb106-775"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    version.</span></span>
<span id="cb106-776"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-777"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-778"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    y : ndarray</span></span>
<span id="cb106-779"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A condensed distance matrix. A condensed distance matrix</span></span>
<span id="cb106-780"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        is a flat array containing the upper triangular of the distance matrix.</span></span>
<span id="cb106-781"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        This is the form that ``pdist`` returns. Alternatively, a collection of</span></span>
<span id="cb106-782"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :math:`m` observation vectors in :math:`n` dimensions may be passed as</span></span>
<span id="cb106-783"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        an :math:`m` by :math:`n` array. All elements of the condensed distance</span></span>
<span id="cb106-784"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        matrix must be finite, i.e., no NaNs or infs.</span></span>
<span id="cb106-785"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    method : str, optional</span></span>
<span id="cb106-786"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The linkage algorithm to use. See the ``Linkage Methods`` section below</span></span>
<span id="cb106-787"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        for full descriptions.</span></span>
<span id="cb106-788"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    metric : str or function, optional</span></span>
<span id="cb106-789"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The distance metric to use in the case that y is a collection of</span></span>
<span id="cb106-790"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        observation vectors; ignored otherwise. See the ``pdist``</span></span>
<span id="cb106-791"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        function for a list of valid distance metrics. A custom distance</span></span>
<span id="cb106-792"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        function can also be used.</span></span>
<span id="cb106-793"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    optimal_ordering : bool, optional</span></span>
<span id="cb106-794"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        If True, the linkage matrix will be reordered so that the distance</span></span>
<span id="cb106-795"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        between successive leaves is minimal. This results in a more intuitive</span></span>
<span id="cb106-796"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tree structure when the data are visualized. defaults to False, because</span></span>
<span id="cb106-797"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        this algorithm can be slow, particularly on large datasets [2]_. See</span></span>
<span id="cb106-798"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        also the `optimal_leaf_ordering` function.</span></span>
<span id="cb106-799"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        .. versionadded:: 1.0.0</span></span>
<span id="cb106-800"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-801"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-802"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-803"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The hierarchical clustering encoded as a linkage matrix.</span></span>
<span id="cb106-804"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Notes</span></span>
<span id="cb106-805"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -----</span></span>
<span id="cb106-806"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    1. For method 'single', an optimized algorithm based on minimum spanning</span></span>
<span id="cb106-807"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       tree is implemented. It has time complexity :math:`O(n^2)`.</span></span>
<span id="cb106-808"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       For methods 'complete', 'average', 'weighted' and 'ward', an algorithm</span></span>
<span id="cb106-809"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       called nearest-neighbors chain is implemented. It also has time</span></span>
<span id="cb106-810"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       complexity :math:`O(n^2)`.</span></span>
<span id="cb106-811"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       For other methods, a naive algorithm is implemented with :math:`O(n^3)`</span></span>
<span id="cb106-812"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       time complexity.</span></span>
<span id="cb106-813"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       All algorithms use :math:`O(n^2)` memory.</span></span>
<span id="cb106-814"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       Refer to [1]_ for details about the algorithms.</span></span>
<span id="cb106-815"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    2. Methods 'centroid', 'median', and 'ward' are correctly defined only if</span></span>
<span id="cb106-816"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       Euclidean pairwise metric is used. If `y` is passed as precomputed</span></span>
<span id="cb106-817"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       pairwise distances, then it is the user's responsibility to assure that</span></span>
<span id="cb106-818"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       these distances are in fact Euclidean, otherwise the produced result</span></span>
<span id="cb106-819"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       will be incorrect.</span></span>
<span id="cb106-820"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-821"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-822"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    scipy.spatial.distance.pdist : pairwise distance metrics</span></span>
<span id="cb106-823"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    References</span></span>
<span id="cb106-824"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-825"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    .. [1] Daniel Mullner, "Modern hierarchical, agglomerative clustering</span></span>
<span id="cb106-826"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           algorithms", :arXiv:`1109.2378v1`.</span></span>
<span id="cb106-827"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    .. [2] Ziv Bar-Joseph, David K. Gifford, Tommi S. Jaakkola, "Fast optimal</span></span>
<span id="cb106-828"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           leaf ordering for hierarchical clustering", 2001. Bioinformatics</span></span>
<span id="cb106-829"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           :doi:`10.1093/bioinformatics/17.suppl_1.S22`</span></span>
<span id="cb106-830"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-831"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-832"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import dendrogram, linkage</span></span>
<span id="cb106-833"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from matplotlib import pyplot as plt</span></span>
<span id="cb106-834"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[i] for i in [2, 8, 0, 4, 1, 9, 9, 0]]</span></span>
<span id="cb106-835"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = linkage(X, 'ward')</span></span>
<span id="cb106-836"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fig = plt.figure(figsize=(25, 10))</span></span>
<span id="cb106-837"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; dn = dendrogram(Z)</span></span>
<span id="cb106-838"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = linkage(X, 'single')</span></span>
<span id="cb106-839"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fig = plt.figure(figsize=(25, 10))</span></span>
<span id="cb106-840"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; dn = dendrogram(Z)</span></span>
<span id="cb106-841"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; plt.show()</span></span>
<span id="cb106-842"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-843">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> method <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> _LINKAGE_METHODS:</span>
<span id="cb106-844">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid method: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{0}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(method))</span>
<span id="cb106-845"></span>
<span id="cb106-846">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _convert_to_double(np.asarray(y, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>))</span>
<span id="cb106-847"></span>
<span id="cb106-848">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> y.ndim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb106-849">        distance.is_valid_y(y, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb106-850">        [y] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _copy_arrays_if_base_present([y])</span>
<span id="cb106-851">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> y.ndim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb106-852">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> method <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> _EUCLIDEAN_METHODS <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> metric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'euclidean'</span>:</span>
<span id="cb106-853">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Method '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{0}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' requires the distance metric "</span></span>
<span id="cb106-854">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to be Euclidean"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(method))</span>
<span id="cb106-855">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> y.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> np.allclose(np.diag(y), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb106-856">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> np.allclose(y, y.T):</span>
<span id="cb106-857">                _warning(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The symmetric non-negative hollow observation '</span></span>
<span id="cb106-858">                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'matrix looks suspiciously like an uncondensed '</span></span>
<span id="cb106-859">                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance matrix'</span>)</span>
<span id="cb106-860">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distance.pdist(y, metric)</span>
<span id="cb106-861">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-862">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`y` must be 1 or 2 dimensional."</span>)</span>
<span id="cb106-863"></span>
<span id="cb106-864">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(np.isfinite(y)):</span>
<span id="cb106-865">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The condensed distance matrix must contain only "</span></span>
<span id="cb106-866">                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"finite values."</span>)</span>
<span id="cb106-867"></span>
<span id="cb106-868">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(distance.num_obs_y(y))</span>
<span id="cb106-869">    method_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _LINKAGE_METHODS[method]</span>
<span id="cb106-870"></span>
<span id="cb106-871">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'single'</span>:</span>
<span id="cb106-872">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _hierarchy.mst_single_linkage(y, n)</span>
<span id="cb106-873">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> method <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'complete'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'average'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weighted'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ward'</span>]:</span>
<span id="cb106-874">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _hierarchy.nn_chain(y, n, method_code)</span>
<span id="cb106-875">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-876">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _hierarchy.fast_linkage(y, n, method_code)</span>
<span id="cb106-877"></span>
<span id="cb106-878">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> optimal_ordering:</span>
<span id="cb106-879">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> optimal_leaf_ordering(result, y)</span>
<span id="cb106-880">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-881">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb106-882"></span>
<span id="cb106-883"></span>
<span id="cb106-884"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ClusterNode(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span>):</span>
<span id="cb106-885">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-886"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A tree node class for representing a cluster.</span></span>
<span id="cb106-887"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Leaf nodes correspond to original observations, while non-leaf nodes</span></span>
<span id="cb106-888"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    correspond to non-singleton clusters.</span></span>
<span id="cb106-889"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The `to_tree` function converts a matrix returned by the linkage</span></span>
<span id="cb106-890"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    function into an easy-to-use tree representation.</span></span>
<span id="cb106-891"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    All parameter names are also attributes.</span></span>
<span id="cb106-892"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-893"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-894"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    id : int</span></span>
<span id="cb106-895"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The node id.</span></span>
<span id="cb106-896"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    left : ClusterNode instance, optional</span></span>
<span id="cb106-897"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The left child tree node.</span></span>
<span id="cb106-898"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    right : ClusterNode instance, optional</span></span>
<span id="cb106-899"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The right child tree node.</span></span>
<span id="cb106-900"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    dist : float, optional</span></span>
<span id="cb106-901"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Distance for this cluster in the linkage matrix.</span></span>
<span id="cb106-902"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    count : int, optional</span></span>
<span id="cb106-903"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The number of samples in this cluster.</span></span>
<span id="cb106-904"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-905"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-906"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    to_tree : for converting a linkage matrix ``Z`` into a tree object.</span></span>
<span id="cb106-907"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-908"></span>
<span id="cb106-909">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>, left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, dist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb106-910">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb106-911">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The id must be non-negative.'</span>)</span>
<span id="cb106-912">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb106-913">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The distance must be non-negative.'</span>)</span>
<span id="cb106-914">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (left <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> right <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb106-915">                (left <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> right <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb106-916">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Only full or proper binary trees are permitted.'</span></span>
<span id="cb106-917">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'  This node has one child.'</span>)</span>
<span id="cb106-918">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb106-919">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A cluster must contain at least one original '</span></span>
<span id="cb106-920">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'observation.'</span>)</span>
<span id="cb106-921">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb106-922">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> left</span>
<span id="cb106-923">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> right</span>
<span id="cb106-924">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dist</span>
<span id="cb106-925">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.left <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-926">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> count</span>
<span id="cb106-927">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-928">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> left.count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> right.count</span>
<span id="cb106-929"></span>
<span id="cb106-930">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__lt__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, node):</span>
<span id="cb106-931">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(node, ClusterNode):</span>
<span id="cb106-932">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Can't compare ClusterNode "</span></span>
<span id="cb106-933">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to type </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(node)))</span>
<span id="cb106-934">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> node.dist</span>
<span id="cb106-935"></span>
<span id="cb106-936">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__gt__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, node):</span>
<span id="cb106-937">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(node, ClusterNode):</span>
<span id="cb106-938">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Can't compare ClusterNode "</span></span>
<span id="cb106-939">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to type </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(node)))</span>
<span id="cb106-940">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> node.dist</span>
<span id="cb106-941"></span>
<span id="cb106-942">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__eq__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, node):</span>
<span id="cb106-943">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(node, ClusterNode):</span>
<span id="cb106-944">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Can't compare ClusterNode "</span></span>
<span id="cb106-945">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to type </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(node)))</span>
<span id="cb106-946">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> node.dist</span>
<span id="cb106-947"></span>
<span id="cb106-948">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_id(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb106-949">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-950"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The identifier of the target node.</span></span>
<span id="cb106-951"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        For ``0 &lt;= i &lt; n``, `i` corresponds to original observation i.</span></span>
<span id="cb106-952"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        For ``n &lt;= i &lt; 2n-1``, `i` corresponds to non-singleton cluster formed</span></span>
<span id="cb106-953"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        at iteration ``i-n``.</span></span>
<span id="cb106-954"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns</span></span>
<span id="cb106-955"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        -------</span></span>
<span id="cb106-956"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        id : int</span></span>
<span id="cb106-957"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            The identifier of the target node.</span></span>
<span id="cb106-958"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb106-959">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb106-960"></span>
<span id="cb106-961">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_count(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb106-962">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-963"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The number of leaf nodes (original observations) belonging to</span></span>
<span id="cb106-964"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        the cluster node nd. If the target node is a leaf, 1 is</span></span>
<span id="cb106-965"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        returned.</span></span>
<span id="cb106-966"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns</span></span>
<span id="cb106-967"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        -------</span></span>
<span id="cb106-968"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        get_count : int</span></span>
<span id="cb106-969"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            The number of leaf nodes below the target node.</span></span>
<span id="cb106-970"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb106-971">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.count</span>
<span id="cb106-972"></span>
<span id="cb106-973">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_left(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb106-974">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-975"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Return a reference to the left child tree object.</span></span>
<span id="cb106-976"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns</span></span>
<span id="cb106-977"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        -------</span></span>
<span id="cb106-978"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        left : ClusterNode</span></span>
<span id="cb106-979"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            The left child of the target node. If the node is a leaf,</span></span>
<span id="cb106-980"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            None is returned.</span></span>
<span id="cb106-981"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb106-982">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.left</span>
<span id="cb106-983"></span>
<span id="cb106-984">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_right(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb106-985">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-986"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Return a reference to the right child tree object.</span></span>
<span id="cb106-987"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns</span></span>
<span id="cb106-988"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        -------</span></span>
<span id="cb106-989"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        right : ClusterNode</span></span>
<span id="cb106-990"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            The left child of the target node. If the node is a leaf,</span></span>
<span id="cb106-991"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            None is returned.</span></span>
<span id="cb106-992"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb106-993">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.right</span>
<span id="cb106-994"></span>
<span id="cb106-995">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_leaf(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb106-996">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-997"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Return True if the target node is a leaf.</span></span>
<span id="cb106-998"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns</span></span>
<span id="cb106-999"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        -------</span></span>
<span id="cb106-1000"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        leafness : bool</span></span>
<span id="cb106-1001"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            True if the target node is a leaf node.</span></span>
<span id="cb106-1002"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb106-1003">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.left <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb106-1004"></span>
<span id="cb106-1005">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pre_order(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: x.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>)):</span>
<span id="cb106-1006">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-1007"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Perform pre-order traversal without recursive function calls.</span></span>
<span id="cb106-1008"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        When a leaf node is first encountered, ``func`` is called with</span></span>
<span id="cb106-1009"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        the leaf node as its argument, and its result is appended to</span></span>
<span id="cb106-1010"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        the list.</span></span>
<span id="cb106-1011"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        For example, the statement::</span></span>
<span id="cb106-1012"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           ids = root.pre_order(lambda x: x.id)</span></span>
<span id="cb106-1013"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        returns a list of the node ids corresponding to the leaf nodes</span></span>
<span id="cb106-1014"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        of the tree as they appear from left to right.</span></span>
<span id="cb106-1015"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters</span></span>
<span id="cb106-1016"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ----------</span></span>
<span id="cb106-1017"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        func : function</span></span>
<span id="cb106-1018"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Applied to each leaf ClusterNode object in the pre-order traversal.</span></span>
<span id="cb106-1019"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Given the ``i``-th leaf node in the pre-order traversal ``n[i]``,</span></span>
<span id="cb106-1020"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            the result of ``func(n[i])`` is stored in ``L[i]``. If not</span></span>
<span id="cb106-1021"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            provided, the index of the original observation to which the node</span></span>
<span id="cb106-1022"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            corresponds is used.</span></span>
<span id="cb106-1023"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns</span></span>
<span id="cb106-1024"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        -------</span></span>
<span id="cb106-1025"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        L : list</span></span>
<span id="cb106-1026"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            The pre-order traversal.</span></span>
<span id="cb106-1027"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb106-1028">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do a preorder traversal, caching the result. To avoid having to do</span></span>
<span id="cb106-1029">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># recursion, we'll store the previous index we've visited in a vector.</span></span>
<span id="cb106-1030">        n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.count</span>
<span id="cb106-1031"></span>
<span id="cb106-1032">        curNode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n)</span>
<span id="cb106-1033">        lvisited <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb106-1034">        rvisited <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb106-1035">        curNode[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span></span>
<span id="cb106-1036">        k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb106-1037">        preorder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb106-1038">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb106-1039">            nd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> curNode[k]</span>
<span id="cb106-1040">            ndid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nd.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb106-1041">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> nd.is_leaf():</span>
<span id="cb106-1042">                preorder.append(func(nd))</span>
<span id="cb106-1043">                k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-1044">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-1045">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ndid <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> lvisited:</span>
<span id="cb106-1046">                    curNode[k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nd.left</span>
<span id="cb106-1047">                    lvisited.add(ndid)</span>
<span id="cb106-1048">                    k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-1049">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> ndid <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> rvisited:</span>
<span id="cb106-1050">                    curNode[k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nd.right</span>
<span id="cb106-1051">                    rvisited.add(ndid)</span>
<span id="cb106-1052">                    k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-1053">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If we've visited the left and right of this non-leaf</span></span>
<span id="cb106-1054">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># node already, go up in the tree.</span></span>
<span id="cb106-1055">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-1056">                    k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-1057"></span>
<span id="cb106-1058">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> preorder</span>
<span id="cb106-1059"></span>
<span id="cb106-1060"></span>
<span id="cb106-1061">_cnode_bare <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClusterNode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb106-1062">_cnode_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(ClusterNode)</span>
<span id="cb106-1063"></span>
<span id="cb106-1064"></span>
<span id="cb106-1065"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _order_cluster_tree(Z):</span>
<span id="cb106-1066">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-1067"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return clustering nodes in bottom-up order by distance.</span></span>
<span id="cb106-1068"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-1069"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-1070"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : scipy.cluster.linkage array</span></span>
<span id="cb106-1071"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The linkage matrix.</span></span>
<span id="cb106-1072"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-1073"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-1074"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    nodes : list</span></span>
<span id="cb106-1075"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A list of ClusterNode objects.</span></span>
<span id="cb106-1076"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-1077">    q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> deque()</span>
<span id="cb106-1078">    tree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_tree(Z)</span>
<span id="cb106-1079">    q.append(tree)</span>
<span id="cb106-1080">    nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb106-1081"></span>
<span id="cb106-1082">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> q:</span>
<span id="cb106-1083">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> q.popleft()</span>
<span id="cb106-1084">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> node.is_leaf():</span>
<span id="cb106-1085">            bisect.insort_left(nodes, node)</span>
<span id="cb106-1086">            q.append(node.get_right())</span>
<span id="cb106-1087">            q.append(node.get_left())</span>
<span id="cb106-1088">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nodes</span>
<span id="cb106-1089"></span>
<span id="cb106-1090"></span>
<span id="cb106-1091"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cut_tree(Z, n_clusters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb106-1092">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-1093"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Given a linkage matrix Z, return the cut tree.</span></span>
<span id="cb106-1094"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-1095"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-1096"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : scipy.cluster.linkage array</span></span>
<span id="cb106-1097"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The linkage matrix.</span></span>
<span id="cb106-1098"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    n_clusters : array_like, optional</span></span>
<span id="cb106-1099"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Number of clusters in the tree at the cut point.</span></span>
<span id="cb106-1100"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    height : array_like, optional</span></span>
<span id="cb106-1101"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The height at which to cut the tree. Only possible for ultrametric</span></span>
<span id="cb106-1102"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        trees.</span></span>
<span id="cb106-1103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-1104"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-1105"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    cutree : array</span></span>
<span id="cb106-1106"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        An array indicating group membership at each agglomeration step. I.e.,</span></span>
<span id="cb106-1107"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        for a full cut tree, in the first column each data point is in its own</span></span>
<span id="cb106-1108"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        cluster. At the next step, two nodes are merged. Finally, all</span></span>
<span id="cb106-1109"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        singleton and non-singleton clusters are in one group. If `n_clusters`</span></span>
<span id="cb106-1110"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        or `height` are given, the columns correspond to the columns of</span></span>
<span id="cb106-1111"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        `n_clusters` or `height`.</span></span>
<span id="cb106-1112"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-1113"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-1114"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy import cluster</span></span>
<span id="cb106-1115"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; np.random.seed(23)</span></span>
<span id="cb106-1116"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = np.random.randn(50, 4)</span></span>
<span id="cb106-1117"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = cluster.hierarchy.ward(X)</span></span>
<span id="cb106-1118"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; cutree = cluster.hierarchy.cut_tree(Z, n_clusters=[5, 10])</span></span>
<span id="cb106-1119"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; cutree[:10]</span></span>
<span id="cb106-1120"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[0, 0],</span></span>
<span id="cb106-1121"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1, 1],</span></span>
<span id="cb106-1122"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [2, 2],</span></span>
<span id="cb106-1123"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [3, 3],</span></span>
<span id="cb106-1124"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [3, 4],</span></span>
<span id="cb106-1125"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [2, 2],</span></span>
<span id="cb106-1126"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [0, 0],</span></span>
<span id="cb106-1127"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1, 5],</span></span>
<span id="cb106-1128"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [3, 6],</span></span>
<span id="cb106-1129"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [4, 7]])</span></span>
<span id="cb106-1130"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-1131">    nobs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_obs_linkage(Z)</span>
<span id="cb106-1132">    nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _order_cluster_tree(Z)</span>
<span id="cb106-1133"></span>
<span id="cb106-1134">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> height <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> n_clusters <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-1135">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"At least one of either height or n_clusters "</span></span>
<span id="cb106-1136">                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"must be None"</span>)</span>
<span id="cb106-1137">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> height <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> n_clusters <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return the full cut tree</span></span>
<span id="cb106-1138">        cols_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(nobs)</span>
<span id="cb106-1139">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> height <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-1140">        heights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([x.dist <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nodes])</span>
<span id="cb106-1141">        cols_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.searchsorted(heights, height)</span>
<span id="cb106-1142">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-1143">        cols_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nobs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.searchsorted(np.arange(nobs), n_clusters)</span>
<span id="cb106-1144"></span>
<span id="cb106-1145">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb106-1146">        n_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(cols_idx)</span>
<span id="cb106-1147">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scalar</span></span>
<span id="cb106-1148">        n_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-1149">        cols_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([cols_idx])</span>
<span id="cb106-1150"></span>
<span id="cb106-1151">    groups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((n_cols, nobs), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb106-1152">    last_group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(nobs)</span>
<span id="cb106-1153">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cols_idx:</span>
<span id="cb106-1154">        groups[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> last_group</span>
<span id="cb106-1155"></span>
<span id="cb106-1156">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, node <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(nodes):</span>
<span id="cb106-1157">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node.pre_order()</span>
<span id="cb106-1158">        this_group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> last_group.copy()</span>
<span id="cb106-1159">        this_group[idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> last_group[idx].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()</span>
<span id="cb106-1160">        this_group[this_group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> last_group[idx].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-1161">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cols_idx:</span>
<span id="cb106-1162">            groups[np.nonzero(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> cols_idx)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> this_group</span>
<span id="cb106-1163">        last_group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> this_group</span>
<span id="cb106-1164"></span>
<span id="cb106-1165">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> groups.T</span>
<span id="cb106-1166"></span>
<span id="cb106-1167"></span>
<span id="cb106-1168"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> to_tree(Z, rd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb106-1169">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-1170"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Convert a linkage matrix into an easy-to-use tree object.</span></span>
<span id="cb106-1171"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The reference to the root `ClusterNode` object is returned (by default).</span></span>
<span id="cb106-1172"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Each `ClusterNode` object has a ``left``, ``right``, ``dist``, ``id``,</span></span>
<span id="cb106-1173"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    and ``count`` attribute. The left and right attributes point to</span></span>
<span id="cb106-1174"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ClusterNode objects that were combined to generate the cluster.</span></span>
<span id="cb106-1175"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    If both are None then the `ClusterNode` object is a leaf node, its count</span></span>
<span id="cb106-1176"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    must be 1, and its distance is meaningless but set to 0.</span></span>
<span id="cb106-1177"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    *Note: This function is provided for the convenience of the library</span></span>
<span id="cb106-1178"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    user. ClusterNodes are not used as input to any of the functions in this</span></span>
<span id="cb106-1179"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    library.*</span></span>
<span id="cb106-1180"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-1181"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-1182"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-1183"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The linkage matrix in proper form (see the `linkage`</span></span>
<span id="cb106-1184"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        function documentation).</span></span>
<span id="cb106-1185"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    rd : bool, optional</span></span>
<span id="cb106-1186"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        When False (default), a reference to the root `ClusterNode` object is</span></span>
<span id="cb106-1187"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        returned.  Otherwise, a tuple ``(r, d)`` is returned. ``r`` is a</span></span>
<span id="cb106-1188"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        reference to the root node while ``d`` is a list of `ClusterNode`</span></span>
<span id="cb106-1189"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        objects - one per original entry in the linkage matrix plus entries</span></span>
<span id="cb106-1190"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        for all clustering steps. If a cluster id is</span></span>
<span id="cb106-1191"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        less than the number of samples ``n`` in the data that the linkage</span></span>
<span id="cb106-1192"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        matrix describes, then it corresponds to a singleton cluster (leaf</span></span>
<span id="cb106-1193"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        node).</span></span>
<span id="cb106-1194"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        See `linkage` for more information on the assignment of cluster ids</span></span>
<span id="cb106-1195"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        to clusters.</span></span>
<span id="cb106-1196"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-1197"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-1198"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    tree : ClusterNode or tuple (ClusterNode, list of ClusterNode)</span></span>
<span id="cb106-1199"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        If ``rd`` is False, a `ClusterNode`.</span></span>
<span id="cb106-1200"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        If ``rd`` is True, a list of length ``2*n - 1``, with ``n`` the number</span></span>
<span id="cb106-1201"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        of samples.  See the description of `rd` above for more details.</span></span>
<span id="cb106-1202"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-1203"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-1204"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage, is_valid_linkage, ClusterNode</span></span>
<span id="cb106-1205"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-1206"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-1207"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster import hierarchy</span></span>
<span id="cb106-1208"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; x = np.random.rand(10).reshape(5, 2)</span></span>
<span id="cb106-1209"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = hierarchy.linkage(x)</span></span>
<span id="cb106-1210"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; hierarchy.to_tree(Z)</span></span>
<span id="cb106-1211"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &lt;scipy.cluster.hierarchy.ClusterNode object at ...</span></span>
<span id="cb106-1212"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; rootnode, nodelist = hierarchy.to_tree(Z, rd=True)</span></span>
<span id="cb106-1213"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; rootnode</span></span>
<span id="cb106-1214"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &lt;scipy.cluster.hierarchy.ClusterNode object at ...</span></span>
<span id="cb106-1215"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; len(nodelist)</span></span>
<span id="cb106-1216"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    9</span></span>
<span id="cb106-1217"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-1218">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(Z, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-1219">    is_valid_linkage(Z, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>)</span>
<span id="cb106-1220"></span>
<span id="cb106-1221">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of original objects is equal to the number of rows minus 1.</span></span>
<span id="cb106-1222">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-1223"></span>
<span id="cb106-1224">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a list full of None's to store the node objects</span></span>
<span id="cb106-1225">    d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb106-1226"></span>
<span id="cb106-1227">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the nodes corresponding to the n original objects.</span></span>
<span id="cb106-1228">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n):</span>
<span id="cb106-1229">        d[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClusterNode(i)</span>
<span id="cb106-1230"></span>
<span id="cb106-1231">    nd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb106-1232"></span>
<span id="cb106-1233">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb106-1234">        fi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Z[i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb106-1235">        fj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Z[i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb106-1236">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> fi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n:</span>
<span id="cb106-1237">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Corrupt matrix Z. Index to derivative cluster '</span></span>
<span id="cb106-1238">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is used before it is formed. See row </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, '</span></span>
<span id="cb106-1239">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'column 0'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> fi)</span>
<span id="cb106-1240">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> fj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n:</span>
<span id="cb106-1241">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Corrupt matrix Z. Index to derivative cluster '</span></span>
<span id="cb106-1242">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is used before it is formed. See row </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, '</span></span>
<span id="cb106-1243">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'column 1'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> fj)</span>
<span id="cb106-1244">        nd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClusterNode(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n, d[fi], d[fj], Z[i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb106-1245">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                 ^ id   ^ left ^ right ^ dist</span></span>
<span id="cb106-1246">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> Z[i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> nd.count:</span>
<span id="cb106-1247">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Corrupt matrix Z. The count Z[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">,3] is '</span></span>
<span id="cb106-1248">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'incorrect.'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> i)</span>
<span id="cb106-1249">        d[n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nd</span>
<span id="cb106-1250"></span>
<span id="cb106-1251">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> rd:</span>
<span id="cb106-1252">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (nd, d)</span>
<span id="cb106-1253">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-1254">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nd</span>
<span id="cb106-1255"></span>
<span id="cb106-1256"></span>
<span id="cb106-1257"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> optimal_leaf_ordering(Z, y, metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'euclidean'</span>):</span>
<span id="cb106-1258">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-1259"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Given a linkage matrix Z and distance, reorder the cut tree.</span></span>
<span id="cb106-1260"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-1261"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-1262"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-1263"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The hierarchical clustering encoded as a linkage matrix. See</span></span>
<span id="cb106-1264"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        `linkage` for more information on the return structure and</span></span>
<span id="cb106-1265"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        algorithm.</span></span>
<span id="cb106-1266"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    y : ndarray</span></span>
<span id="cb106-1267"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The condensed distance matrix from which Z was generated.</span></span>
<span id="cb106-1268"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Alternatively, a collection of m observation vectors in n</span></span>
<span id="cb106-1269"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        dimensions may be passed as an m by n array.</span></span>
<span id="cb106-1270"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    metric : str or function, optional</span></span>
<span id="cb106-1271"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The distance metric to use in the case that y is a collection of</span></span>
<span id="cb106-1272"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        observation vectors; ignored otherwise. See the ``pdist``</span></span>
<span id="cb106-1273"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        function for a list of valid distance metrics. A custom distance</span></span>
<span id="cb106-1274"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        function can also be used.</span></span>
<span id="cb106-1275"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-1276"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-1277"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z_ordered : ndarray</span></span>
<span id="cb106-1278"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A copy of the linkage matrix Z, reordered to minimize the distance</span></span>
<span id="cb106-1279"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        between adjacent leaves.</span></span>
<span id="cb106-1280"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-1281"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-1282"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster import hierarchy</span></span>
<span id="cb106-1283"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; np.random.seed(23)</span></span>
<span id="cb106-1284"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = np.random.randn(10,10)</span></span>
<span id="cb106-1285"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = hierarchy.ward(X)</span></span>
<span id="cb106-1286"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; hierarchy.leaves_list(Z)</span></span>
<span id="cb106-1287"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([0, 5, 3, 9, 6, 8, 1, 4, 2, 7], dtype=int32)</span></span>
<span id="cb106-1288"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; hierarchy.leaves_list(hierarchy.optimal_leaf_ordering(Z, X))</span></span>
<span id="cb106-1289"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([3, 9, 0, 5, 8, 2, 7, 4, 1, 6], dtype=int32)</span></span>
<span id="cb106-1290"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-1291">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(Z, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-1292">    is_valid_linkage(Z, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>)</span>
<span id="cb106-1293"></span>
<span id="cb106-1294">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _convert_to_double(np.asarray(y, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>))</span>
<span id="cb106-1295"></span>
<span id="cb106-1296">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> y.ndim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb106-1297">        distance.is_valid_y(y, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb106-1298">        [y] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _copy_arrays_if_base_present([y])</span>
<span id="cb106-1299">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> y.ndim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb106-1300">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> y.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> np.allclose(np.diag(y), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb106-1301">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> np.allclose(y, y.T):</span>
<span id="cb106-1302">                _warning(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The symmetric non-negative hollow observation '</span></span>
<span id="cb106-1303">                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'matrix looks suspiciously like an uncondensed '</span></span>
<span id="cb106-1304">                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance matrix'</span>)</span>
<span id="cb106-1305">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distance.pdist(y, metric)</span>
<span id="cb106-1306">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-1307">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`y` must be 1 or 2 dimensional."</span>)</span>
<span id="cb106-1308"></span>
<span id="cb106-1309">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(np.isfinite(y)):</span>
<span id="cb106-1310">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The condensed distance matrix must contain only "</span></span>
<span id="cb106-1311">                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"finite values."</span>)</span>
<span id="cb106-1312"></span>
<span id="cb106-1313">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> _optimal_leaf_ordering.optimal_leaf_ordering(Z, y)</span>
<span id="cb106-1314"></span>
<span id="cb106-1315"></span>
<span id="cb106-1316"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _convert_to_bool(X):</span>
<span id="cb106-1317">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> X.dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb106-1318">        X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>)</span>
<span id="cb106-1319">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> X.flags.contiguous:</span>
<span id="cb106-1320">        X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.copy()</span>
<span id="cb106-1321">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> X</span>
<span id="cb106-1322"></span>
<span id="cb106-1323"></span>
<span id="cb106-1324"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _convert_to_double(X):</span>
<span id="cb106-1325">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> X.dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> np.double:</span>
<span id="cb106-1326">        X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.astype(np.double)</span>
<span id="cb106-1327">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> X.flags.contiguous:</span>
<span id="cb106-1328">        X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.copy()</span>
<span id="cb106-1329">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> X</span>
<span id="cb106-1330"></span>
<span id="cb106-1331"></span>
<span id="cb106-1332"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cophenet(Z, Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb106-1333">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-1334"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Calculate the cophenetic distances between each observation in</span></span>
<span id="cb106-1335"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    the hierarchical clustering defined by the linkage ``Z``.</span></span>
<span id="cb106-1336"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Suppose ``p`` and ``q`` are original observations in</span></span>
<span id="cb106-1337"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    disjoint clusters ``s`` and ``t``, respectively and</span></span>
<span id="cb106-1338"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ``s`` and ``t`` are joined by a direct parent cluster</span></span>
<span id="cb106-1339"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ``u``. The cophenetic distance between observations</span></span>
<span id="cb106-1340"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ``i`` and ``j`` is simply the distance between</span></span>
<span id="cb106-1341"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    clusters ``s`` and ``t``.</span></span>
<span id="cb106-1342"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-1343"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-1344"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-1345"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The hierarchical clustering encoded as an array</span></span>
<span id="cb106-1346"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        (see `linkage` function).</span></span>
<span id="cb106-1347"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Y : ndarray (optional)</span></span>
<span id="cb106-1348"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Calculates the cophenetic correlation coefficient ``c`` of a</span></span>
<span id="cb106-1349"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        hierarchical clustering defined by the linkage matrix `Z`</span></span>
<span id="cb106-1350"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        of a set of :math:`n` observations in :math:`m`</span></span>
<span id="cb106-1351"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        dimensions. `Y` is the condensed distance matrix from which</span></span>
<span id="cb106-1352"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        `Z` was generated.</span></span>
<span id="cb106-1353"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-1354"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-1355"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    c : ndarray</span></span>
<span id="cb106-1356"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The cophentic correlation distance (if ``Y`` is passed).</span></span>
<span id="cb106-1357"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    d : ndarray</span></span>
<span id="cb106-1358"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The cophenetic distance matrix in condensed form. The</span></span>
<span id="cb106-1359"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :math:`ij` th entry is the cophenetic distance between</span></span>
<span id="cb106-1360"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        original observations :math:`i` and :math:`j`.</span></span>
<span id="cb106-1361"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-1362"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-1363"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage: for a description of what a linkage matrix is.</span></span>
<span id="cb106-1364"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    scipy.spatial.distance.squareform: transforming condensed matrices into square ones.</span></span>
<span id="cb106-1365"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-1366"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-1367"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import single, cophenet</span></span>
<span id="cb106-1368"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist, squareform</span></span>
<span id="cb106-1369"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Given a dataset ``X`` and a linkage matrix ``Z``, the cophenetic distance</span></span>
<span id="cb106-1370"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    between two points of ``X`` is the distance between the largest two</span></span>
<span id="cb106-1371"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    distinct clusters that each of the points:</span></span>
<span id="cb106-1372"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-1373"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-1374"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-1375"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-1376"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ``X`` corresponds to this dataset ::</span></span>
<span id="cb106-1377"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x x    x x</span></span>
<span id="cb106-1378"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x        x</span></span>
<span id="cb106-1379"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x        x</span></span>
<span id="cb106-1380"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x x    x x</span></span>
<span id="cb106-1381"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = single(pdist(X))</span></span>
<span id="cb106-1382"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z</span></span>
<span id="cb106-1383"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[ 0.,  1.,  1.,  2.],</span></span>
<span id="cb106-1384"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 2., 12.,  1.,  3.],</span></span>
<span id="cb106-1385"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 3.,  4.,  1.,  2.],</span></span>
<span id="cb106-1386"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 5., 14.,  1.,  3.],</span></span>
<span id="cb106-1387"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 6.,  7.,  1.,  2.],</span></span>
<span id="cb106-1388"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 8., 16.,  1.,  3.],</span></span>
<span id="cb106-1389"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 9., 10.,  1.,  2.],</span></span>
<span id="cb106-1390"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [11., 18.,  1.,  3.],</span></span>
<span id="cb106-1391"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [13., 15.,  2.,  6.],</span></span>
<span id="cb106-1392"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [17., 20.,  2.,  9.],</span></span>
<span id="cb106-1393"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [19., 21.,  2., 12.]])</span></span>
<span id="cb106-1394"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; cophenet(Z)</span></span>
<span id="cb106-1395"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1., 1., 2., 2., 2., 2., 2., 2., 2., 2., 2., 1., 2., 2., 2., 2., 2.,</span></span>
<span id="cb106-1396"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 1., 1., 2., 2.,</span></span>
<span id="cb106-1397"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           2., 2., 2., 2., 1., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,</span></span>
<span id="cb106-1398"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           1., 1., 2., 2., 2., 1., 2., 2., 2., 2., 2., 2., 1., 1., 1.])</span></span>
<span id="cb106-1399"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The output of the `scipy.cluster.hierarchy.cophenet` method is</span></span>
<span id="cb106-1400"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    represented in condensed form. We can use</span></span>
<span id="cb106-1401"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `scipy.spatial.distance.squareform` to see the output as a</span></span>
<span id="cb106-1402"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    regular matrix (where each element ``ij`` denotes the cophenetic distance</span></span>
<span id="cb106-1403"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    between each ``i``, ``j`` pair of points in ``X``):</span></span>
<span id="cb106-1404"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; squareform(cophenet(Z))</span></span>
<span id="cb106-1405"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[0., 1., 1., 2., 2., 2., 2., 2., 2., 2., 2., 2.],</span></span>
<span id="cb106-1406"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1., 0., 1., 2., 2., 2., 2., 2., 2., 2., 2., 2.],</span></span>
<span id="cb106-1407"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1., 1., 0., 2., 2., 2., 2., 2., 2., 2., 2., 2.],</span></span>
<span id="cb106-1408"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [2., 2., 2., 0., 1., 1., 2., 2., 2., 2., 2., 2.],</span></span>
<span id="cb106-1409"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [2., 2., 2., 1., 0., 1., 2., 2., 2., 2., 2., 2.],</span></span>
<span id="cb106-1410"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [2., 2., 2., 1., 1., 0., 2., 2., 2., 2., 2., 2.],</span></span>
<span id="cb106-1411"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [2., 2., 2., 2., 2., 2., 0., 1., 1., 2., 2., 2.],</span></span>
<span id="cb106-1412"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [2., 2., 2., 2., 2., 2., 1., 0., 1., 2., 2., 2.],</span></span>
<span id="cb106-1413"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [2., 2., 2., 2., 2., 2., 1., 1., 0., 2., 2., 2.],</span></span>
<span id="cb106-1414"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [2., 2., 2., 2., 2., 2., 2., 2., 2., 0., 1., 1.],</span></span>
<span id="cb106-1415"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [2., 2., 2., 2., 2., 2., 2., 2., 2., 1., 0., 1.],</span></span>
<span id="cb106-1416"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [2., 2., 2., 2., 2., 2., 2., 2., 2., 1., 1., 0.]])</span></span>
<span id="cb106-1417"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    In this example, the cophenetic distance between points on ``X`` that are</span></span>
<span id="cb106-1418"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    very close (i.e., in the same corner) is 1. For other pairs of points is 2,</span></span>
<span id="cb106-1419"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    because the points will be located in clusters at different</span></span>
<span id="cb106-1420"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    corners - thus, the distance between these clusters will be larger.</span></span>
<span id="cb106-1421"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-1422">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(Z, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-1423">    is_valid_linkage(Z, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>)</span>
<span id="cb106-1424">    Zs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.shape</span>
<span id="cb106-1425">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Zs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-1426"></span>
<span id="cb106-1427">    zz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.double)</span>
<span id="cb106-1428">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Since the C code does not support striding using strides.</span></span>
<span id="cb106-1429">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The dimensions are used instead.</span></span>
<span id="cb106-1430">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _convert_to_double(Z)</span>
<span id="cb106-1431"></span>
<span id="cb106-1432">    _hierarchy.cophenetic_distances(Z, zz, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n))</span>
<span id="cb106-1433">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> Y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-1434">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> zz</span>
<span id="cb106-1435"></span>
<span id="cb106-1436">    Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(Y, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-1437">    distance.is_valid_y(Y, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>)</span>
<span id="cb106-1438"></span>
<span id="cb106-1439">    z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> zz.mean()</span>
<span id="cb106-1440">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Y.mean()</span>
<span id="cb106-1441">    Yy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y</span>
<span id="cb106-1442">    Zz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> zz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> z</span>
<span id="cb106-1443">    numerator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (Yy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Zz)</span>
<span id="cb106-1444">    denomA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Yy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb106-1445">    denomB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Zz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb106-1446">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numerator.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.sqrt((denomA.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> denomB.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()))</span>
<span id="cb106-1447">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (c, zz)</span>
<span id="cb106-1448"></span>
<span id="cb106-1449"></span>
<span id="cb106-1450"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> inconsistent(Z, d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb106-1451">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">r"""</span></span>
<span id="cb106-1452"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Calculate inconsistency statistics on a linkage matrix.</span></span>
<span id="cb106-1453"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-1454"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-1455"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-1456"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The :math:`(n-1)` by 4 matrix encoding the linkage (hierarchical</span></span>
<span id="cb106-1457"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        clustering).  See `linkage` documentation for more information on its</span></span>
<span id="cb106-1458"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        form.</span></span>
<span id="cb106-1459"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    d : int, optional</span></span>
<span id="cb106-1460"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The number of links up to `d` levels below each non-singleton cluster.</span></span>
<span id="cb106-1461"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-1462"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-1463"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    R : ndarray</span></span>
<span id="cb106-1464"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A :math:`(n-1)` by 4 matrix where the ``i``'th row contains the link</span></span>
<span id="cb106-1465"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        statistics for the non-singleton cluster ``i``. The link statistics are</span></span>
<span id="cb106-1466"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        computed over the link heights for links :math:`d` levels below the</span></span>
<span id="cb106-1467"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        cluster ``i``. ``R[i,0]`` and ``R[i,1]`` are the mean and standard</span></span>
<span id="cb106-1468"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        deviation of the link heights, respectively; ``R[i,2]`` is the number</span></span>
<span id="cb106-1469"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        of links included in the calculation; and ``R[i,3]`` is the</span></span>
<span id="cb106-1470"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        inconsistency coefficient,</span></span>
<span id="cb106-1471"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        .. math:: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\f</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">rac{\mathtt{Z[i,2]} - \mathtt{R[i,0]}} {R[i,1]}</span></span>
<span id="cb106-1472"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Notes</span></span>
<span id="cb106-1473"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -----</span></span>
<span id="cb106-1474"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This function behaves similarly to the MATLAB(TM) ``inconsistent``</span></span>
<span id="cb106-1475"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    function.</span></span>
<span id="cb106-1476"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-1477"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-1478"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import inconsistent, linkage</span></span>
<span id="cb106-1479"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from matplotlib import pyplot as plt</span></span>
<span id="cb106-1480"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[i] for i in [2, 8, 0, 4, 1, 9, 9, 0]]</span></span>
<span id="cb106-1481"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = linkage(X, 'ward')</span></span>
<span id="cb106-1482"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; print(Z)</span></span>
<span id="cb106-1483"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    [[ 5.          6.          0.          2.        ]</span></span>
<span id="cb106-1484"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     [ 2.          7.          0.          2.        ]</span></span>
<span id="cb106-1485"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     [ 0.          4.          1.          2.        ]</span></span>
<span id="cb106-1486"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     [ 1.          8.          1.15470054  3.        ]</span></span>
<span id="cb106-1487"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     [ 9.         10.          2.12132034  4.        ]</span></span>
<span id="cb106-1488"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     [ 3.         12.          4.11096096  5.        ]</span></span>
<span id="cb106-1489"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     [11.         13.         14.07183949  8.        ]]</span></span>
<span id="cb106-1490"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; inconsistent(Z)</span></span>
<span id="cb106-1491"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[ 0.        ,  0.        ,  1.        ,  0.        ],</span></span>
<span id="cb106-1492"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 0.        ,  0.        ,  1.        ,  0.        ],</span></span>
<span id="cb106-1493"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 1.        ,  0.        ,  1.        ,  0.        ],</span></span>
<span id="cb106-1494"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 0.57735027,  0.81649658,  2.        ,  0.70710678],</span></span>
<span id="cb106-1495"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 1.04044011,  1.06123822,  3.        ,  1.01850858],</span></span>
<span id="cb106-1496"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 3.11614065,  1.40688837,  2.        ,  0.70710678],</span></span>
<span id="cb106-1497"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 6.44583366,  6.76770586,  3.        ,  1.12682288]])</span></span>
<span id="cb106-1498"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-1499">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(Z, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-1500"></span>
<span id="cb106-1501">    Zs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.shape</span>
<span id="cb106-1502">    is_valid_linkage(Z, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>)</span>
<span id="cb106-1503">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> np.floor(d)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb106-1504">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The second argument d must be a nonnegative '</span></span>
<span id="cb106-1505">                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'integer value.'</span>)</span>
<span id="cb106-1506"></span>
<span id="cb106-1507">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Since the C code does not support striding using strides.</span></span>
<span id="cb106-1508">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The dimensions are used instead.</span></span>
<span id="cb106-1509">    [Z] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _copy_arrays_if_base_present([Z])</span>
<span id="cb106-1510"></span>
<span id="cb106-1511">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Zs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-1512">    R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.double)</span>
<span id="cb106-1513"></span>
<span id="cb106-1514">    _hierarchy.inconsistent(Z, R, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(d))</span>
<span id="cb106-1515">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> R</span>
<span id="cb106-1516"></span>
<span id="cb106-1517"></span>
<span id="cb106-1518"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> from_mlab_linkage(Z):</span>
<span id="cb106-1519">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-1520"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Convert a linkage matrix generated by MATLAB(TM) to a new</span></span>
<span id="cb106-1521"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage matrix compatible with this module.</span></span>
<span id="cb106-1522"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The conversion does two things:</span></span>
<span id="cb106-1523"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     * the indices are converted from ``1..N`` to ``0..(N-1)`` form,</span></span>
<span id="cb106-1524"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       and</span></span>
<span id="cb106-1525"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     * a fourth column ``Z[:,3]`` is added where ``Z[i,3]`` represents the</span></span>
<span id="cb106-1526"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       number of original observations (leaves) in the non-singleton</span></span>
<span id="cb106-1527"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       cluster ``i``.</span></span>
<span id="cb106-1528"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This function is useful when loading in linkages from legacy data</span></span>
<span id="cb106-1529"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    files generated by MATLAB.</span></span>
<span id="cb106-1530"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-1531"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-1532"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-1533"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A linkage matrix generated by MATLAB(TM).</span></span>
<span id="cb106-1534"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-1535"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-1536"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ZS : ndarray</span></span>
<span id="cb106-1537"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A linkage matrix compatible with ``scipy.cluster.hierarchy``.</span></span>
<span id="cb106-1538"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-1539"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-1540"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage: for a description of what a linkage matrix is.</span></span>
<span id="cb106-1541"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    to_mlab_linkage: transform from SciPy to MATLAB format.</span></span>
<span id="cb106-1542"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-1543"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-1544"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; import numpy as np</span></span>
<span id="cb106-1545"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import ward, from_mlab_linkage</span></span>
<span id="cb106-1546"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Given a linkage matrix in MATLAB format ``mZ``, we can use</span></span>
<span id="cb106-1547"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `scipy.cluster.hierarchy.from_mlab_linkage` to import</span></span>
<span id="cb106-1548"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    it into SciPy format:</span></span>
<span id="cb106-1549"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; mZ = np.array([[1, 2, 1], [4, 5, 1], [7, 8, 1],</span></span>
<span id="cb106-1550"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...                [10, 11, 1], [3, 13, 1.29099445],</span></span>
<span id="cb106-1551"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...                [6, 14, 1.29099445],</span></span>
<span id="cb106-1552"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...                [9, 15, 1.29099445],</span></span>
<span id="cb106-1553"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...                [12, 16, 1.29099445],</span></span>
<span id="cb106-1554"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...                [17, 18, 5.77350269],</span></span>
<span id="cb106-1555"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...                [19, 20, 5.77350269],</span></span>
<span id="cb106-1556"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...                [21, 22,  8.16496581]])</span></span>
<span id="cb106-1557"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = from_mlab_linkage(mZ)</span></span>
<span id="cb106-1558"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z</span></span>
<span id="cb106-1559"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[  0.        ,   1.        ,   1.        ,   2.        ],</span></span>
<span id="cb106-1560"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [  3.        ,   4.        ,   1.        ,   2.        ],</span></span>
<span id="cb106-1561"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [  6.        ,   7.        ,   1.        ,   2.        ],</span></span>
<span id="cb106-1562"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [  9.        ,  10.        ,   1.        ,   2.        ],</span></span>
<span id="cb106-1563"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [  2.        ,  12.        ,   1.29099445,   3.        ],</span></span>
<span id="cb106-1564"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [  5.        ,  13.        ,   1.29099445,   3.        ],</span></span>
<span id="cb106-1565"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [  8.        ,  14.        ,   1.29099445,   3.        ],</span></span>
<span id="cb106-1566"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 11.        ,  15.        ,   1.29099445,   3.        ],</span></span>
<span id="cb106-1567"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 16.        ,  17.        ,   5.77350269,   6.        ],</span></span>
<span id="cb106-1568"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 18.        ,  19.        ,   5.77350269,   6.        ],</span></span>
<span id="cb106-1569"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 20.        ,  21.        ,   8.16496581,  12.        ]])</span></span>
<span id="cb106-1570"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    As expected, the linkage matrix ``Z`` returned includes an</span></span>
<span id="cb106-1571"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    additional column counting the number of original samples in</span></span>
<span id="cb106-1572"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    each cluster. Also, all cluster indices are reduced by 1</span></span>
<span id="cb106-1573"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    (MATLAB format uses 1-indexing, whereas SciPy uses 0-indexing).</span></span>
<span id="cb106-1574"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-1575">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(Z, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.double, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-1576">    Zs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.shape</span>
<span id="cb106-1577"></span>
<span id="cb106-1578">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If it's empty, return it.</span></span>
<span id="cb106-1579">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(Zs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(Zs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> Zs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb106-1580">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Z.copy()</span>
<span id="cb106-1581"></span>
<span id="cb106-1582">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(Zs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb106-1583">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The linkage array must be rectangular."</span>)</span>
<span id="cb106-1584"></span>
<span id="cb106-1585">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If it contains no rows, return it.</span></span>
<span id="cb106-1586">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> Zs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb106-1587">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Z.copy()</span>
<span id="cb106-1588"></span>
<span id="cb106-1589">    Zpart <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.copy()</span>
<span id="cb106-1590">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> Zpart[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> Zpart[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Zs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]:</span>
<span id="cb106-1591">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The format of the indices is not 1..N'</span>)</span>
<span id="cb106-1592"></span>
<span id="cb106-1593">    Zpart[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb106-1594">    CS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((Zs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.double)</span>
<span id="cb106-1595">    _hierarchy.calculate_cluster_sizes(Zpart, CS, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Zs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb106-1596">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.hstack([Zpart, CS.reshape(Zs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)])</span>
<span id="cb106-1597"></span>
<span id="cb106-1598"></span>
<span id="cb106-1599"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> to_mlab_linkage(Z):</span>
<span id="cb106-1600">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-1601"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Convert a linkage matrix to a MATLAB(TM) compatible one.</span></span>
<span id="cb106-1602"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Converts a linkage matrix ``Z`` generated by the linkage function</span></span>
<span id="cb106-1603"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    of this module to a MATLAB(TM) compatible one. The return linkage</span></span>
<span id="cb106-1604"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    matrix has the last column removed and the cluster indices are</span></span>
<span id="cb106-1605"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    converted to ``1..N`` indexing.</span></span>
<span id="cb106-1606"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-1607"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-1608"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-1609"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A linkage matrix generated by ``scipy.cluster.hierarchy``.</span></span>
<span id="cb106-1610"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-1611"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-1612"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    to_mlab_linkage : ndarray</span></span>
<span id="cb106-1613"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A linkage matrix compatible with MATLAB(TM)'s hierarchical</span></span>
<span id="cb106-1614"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        clustering functions.</span></span>
<span id="cb106-1615"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The return linkage matrix has the last column removed</span></span>
<span id="cb106-1616"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        and the cluster indices are converted to ``1..N`` indexing.</span></span>
<span id="cb106-1617"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-1618"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-1619"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage: for a description of what a linkage matrix is.</span></span>
<span id="cb106-1620"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    from_mlab_linkage: transform from Matlab to SciPy format.</span></span>
<span id="cb106-1621"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-1622"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-1623"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import ward, to_mlab_linkage</span></span>
<span id="cb106-1624"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-1625"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-1626"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-1627"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-1628"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-1629"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = ward(pdist(X))</span></span>
<span id="cb106-1630"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z</span></span>
<span id="cb106-1631"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[ 0.        ,  1.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1632"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 3.        ,  4.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1633"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 6.        ,  7.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1634"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 9.        , 10.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1635"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 2.        , 12.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-1636"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 5.        , 13.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-1637"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 8.        , 14.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-1638"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [11.        , 15.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-1639"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [16.        , 17.        ,  5.77350269,  6.        ],</span></span>
<span id="cb106-1640"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [18.        , 19.        ,  5.77350269,  6.        ],</span></span>
<span id="cb106-1641"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [20.        , 21.        ,  8.16496581, 12.        ]])</span></span>
<span id="cb106-1642"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    After a linkage matrix ``Z`` has been created, we can use</span></span>
<span id="cb106-1643"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `scipy.cluster.hierarchy.to_mlab_linkage` to convert it</span></span>
<span id="cb106-1644"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    into MATLAB format:</span></span>
<span id="cb106-1645"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; mZ = to_mlab_linkage(Z)</span></span>
<span id="cb106-1646"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; mZ</span></span>
<span id="cb106-1647"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[  1.        ,   2.        ,   1.        ],</span></span>
<span id="cb106-1648"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [  4.        ,   5.        ,   1.        ],</span></span>
<span id="cb106-1649"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [  7.        ,   8.        ,   1.        ],</span></span>
<span id="cb106-1650"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 10.        ,  11.        ,   1.        ],</span></span>
<span id="cb106-1651"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [  3.        ,  13.        ,   1.29099445],</span></span>
<span id="cb106-1652"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [  6.        ,  14.        ,   1.29099445],</span></span>
<span id="cb106-1653"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [  9.        ,  15.        ,   1.29099445],</span></span>
<span id="cb106-1654"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 12.        ,  16.        ,   1.29099445],</span></span>
<span id="cb106-1655"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 17.        ,  18.        ,   5.77350269],</span></span>
<span id="cb106-1656"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 19.        ,  20.        ,   5.77350269],</span></span>
<span id="cb106-1657"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 21.        ,  22.        ,   8.16496581]])</span></span>
<span id="cb106-1658"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The new linkage matrix ``mZ`` uses 1-indexing for all the</span></span>
<span id="cb106-1659"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    clusters (instead of 0-indexing). Also, the last column of</span></span>
<span id="cb106-1660"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    the original linkage matrix has been dropped.</span></span>
<span id="cb106-1661"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-1662">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(Z, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.double)</span>
<span id="cb106-1663">    Zs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.shape</span>
<span id="cb106-1664">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(Zs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(Zs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> Zs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb106-1665">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> Z.copy()</span>
<span id="cb106-1666">    is_valid_linkage(Z, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>)</span>
<span id="cb106-1667"></span>
<span id="cb106-1668">    ZP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>].copy()</span>
<span id="cb106-1669">    ZP[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb106-1670"></span>
<span id="cb106-1671">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ZP</span>
<span id="cb106-1672"></span>
<span id="cb106-1673"></span>
<span id="cb106-1674"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_monotonic(Z):</span>
<span id="cb106-1675">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-1676"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return True if the linkage passed is monotonic.</span></span>
<span id="cb106-1677"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The linkage is monotonic if for every cluster :math:`s` and :math:`t`</span></span>
<span id="cb106-1678"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    joined, the distance between them is no less than the distance</span></span>
<span id="cb106-1679"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    between any previously joined clusters.</span></span>
<span id="cb106-1680"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-1681"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-1682"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-1683"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The linkage matrix to check for monotonicity.</span></span>
<span id="cb106-1684"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-1685"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-1686"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    b : bool</span></span>
<span id="cb106-1687"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A boolean indicating whether the linkage is monotonic.</span></span>
<span id="cb106-1688"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-1689"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-1690"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage: for a description of what a linkage matrix is.</span></span>
<span id="cb106-1691"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-1692"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-1693"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import median, ward, is_monotonic</span></span>
<span id="cb106-1694"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-1695"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    By definition, some hierarchical clustering algorithms - such as</span></span>
<span id="cb106-1696"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `scipy.cluster.hierarchy.ward` - produce monotonic assignments of</span></span>
<span id="cb106-1697"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    samples to clusters; however, this is not always true for other</span></span>
<span id="cb106-1698"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    hierarchical methods - e.g. `scipy.cluster.hierarchy.median`.</span></span>
<span id="cb106-1699"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Given a linkage matrix ``Z`` (as the result of a hierarchical clustering</span></span>
<span id="cb106-1700"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    method) we can test programmatically whether it has the monotonicity</span></span>
<span id="cb106-1701"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    property or not, using `scipy.cluster.hierarchy.is_monotonic`:</span></span>
<span id="cb106-1702"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-1703"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-1704"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-1705"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-1706"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = ward(pdist(X))</span></span>
<span id="cb106-1707"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z</span></span>
<span id="cb106-1708"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[ 0.        ,  1.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1709"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 3.        ,  4.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1710"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 6.        ,  7.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1711"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 9.        , 10.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1712"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 2.        , 12.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-1713"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 5.        , 13.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-1714"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 8.        , 14.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-1715"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [11.        , 15.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-1716"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [16.        , 17.        ,  5.77350269,  6.        ],</span></span>
<span id="cb106-1717"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [18.        , 19.        ,  5.77350269,  6.        ],</span></span>
<span id="cb106-1718"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [20.        , 21.        ,  8.16496581, 12.        ]])</span></span>
<span id="cb106-1719"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; is_monotonic(Z)</span></span>
<span id="cb106-1720"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    True</span></span>
<span id="cb106-1721"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = median(pdist(X))</span></span>
<span id="cb106-1722"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z</span></span>
<span id="cb106-1723"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[ 0.        ,  1.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1724"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 3.        ,  4.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1725"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 9.        , 10.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1726"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 6.        ,  7.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1727"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 2.        , 12.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-1728"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 5.        , 13.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-1729"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 8.        , 15.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-1730"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [11.        , 14.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-1731"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [18.        , 19.        ,  3.        ,  6.        ],</span></span>
<span id="cb106-1732"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [16.        , 17.        ,  3.5       ,  6.        ],</span></span>
<span id="cb106-1733"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [20.        , 21.        ,  3.25      , 12.        ]])</span></span>
<span id="cb106-1734"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; is_monotonic(Z)</span></span>
<span id="cb106-1735"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    False</span></span>
<span id="cb106-1736"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Note that this method is equivalent to just verifying that the distances</span></span>
<span id="cb106-1737"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    in the third column of the linkage matrix appear in a monotonically</span></span>
<span id="cb106-1738"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    increasing order.</span></span>
<span id="cb106-1739"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-1740">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(Z, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-1741">    is_valid_linkage(Z, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>)</span>
<span id="cb106-1742"></span>
<span id="cb106-1743">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We expect the i'th value to be greater than its successor.</span></span>
<span id="cb106-1744">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (Z[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> Z[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>()</span>
<span id="cb106-1745"></span>
<span id="cb106-1746"></span>
<span id="cb106-1747"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_valid_im(R, warning<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb106-1748">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Return True if the inconsistency matrix passed is valid.</span></span>
<span id="cb106-1749"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    It must be a :math:`n` by 4 array of doubles. The standard</span></span>
<span id="cb106-1750"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    deviations ``R[:,1]`` must be nonnegative. The link counts</span></span>
<span id="cb106-1751"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ``R[:,2]`` must be positive and no greater than :math:`n-1`.</span></span>
<span id="cb106-1752"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-1753"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-1754"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    R : ndarray</span></span>
<span id="cb106-1755"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The inconsistency matrix to check for validity.</span></span>
<span id="cb106-1756"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    warning : bool, optional</span></span>
<span id="cb106-1757"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         When True, issues a Python warning if the linkage</span></span>
<span id="cb106-1758"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         matrix passed is invalid.</span></span>
<span id="cb106-1759"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    throw : bool, optional</span></span>
<span id="cb106-1760"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         When True, throws a Python exception if the linkage</span></span>
<span id="cb106-1761"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         matrix passed is invalid.</span></span>
<span id="cb106-1762"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    name : str, optional</span></span>
<span id="cb106-1763"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         This string refers to the variable name of the invalid</span></span>
<span id="cb106-1764"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         linkage matrix.</span></span>
<span id="cb106-1765"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-1766"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-1767"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    b : bool</span></span>
<span id="cb106-1768"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        True if the inconsistency matrix is valid.</span></span>
<span id="cb106-1769"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-1770"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-1771"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage: for a description of what a linkage matrix is.</span></span>
<span id="cb106-1772"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    inconsistent: for the creation of a inconsistency matrix.</span></span>
<span id="cb106-1773"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-1774"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-1775"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import ward, inconsistent, is_valid_im</span></span>
<span id="cb106-1776"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-1777"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Given a data set ``X``, we can apply a clustering method to obtain a</span></span>
<span id="cb106-1778"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage matrix ``Z``. `scipy.cluster.hierarchy.inconsistent` can</span></span>
<span id="cb106-1779"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    be also used to obtain the inconsistency matrix ``R`` associated to</span></span>
<span id="cb106-1780"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    this clustering process:</span></span>
<span id="cb106-1781"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-1782"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-1783"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-1784"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-1785"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = ward(pdist(X))</span></span>
<span id="cb106-1786"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; R = inconsistent(Z)</span></span>
<span id="cb106-1787"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z</span></span>
<span id="cb106-1788"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[ 0.        ,  1.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1789"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 3.        ,  4.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1790"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 6.        ,  7.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1791"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 9.        , 10.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1792"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 2.        , 12.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-1793"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 5.        , 13.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-1794"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 8.        , 14.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-1795"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [11.        , 15.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-1796"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [16.        , 17.        ,  5.77350269,  6.        ],</span></span>
<span id="cb106-1797"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [18.        , 19.        ,  5.77350269,  6.        ],</span></span>
<span id="cb106-1798"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [20.        , 21.        ,  8.16496581, 12.        ]])</span></span>
<span id="cb106-1799"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; R</span></span>
<span id="cb106-1800"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[1.        , 0.        , 1.        , 0.        ],</span></span>
<span id="cb106-1801"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.        , 0.        , 1.        , 0.        ],</span></span>
<span id="cb106-1802"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.        , 0.        , 1.        , 0.        ],</span></span>
<span id="cb106-1803"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.        , 0.        , 1.        , 0.        ],</span></span>
<span id="cb106-1804"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.14549722, 0.20576415, 2.        , 0.70710678],</span></span>
<span id="cb106-1805"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.14549722, 0.20576415, 2.        , 0.70710678],</span></span>
<span id="cb106-1806"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.14549722, 0.20576415, 2.        , 0.70710678],</span></span>
<span id="cb106-1807"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.14549722, 0.20576415, 2.        , 0.70710678],</span></span>
<span id="cb106-1808"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [2.78516386, 2.58797734, 3.        , 1.15470054],</span></span>
<span id="cb106-1809"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [2.78516386, 2.58797734, 3.        , 1.15470054],</span></span>
<span id="cb106-1810"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [6.57065706, 1.38071187, 3.        , 1.15470054]])</span></span>
<span id="cb106-1811"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Now we can use `scipy.cluster.hierarchy.is_valid_im` to verify that</span></span>
<span id="cb106-1812"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ``R`` is correct:</span></span>
<span id="cb106-1813"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; is_valid_im(R)</span></span>
<span id="cb106-1814"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    True</span></span>
<span id="cb106-1815"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    However, if ``R`` is wrongly constructed (e.g., one of the standard</span></span>
<span id="cb106-1816"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    deviations is set to a negative value), then the check will fail:</span></span>
<span id="cb106-1817"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; R[-1,1] = R[-1,1] * -1</span></span>
<span id="cb106-1818"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; is_valid_im(R)</span></span>
<span id="cb106-1819"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    False</span></span>
<span id="cb106-1820"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-1821">    R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(R, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-1822">    valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb106-1823">    name_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%r</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb106-1824">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb106-1825">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(R) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> np.ndarray:</span>
<span id="cb106-1826">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Variable </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">passed as inconsistency matrix is not '</span></span>
<span id="cb106-1827">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a numpy array.'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> name_str)</span>
<span id="cb106-1828">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> R.dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> np.double:</span>
<span id="cb106-1829">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inconsistency matrix </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">must contain doubles '</span></span>
<span id="cb106-1830">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'(double).'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> name_str)</span>
<span id="cb106-1831">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(R.shape) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb106-1832">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inconsistency matrix </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">must have shape=2 (i.e. '</span></span>
<span id="cb106-1833">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'be two-dimensional).'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> name_str)</span>
<span id="cb106-1834">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> R.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:</span>
<span id="cb106-1835">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inconsistency matrix </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">must have 4 columns.'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span></span>
<span id="cb106-1836">                             name_str)</span>
<span id="cb106-1837">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> R.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb106-1838">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inconsistency matrix </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">must have at least one '</span></span>
<span id="cb106-1839">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'row.'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> name_str)</span>
<span id="cb106-1840">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (R[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>():</span>
<span id="cb106-1841">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inconsistency matrix </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">contains negative link '</span></span>
<span id="cb106-1842">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height means.'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> name_str)</span>
<span id="cb106-1843">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (R[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>():</span>
<span id="cb106-1844">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inconsistency matrix </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">contains negative link '</span></span>
<span id="cb106-1845">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height standard deviations.'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> name_str)</span>
<span id="cb106-1846">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (R[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>():</span>
<span id="cb106-1847">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inconsistency matrix </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">contains negative link '</span></span>
<span id="cb106-1848">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts.'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> name_str)</span>
<span id="cb106-1849">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb106-1850">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> throw:</span>
<span id="cb106-1851">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span></span>
<span id="cb106-1852">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> warning:</span>
<span id="cb106-1853">            _warning(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(e))</span>
<span id="cb106-1854">        valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb106-1855"></span>
<span id="cb106-1856">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> valid</span>
<span id="cb106-1857"></span>
<span id="cb106-1858"></span>
<span id="cb106-1859"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_valid_linkage(Z, warning<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb106-1860">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-1861"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Check the validity of a linkage matrix.</span></span>
<span id="cb106-1862"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A linkage matrix is valid if it is a 2-D array (type double)</span></span>
<span id="cb106-1863"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    with :math:`n` rows and 4 columns. The first two columns must contain</span></span>
<span id="cb106-1864"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    indices between 0 and :math:`2n-1`. For a given row ``i``, the following</span></span>
<span id="cb106-1865"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    two expressions have to hold:</span></span>
<span id="cb106-1866"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    .. math::</span></span>
<span id="cb106-1867"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        0 </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">leq </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">mathtt{Z[i,0]} </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">leq i+n-1</span></span>
<span id="cb106-1868"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        0 </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">leq Z[i,1] </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">leq i+n-1</span></span>
<span id="cb106-1869"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    I.e., a cluster cannot join another cluster unless the cluster being joined</span></span>
<span id="cb106-1870"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    has been generated.</span></span>
<span id="cb106-1871"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-1872"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-1873"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : array_like</span></span>
<span id="cb106-1874"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Linkage matrix.</span></span>
<span id="cb106-1875"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    warning : bool, optional</span></span>
<span id="cb106-1876"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        When True, issues a Python warning if the linkage</span></span>
<span id="cb106-1877"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        matrix passed is invalid.</span></span>
<span id="cb106-1878"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    throw : bool, optional</span></span>
<span id="cb106-1879"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        When True, throws a Python exception if the linkage</span></span>
<span id="cb106-1880"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        matrix passed is invalid.</span></span>
<span id="cb106-1881"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    name : str, optional</span></span>
<span id="cb106-1882"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        This string refers to the variable name of the invalid</span></span>
<span id="cb106-1883"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        linkage matrix.</span></span>
<span id="cb106-1884"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-1885"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-1886"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    b : bool</span></span>
<span id="cb106-1887"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        True if the inconsistency matrix is valid.</span></span>
<span id="cb106-1888"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-1889"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-1890"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage: for a description of what a linkage matrix is.</span></span>
<span id="cb106-1891"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-1892"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-1893"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import ward, is_valid_linkage</span></span>
<span id="cb106-1894"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-1895"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    All linkage matrices generated by the clustering methods in this module</span></span>
<span id="cb106-1896"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    will be valid (i.e., they will have the appropriate dimensions and the two</span></span>
<span id="cb106-1897"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    required expressions will hold for all the rows).</span></span>
<span id="cb106-1898"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    We can check this using `scipy.cluster.hierarchy.is_valid_linkage`:</span></span>
<span id="cb106-1899"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-1900"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-1901"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-1902"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-1903"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = ward(pdist(X))</span></span>
<span id="cb106-1904"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z</span></span>
<span id="cb106-1905"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[ 0.        ,  1.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1906"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 3.        ,  4.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1907"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 6.        ,  7.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1908"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 9.        , 10.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-1909"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 2.        , 12.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-1910"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 5.        , 13.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-1911"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 8.        , 14.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-1912"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [11.        , 15.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-1913"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [16.        , 17.        ,  5.77350269,  6.        ],</span></span>
<span id="cb106-1914"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [18.        , 19.        ,  5.77350269,  6.        ],</span></span>
<span id="cb106-1915"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [20.        , 21.        ,  8.16496581, 12.        ]])</span></span>
<span id="cb106-1916"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; is_valid_linkage(Z)</span></span>
<span id="cb106-1917"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    True</span></span>
<span id="cb106-1918"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    However, if we create a linkage matrix in a wrong way - or if we modify</span></span>
<span id="cb106-1919"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    a valid one in a way that any of the required expressions don't hold</span></span>
<span id="cb106-1920"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    anymore, then the check will fail:</span></span>
<span id="cb106-1921"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z[3][1] = 20    # the cluster number 20 is not defined at this point</span></span>
<span id="cb106-1922"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; is_valid_linkage(Z)</span></span>
<span id="cb106-1923"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    False</span></span>
<span id="cb106-1924"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-1925">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(Z, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-1926">    valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb106-1927">    name_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%r</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb106-1928">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb106-1929">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(Z) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> np.ndarray:</span>
<span id="cb106-1930">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Passed linkage argument </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">is not a valid array.'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span></span>
<span id="cb106-1931">                            name_str)</span>
<span id="cb106-1932">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> Z.dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> np.double:</span>
<span id="cb106-1933">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Linkage matrix </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">must contain doubles.'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> name_str)</span>
<span id="cb106-1934">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(Z.shape) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb106-1935">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Linkage matrix </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">must have shape=2 (i.e. be '</span></span>
<span id="cb106-1936">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'two-dimensional).'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> name_str)</span>
<span id="cb106-1937">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> Z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:</span>
<span id="cb106-1938">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Linkage matrix </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">must have 4 columns.'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> name_str)</span>
<span id="cb106-1939">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> Z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb106-1940">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Linkage must be computed on at least two '</span></span>
<span id="cb106-1941">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'observations.'</span>)</span>
<span id="cb106-1942">        n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb106-1943">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb106-1944">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((Z[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>() <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> (Z[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>()):</span>
<span id="cb106-1945">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Linkage </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">contains negative indices.'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span></span>
<span id="cb106-1946">                                 name_str)</span>
<span id="cb106-1947">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (Z[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>():</span>
<span id="cb106-1948">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Linkage </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">contains negative distances.'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span></span>
<span id="cb106-1949">                                 name_str)</span>
<span id="cb106-1950">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (Z[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>():</span>
<span id="cb106-1951">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Linkage </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">contains negative counts.'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span></span>
<span id="cb106-1952">                                 name_str)</span>
<span id="cb106-1953">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> _check_hierarchy_uses_cluster_before_formed(Z):</span>
<span id="cb106-1954">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Linkage </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">uses non-singleton cluster before '</span></span>
<span id="cb106-1955">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'it is formed.'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> name_str)</span>
<span id="cb106-1956">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> _check_hierarchy_uses_cluster_more_than_once(Z):</span>
<span id="cb106-1957">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Linkage </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">uses the same cluster more than once.'</span></span>
<span id="cb106-1958">                             <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> name_str)</span>
<span id="cb106-1959">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb106-1960">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> throw:</span>
<span id="cb106-1961">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span></span>
<span id="cb106-1962">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> warning:</span>
<span id="cb106-1963">            _warning(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(e))</span>
<span id="cb106-1964">        valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb106-1965"></span>
<span id="cb106-1966">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> valid</span>
<span id="cb106-1967"></span>
<span id="cb106-1968"></span>
<span id="cb106-1969"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _check_hierarchy_uses_cluster_before_formed(Z):</span>
<span id="cb106-1970">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-1971">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb106-1972">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> Z[i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> Z[i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i:</span>
<span id="cb106-1973">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb106-1974">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb106-1975"></span>
<span id="cb106-1976"></span>
<span id="cb106-1977"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _check_hierarchy_uses_cluster_more_than_once(Z):</span>
<span id="cb106-1978">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-1979">    chosen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>([])</span>
<span id="cb106-1980">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb106-1981">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (Z[i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chosen) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> (Z[i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chosen) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> Z[i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> Z[i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:</span>
<span id="cb106-1982">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb106-1983">        chosen.add(Z[i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb106-1984">        chosen.add(Z[i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb106-1985">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb106-1986"></span>
<span id="cb106-1987"></span>
<span id="cb106-1988"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _check_hierarchy_not_all_clusters_used(Z):</span>
<span id="cb106-1989">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-1990">    chosen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>([])</span>
<span id="cb106-1991">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb106-1992">        chosen.add(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Z[i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span>
<span id="cb106-1993">        chosen.add(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Z[i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb106-1994">    must_chosen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb106-1995">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(must_chosen.difference(chosen)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb106-1996"></span>
<span id="cb106-1997"></span>
<span id="cb106-1998"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> num_obs_linkage(Z):</span>
<span id="cb106-1999">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-2000"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return the number of original observations of the linkage matrix passed.</span></span>
<span id="cb106-2001"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-2002"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-2003"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-2004"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The linkage matrix on which to perform the operation.</span></span>
<span id="cb106-2005"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-2006"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-2007"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    n : int</span></span>
<span id="cb106-2008"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The number of original observations in the linkage.</span></span>
<span id="cb106-2009"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-2010"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-2011"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import ward, num_obs_linkage</span></span>
<span id="cb106-2012"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-2013"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-2014"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-2015"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-2016"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-2017"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = ward(pdist(X))</span></span>
<span id="cb106-2018"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ``Z`` is a linkage matrix obtained after using the Ward clustering method</span></span>
<span id="cb106-2019"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    with ``X``, a dataset with 12 data points.</span></span>
<span id="cb106-2020"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; num_obs_linkage(Z)</span></span>
<span id="cb106-2021"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    12</span></span>
<span id="cb106-2022"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-2023">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(Z, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-2024">    is_valid_linkage(Z, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>)</span>
<span id="cb106-2025">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (Z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb106-2026"></span>
<span id="cb106-2027"></span>
<span id="cb106-2028"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> correspond(Z, Y):</span>
<span id="cb106-2029">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-2030"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Check for correspondence between linkage and condensed distance matrices.</span></span>
<span id="cb106-2031"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    They must have the same number of original observations for</span></span>
<span id="cb106-2032"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    the check to succeed.</span></span>
<span id="cb106-2033"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This function is useful as a sanity check in algorithms that make</span></span>
<span id="cb106-2034"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    extensive use of linkage and distance matrices that must</span></span>
<span id="cb106-2035"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    correspond to the same set of original observations.</span></span>
<span id="cb106-2036"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-2037"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-2038"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : array_like</span></span>
<span id="cb106-2039"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The linkage matrix to check for correspondence.</span></span>
<span id="cb106-2040"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Y : array_like</span></span>
<span id="cb106-2041"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The condensed distance matrix to check for correspondence.</span></span>
<span id="cb106-2042"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-2043"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-2044"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    b : bool</span></span>
<span id="cb106-2045"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A boolean indicating whether the linkage matrix and distance</span></span>
<span id="cb106-2046"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        matrix could possibly correspond to one another.</span></span>
<span id="cb106-2047"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-2048"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-2049"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage: for a description of what a linkage matrix is.</span></span>
<span id="cb106-2050"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-2051"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-2052"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import ward, correspond</span></span>
<span id="cb106-2053"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-2054"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This method can be used to check if a given linkage matrix ``Z`` has been</span></span>
<span id="cb106-2055"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    obtained from the application of a cluster method over a dataset ``X``:</span></span>
<span id="cb106-2056"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-2057"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-2058"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-2059"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-2060"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X_condensed = pdist(X)</span></span>
<span id="cb106-2061"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = ward(X_condensed)</span></span>
<span id="cb106-2062"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Here, we can compare ``Z`` and ``X`` (in condensed form):</span></span>
<span id="cb106-2063"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; correspond(Z, X_condensed)</span></span>
<span id="cb106-2064"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    True</span></span>
<span id="cb106-2065"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-2066">    is_valid_linkage(Z, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb106-2067">    distance.is_valid_y(Y, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb106-2068">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(Z, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-2069">    Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(Y, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-2070">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> distance.num_obs_y(Y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> num_obs_linkage(Z)</span>
<span id="cb106-2071"></span>
<span id="cb106-2072"></span>
<span id="cb106-2073"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fcluster(Z, t, criterion<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inconsistent'</span>, depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, monocrit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb106-2074">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-2075"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Form flat clusters from the hierarchical clustering defined by</span></span>
<span id="cb106-2076"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    the given linkage matrix.</span></span>
<span id="cb106-2077"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-2078"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-2079"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-2080"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The hierarchical clustering encoded with the matrix returned</span></span>
<span id="cb106-2081"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        by the `linkage` function.</span></span>
<span id="cb106-2082"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    t : scalar</span></span>
<span id="cb106-2083"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        For criteria 'inconsistent', 'distance' or 'monocrit',</span></span>
<span id="cb106-2084"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         this is the threshold to apply when forming flat clusters.</span></span>
<span id="cb106-2085"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        For 'maxclust' or 'maxclust_monocrit' criteria,</span></span>
<span id="cb106-2086"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         this would be max number of clusters requested.</span></span>
<span id="cb106-2087"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    criterion : str, optional</span></span>
<span id="cb106-2088"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The criterion to use in forming flat clusters. This can</span></span>
<span id="cb106-2089"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        be any of the following values:</span></span>
<span id="cb106-2090"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          ``inconsistent`` :</span></span>
<span id="cb106-2091"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              If a cluster node and all its</span></span>
<span id="cb106-2092"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              descendants have an inconsistent value less than or equal</span></span>
<span id="cb106-2093"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              to `t`, then all its leaf descendants belong to the</span></span>
<span id="cb106-2094"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              same flat cluster. When no non-singleton cluster meets</span></span>
<span id="cb106-2095"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              this criterion, every node is assigned to its own</span></span>
<span id="cb106-2096"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              cluster. (Default)</span></span>
<span id="cb106-2097"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          ``distance`` :</span></span>
<span id="cb106-2098"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              Forms flat clusters so that the original</span></span>
<span id="cb106-2099"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              observations in each flat cluster have no greater a</span></span>
<span id="cb106-2100"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              cophenetic distance than `t`.</span></span>
<span id="cb106-2101"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          ``maxclust`` :</span></span>
<span id="cb106-2102"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              Finds a minimum threshold ``r`` so that</span></span>
<span id="cb106-2103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              the cophenetic distance between any two original</span></span>
<span id="cb106-2104"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              observations in the same flat cluster is no more than</span></span>
<span id="cb106-2105"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              ``r`` and no more than `t` flat clusters are formed.</span></span>
<span id="cb106-2106"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          ``monocrit`` :</span></span>
<span id="cb106-2107"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              Forms a flat cluster from a cluster node c</span></span>
<span id="cb106-2108"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              with index i when ``monocrit[j] &lt;= t``.</span></span>
<span id="cb106-2109"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              For example, to threshold on the maximum mean distance</span></span>
<span id="cb106-2110"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              as computed in the inconsistency matrix R with a</span></span>
<span id="cb106-2111"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              threshold of 0.8 do::</span></span>
<span id="cb106-2112"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  MR = maxRstat(Z, R, 3)</span></span>
<span id="cb106-2113"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  fcluster(Z, t=0.8, criterion='monocrit', monocrit=MR)</span></span>
<span id="cb106-2114"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          ``maxclust_monocrit`` :</span></span>
<span id="cb106-2115"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              Forms a flat cluster from a</span></span>
<span id="cb106-2116"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              non-singleton cluster node ``c`` when ``monocrit[i] &lt;=</span></span>
<span id="cb106-2117"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              r`` for all cluster indices ``i`` below and including</span></span>
<span id="cb106-2118"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              ``c``. ``r`` is minimized such that no more than ``t``</span></span>
<span id="cb106-2119"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              flat clusters are formed. monocrit must be</span></span>
<span id="cb106-2120"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              monotonic. For example, to minimize the threshold t on</span></span>
<span id="cb106-2121"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              maximum inconsistency values so that no more than 3 flat</span></span>
<span id="cb106-2122"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">              clusters are formed, do::</span></span>
<span id="cb106-2123"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  MI = maxinconsts(Z, R)</span></span>
<span id="cb106-2124"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  fcluster(Z, t=3, criterion='maxclust_monocrit', monocrit=MI)</span></span>
<span id="cb106-2125"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    depth : int, optional</span></span>
<span id="cb106-2126"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The maximum depth to perform the inconsistency calculation.</span></span>
<span id="cb106-2127"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        It has no meaning for the other criteria. Default is 2.</span></span>
<span id="cb106-2128"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    R : ndarray, optional</span></span>
<span id="cb106-2129"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The inconsistency matrix to use for the 'inconsistent'</span></span>
<span id="cb106-2130"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        criterion. This matrix is computed if not provided.</span></span>
<span id="cb106-2131"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    monocrit : ndarray, optional</span></span>
<span id="cb106-2132"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        An array of length n-1. `monocrit[i]` is the</span></span>
<span id="cb106-2133"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        statistics upon which non-singleton i is thresholded. The</span></span>
<span id="cb106-2134"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        monocrit vector must be monotonic, i.e., given a node c with</span></span>
<span id="cb106-2135"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        index i, for all node indices j corresponding to nodes</span></span>
<span id="cb106-2136"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        below c, ``monocrit[i] &gt;= monocrit[j]``.</span></span>
<span id="cb106-2137"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-2138"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-2139"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    fcluster : ndarray</span></span>
<span id="cb106-2140"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        An array of length ``n``. ``T[i]`` is the flat cluster number to</span></span>
<span id="cb106-2141"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        which original observation ``i`` belongs.</span></span>
<span id="cb106-2142"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-2143"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-2144"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage : for information about hierarchical clustering methods work.</span></span>
<span id="cb106-2145"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-2146"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-2147"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import ward, fcluster</span></span>
<span id="cb106-2148"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-2149"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    All cluster linkage methods - e.g., `scipy.cluster.hierarchy.ward`</span></span>
<span id="cb106-2150"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    generate a linkage matrix ``Z`` as their output:</span></span>
<span id="cb106-2151"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-2152"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-2153"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-2154"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-2155"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = ward(pdist(X))</span></span>
<span id="cb106-2156"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z</span></span>
<span id="cb106-2157"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[ 0.        ,  1.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-2158"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 3.        ,  4.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-2159"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 6.        ,  7.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-2160"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 9.        , 10.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-2161"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 2.        , 12.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-2162"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 5.        , 13.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-2163"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 8.        , 14.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-2164"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [11.        , 15.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-2165"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [16.        , 17.        ,  5.77350269,  6.        ],</span></span>
<span id="cb106-2166"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [18.        , 19.        ,  5.77350269,  6.        ],</span></span>
<span id="cb106-2167"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [20.        , 21.        ,  8.16496581, 12.        ]])</span></span>
<span id="cb106-2168"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This matrix represents a dendrogram, where the first and second elements</span></span>
<span id="cb106-2169"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    are the two clusters merged at each step, the third element is the</span></span>
<span id="cb106-2170"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    distance between these clusters, and the fourth element is the size of</span></span>
<span id="cb106-2171"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    the new cluster - the number of original data points included.</span></span>
<span id="cb106-2172"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `scipy.cluster.hierarchy.fcluster` can be used to flatten the</span></span>
<span id="cb106-2173"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    dendrogram, obtaining as a result an assignation of the original data</span></span>
<span id="cb106-2174"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    points to single clusters.</span></span>
<span id="cb106-2175"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This assignation mostly depends on a distance threshold ``t`` - the maximum</span></span>
<span id="cb106-2176"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    inter-cluster distance allowed:</span></span>
<span id="cb106-2177"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, t=0.9, criterion='distance')</span></span>
<span id="cb106-2178"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12], dtype=int32)</span></span>
<span id="cb106-2179"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, t=1.1, criterion='distance')</span></span>
<span id="cb106-2180"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8], dtype=int32)</span></span>
<span id="cb106-2181"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, t=3, criterion='distance')</span></span>
<span id="cb106-2182"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4], dtype=int32)</span></span>
<span id="cb106-2183"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fcluster(Z, t=9, criterion='distance')</span></span>
<span id="cb106-2184"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=int32)</span></span>
<span id="cb106-2185"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    In the first case, the threshold ``t`` is too small to allow any two</span></span>
<span id="cb106-2186"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    samples in the data to form a cluster, so 12 different clusters are</span></span>
<span id="cb106-2187"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    returned.</span></span>
<span id="cb106-2188"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    In the second case, the threshold is large enough to allow the first</span></span>
<span id="cb106-2189"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    4 points to be merged with their nearest neighbors. So, here, only 8</span></span>
<span id="cb106-2190"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    clusters are returned.</span></span>
<span id="cb106-2191"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The third case, with a much higher threshold, allows for up to 8 data</span></span>
<span id="cb106-2192"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    points to be connected - so 4 clusters are returned here.</span></span>
<span id="cb106-2193"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Lastly, the threshold of the fourth case is large enough to allow for</span></span>
<span id="cb106-2194"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    all data points to be merged together - so a single cluster is returned.</span></span>
<span id="cb106-2195"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-2196">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(Z, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-2197">    is_valid_linkage(Z, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>)</span>
<span id="cb106-2198"></span>
<span id="cb106-2199">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-2200">    T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((n,), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'i'</span>)</span>
<span id="cb106-2201"></span>
<span id="cb106-2202">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Since the C code does not support striding using strides.</span></span>
<span id="cb106-2203">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The dimensions are used instead.</span></span>
<span id="cb106-2204">    [Z] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _copy_arrays_if_base_present([Z])</span>
<span id="cb106-2205"></span>
<span id="cb106-2206">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inconsistent'</span>:</span>
<span id="cb106-2207">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> R <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-2208">            R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inconsistent(Z, depth)</span>
<span id="cb106-2209">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-2210">            R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(R, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-2211">            is_valid_im(R, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'R'</span>)</span>
<span id="cb106-2212">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Since the C code does not support striding using strides.</span></span>
<span id="cb106-2213">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The dimensions are used instead.</span></span>
<span id="cb106-2214">            [R] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _copy_arrays_if_base_present([R])</span>
<span id="cb106-2215">        _hierarchy.cluster_in(Z, R, T, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(t), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n))</span>
<span id="cb106-2216">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>:</span>
<span id="cb106-2217">        _hierarchy.cluster_dist(Z, T, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(t), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n))</span>
<span id="cb106-2218">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'maxclust'</span>:</span>
<span id="cb106-2219">        _hierarchy.cluster_maxclust_dist(Z, T, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(t))</span>
<span id="cb106-2220">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'monocrit'</span>:</span>
<span id="cb106-2221">        [monocrit] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _copy_arrays_if_base_present([monocrit])</span>
<span id="cb106-2222">        _hierarchy.cluster_monocrit(Z, monocrit, T, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(t), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n))</span>
<span id="cb106-2223">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> criterion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'maxclust_monocrit'</span>:</span>
<span id="cb106-2224">        [monocrit] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _copy_arrays_if_base_present([monocrit])</span>
<span id="cb106-2225">        _hierarchy.cluster_maxclust_monocrit(Z, monocrit, T, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(t))</span>
<span id="cb106-2226">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-2227">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Invalid cluster formation criterion: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb106-2228">                         <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(criterion))</span>
<span id="cb106-2229">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> T</span>
<span id="cb106-2230"></span>
<span id="cb106-2231"></span>
<span id="cb106-2232"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fclusterdata(X, t, criterion<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inconsistent'</span>,</span>
<span id="cb106-2233">                 metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'euclidean'</span>, depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'single'</span>, R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb106-2234">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-2235"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Cluster observation data using a given metric.</span></span>
<span id="cb106-2236"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Clusters the original observations in the n-by-m data</span></span>
<span id="cb106-2237"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    matrix X (n observations in m dimensions), using the euclidean</span></span>
<span id="cb106-2238"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    distance metric to calculate distances between original observations,</span></span>
<span id="cb106-2239"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    performs hierarchical clustering using the single linkage algorithm,</span></span>
<span id="cb106-2240"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    and forms flat clusters using the inconsistency method with `t` as the</span></span>
<span id="cb106-2241"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    cut-off threshold.</span></span>
<span id="cb106-2242"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A 1-D array ``T`` of length ``n`` is returned. ``T[i]`` is</span></span>
<span id="cb106-2243"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    the index of the flat cluster to which the original observation ``i``</span></span>
<span id="cb106-2244"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    belongs.</span></span>
<span id="cb106-2245"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-2246"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-2247"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    X : (N, M) ndarray</span></span>
<span id="cb106-2248"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        N by M data matrix with N observations in M dimensions.</span></span>
<span id="cb106-2249"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    t : scalar</span></span>
<span id="cb106-2250"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        For criteria 'inconsistent', 'distance' or 'monocrit',</span></span>
<span id="cb106-2251"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         this is the threshold to apply when forming flat clusters.</span></span>
<span id="cb106-2252"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        For 'maxclust' or 'maxclust_monocrit' criteria,</span></span>
<span id="cb106-2253"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         this would be max number of clusters requested.</span></span>
<span id="cb106-2254"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    criterion : str, optional</span></span>
<span id="cb106-2255"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Specifies the criterion for forming flat clusters. Valid</span></span>
<span id="cb106-2256"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        values are 'inconsistent' (default), 'distance', or 'maxclust'</span></span>
<span id="cb106-2257"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        cluster formation algorithms. See `fcluster` for descriptions.</span></span>
<span id="cb106-2258"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    metric : str or function, optional</span></span>
<span id="cb106-2259"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The distance metric for calculating pairwise distances. See</span></span>
<span id="cb106-2260"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``distance.pdist`` for descriptions and linkage to verify</span></span>
<span id="cb106-2261"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        compatibility with the linkage method.</span></span>
<span id="cb106-2262"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    depth : int, optional</span></span>
<span id="cb106-2263"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The maximum depth for the inconsistency calculation. See</span></span>
<span id="cb106-2264"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        `inconsistent` for more information.</span></span>
<span id="cb106-2265"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    method : str, optional</span></span>
<span id="cb106-2266"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The linkage method to use (single, complete, average,</span></span>
<span id="cb106-2267"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        weighted, median centroid, ward). See `linkage` for more</span></span>
<span id="cb106-2268"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        information. Default is "single".</span></span>
<span id="cb106-2269"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    R : ndarray, optional</span></span>
<span id="cb106-2270"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The inconsistency matrix. It will be computed if necessary</span></span>
<span id="cb106-2271"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        if it is not passed.</span></span>
<span id="cb106-2272"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-2273"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-2274"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    fclusterdata : ndarray</span></span>
<span id="cb106-2275"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A vector of length n. T[i] is the flat cluster number to</span></span>
<span id="cb106-2276"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        which original observation i belongs.</span></span>
<span id="cb106-2277"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-2278"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-2279"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    scipy.spatial.distance.pdist : pairwise distance metrics</span></span>
<span id="cb106-2280"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Notes</span></span>
<span id="cb106-2281"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -----</span></span>
<span id="cb106-2282"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This function is similar to the MATLAB function ``clusterdata``.</span></span>
<span id="cb106-2283"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-2284"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-2285"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import fclusterdata</span></span>
<span id="cb106-2286"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This is a convenience method that abstracts all the steps to perform in a</span></span>
<span id="cb106-2287"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    typical SciPy's hierarchical clustering workflow.</span></span>
<span id="cb106-2288"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    * Transform the input data into a condensed matrix with `scipy.spatial.distance.pdist`.</span></span>
<span id="cb106-2289"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    * Apply a clustering method.</span></span>
<span id="cb106-2290"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    * Obtain flat clusters at a user defined distance threshold ``t`` using `scipy.cluster.hierarchy.fcluster`.</span></span>
<span id="cb106-2291"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-2292"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-2293"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-2294"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-2295"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fclusterdata(X, t=1)</span></span>
<span id="cb106-2296"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([3, 3, 3, 4, 4, 4, 2, 2, 2, 1, 1, 1], dtype=int32)</span></span>
<span id="cb106-2297"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The output here (for the dataset ``X``, distance threshold ``t``, and the</span></span>
<span id="cb106-2298"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    default settings) is four clusters with three data points each.</span></span>
<span id="cb106-2299"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-2300">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(X, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.double)</span>
<span id="cb106-2301"></span>
<span id="cb106-2302">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(X) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> np.ndarray <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(X.shape) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb106-2303">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The observation matrix X must be an n by m numpy '</span></span>
<span id="cb106-2304">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'array.'</span>)</span>
<span id="cb106-2305"></span>
<span id="cb106-2306">    Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distance.pdist(X, metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>metric)</span>
<span id="cb106-2307">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linkage(Y, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>method)</span>
<span id="cb106-2308">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> R <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-2309">        R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inconsistent(Z, d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>depth)</span>
<span id="cb106-2310">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-2311">        R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(R, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-2312">    T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fcluster(Z, criterion<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>criterion, depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>depth, R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>R, t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>t)</span>
<span id="cb106-2313">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> T</span>
<span id="cb106-2314"></span>
<span id="cb106-2315"></span>
<span id="cb106-2316"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> leaves_list(Z):</span>
<span id="cb106-2317">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-2318"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return a list of leaf node ids.</span></span>
<span id="cb106-2319"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The return corresponds to the observation vector index as it appears</span></span>
<span id="cb106-2320"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    in the tree from left to right. Z is a linkage matrix.</span></span>
<span id="cb106-2321"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-2322"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-2323"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-2324"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The hierarchical clustering encoded as a matrix.  `Z` is</span></span>
<span id="cb106-2325"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        a linkage matrix.  See `linkage` for more information.</span></span>
<span id="cb106-2326"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-2327"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-2328"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    leaves_list : ndarray</span></span>
<span id="cb106-2329"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The list of leaf node ids.</span></span>
<span id="cb106-2330"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-2331"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-2332"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    dendrogram: for information about dendrogram structure.</span></span>
<span id="cb106-2333"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-2334"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-2335"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import ward, dendrogram, leaves_list</span></span>
<span id="cb106-2336"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-2337"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from matplotlib import pyplot as plt</span></span>
<span id="cb106-2338"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-2339"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-2340"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-2341"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-2342"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = ward(pdist(X))</span></span>
<span id="cb106-2343"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The linkage matrix ``Z`` represents a dendrogram, that is, a tree that</span></span>
<span id="cb106-2344"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    encodes the structure of the clustering performed.</span></span>
<span id="cb106-2345"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `scipy.cluster.hierarchy.leaves_list` shows the mapping between</span></span>
<span id="cb106-2346"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    indices in the ``X`` dataset and leaves in the dendrogram:</span></span>
<span id="cb106-2347"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; leaves_list(Z)</span></span>
<span id="cb106-2348"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([ 2,  0,  1,  5,  3,  4,  8,  6,  7, 11,  9, 10], dtype=int32)</span></span>
<span id="cb106-2349"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fig = plt.figure(figsize=(25, 10))</span></span>
<span id="cb106-2350"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; dn = dendrogram(Z)</span></span>
<span id="cb106-2351"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; plt.show()</span></span>
<span id="cb106-2352"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-2353">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(Z, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-2354">    is_valid_linkage(Z, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>)</span>
<span id="cb106-2355">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-2356">    ML <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((n,), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'i'</span>)</span>
<span id="cb106-2357">    [Z] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _copy_arrays_if_base_present([Z])</span>
<span id="cb106-2358">    _hierarchy.prelist(Z, ML, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n))</span>
<span id="cb106-2359">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ML</span>
<span id="cb106-2360"></span>
<span id="cb106-2361"></span>
<span id="cb106-2362"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Maps number of leaves to text size.</span></span>
<span id="cb106-2363"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb106-2364"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># p &lt;= 20, size="12"</span></span>
<span id="cb106-2365"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 20 &lt; p &lt;= 30, size="10"</span></span>
<span id="cb106-2366"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 30 &lt; p &lt;= 50, size="8"</span></span>
<span id="cb106-2367"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 50 &lt; p &lt;= np.inf, size="6"</span></span>
<span id="cb106-2368"></span>
<span id="cb106-2369">_dtextsizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, np.inf: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>}</span>
<span id="cb106-2370">_drotation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, np.inf: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>}</span>
<span id="cb106-2371">_dtextsortedkeys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(_dtextsizes.keys())</span>
<span id="cb106-2372">_dtextsortedkeys.sort()</span>
<span id="cb106-2373">_drotationsortedkeys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(_drotation.keys())</span>
<span id="cb106-2374">_drotationsortedkeys.sort()</span>
<span id="cb106-2375"></span>
<span id="cb106-2376"></span>
<span id="cb106-2377"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _remove_dups(L):</span>
<span id="cb106-2378">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-2379"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Remove duplicates AND preserve the original order of the elements.</span></span>
<span id="cb106-2380"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The set class is not guaranteed to do this.</span></span>
<span id="cb106-2381"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-2382">    seen_before <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>([])</span>
<span id="cb106-2383">    L2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb106-2384">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> L:</span>
<span id="cb106-2385">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> seen_before:</span>
<span id="cb106-2386">            seen_before.add(i)</span>
<span id="cb106-2387">            L2.append(i)</span>
<span id="cb106-2388">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> L2</span>
<span id="cb106-2389"></span>
<span id="cb106-2390"></span>
<span id="cb106-2391"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _get_tick_text_size(p):</span>
<span id="cb106-2392">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> _dtextsortedkeys:</span>
<span id="cb106-2393">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> k:</span>
<span id="cb106-2394">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> _dtextsizes[k]</span>
<span id="cb106-2395"></span>
<span id="cb106-2396"></span>
<span id="cb106-2397"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _get_tick_rotation(p):</span>
<span id="cb106-2398">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> _drotationsortedkeys:</span>
<span id="cb106-2399">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> k:</span>
<span id="cb106-2400">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> _drotation[k]</span>
<span id="cb106-2401"></span>
<span id="cb106-2402"></span>
<span id="cb106-2403"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _plot_dendrogram(icoords, dcoords, ivl, p, n, mh, orientation,</span>
<span id="cb106-2404">                     no_labels, color_list, leaf_font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb106-2405">                     leaf_rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, contraction_marks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb106-2406">                     ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, above_threshold_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C0'</span>):</span>
<span id="cb106-2407">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib here so that it's not imported unless dendrograms</span></span>
<span id="cb106-2408">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># are plotted. Raise an informative error if importing fails.</span></span>
<span id="cb106-2409">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb106-2410">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if an axis is provided, don't use pylab at all</span></span>
<span id="cb106-2411">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ax <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-2412">            <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pylab</span>
<span id="cb106-2413">        <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.patches</span>
<span id="cb106-2414">        <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.collections</span>
<span id="cb106-2415">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ImportError</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb106-2416">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ImportError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You must install the matplotlib library to plot "</span></span>
<span id="cb106-2417">                          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"the dendrogram. Use no_plot=True to calculate the "</span></span>
<span id="cb106-2418">                          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dendrogram without plotting."</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> e</span>
<span id="cb106-2419"></span>
<span id="cb106-2420">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ax <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-2421">        ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> matplotlib.pylab.gca()</span>
<span id="cb106-2422">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if we're using pylab, we want to trigger a draw at the end</span></span>
<span id="cb106-2423">        trigger_redraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb106-2424">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-2425">        trigger_redraw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb106-2426"></span>
<span id="cb106-2427">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Independent variable plot width</span></span>
<span id="cb106-2428">    ivw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ivl) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb106-2429">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dependent variable plot height</span></span>
<span id="cb106-2430">    dvw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> mh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span></span>
<span id="cb106-2431"></span>
<span id="cb106-2432">    iv_ticks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ivl) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb106-2433">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> orientation <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bottom'</span>):</span>
<span id="cb106-2434">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> orientation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>:</span>
<span id="cb106-2435">            ax.set_ylim([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, dvw])</span>
<span id="cb106-2436">            ax.set_xlim([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ivw])</span>
<span id="cb106-2437">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-2438">            ax.set_ylim([dvw, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb106-2439">            ax.set_xlim([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ivw])</span>
<span id="cb106-2440"></span>
<span id="cb106-2441">        xlines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> icoords</span>
<span id="cb106-2442">        ylines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dcoords</span>
<span id="cb106-2443">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> no_labels:</span>
<span id="cb106-2444">            ax.set_xticks([])</span>
<span id="cb106-2445">            ax.set_xticklabels([])</span>
<span id="cb106-2446">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-2447">            ax.set_xticks(iv_ticks)</span>
<span id="cb106-2448"></span>
<span id="cb106-2449">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> orientation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>:</span>
<span id="cb106-2450">                ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bottom'</span>)</span>
<span id="cb106-2451">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-2452">                ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>)</span>
<span id="cb106-2453"></span>
<span id="cb106-2454">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make the tick marks invisible because they cover up the links</span></span>
<span id="cb106-2455">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ax.get_xticklines():</span>
<span id="cb106-2456">                line.set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb106-2457"></span>
<span id="cb106-2458">            leaf_rot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(_get_tick_rotation(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ivl)))</span>
<span id="cb106-2459">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (leaf_rotation <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> leaf_rotation)</span>
<span id="cb106-2460">            leaf_font <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(_get_tick_text_size(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ivl)))</span>
<span id="cb106-2461">                         <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (leaf_font_size <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> leaf_font_size)</span>
<span id="cb106-2462">            ax.set_xticklabels(ivl, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>leaf_rot, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>leaf_font)</span>
<span id="cb106-2463"></span>
<span id="cb106-2464">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> orientation <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>):</span>
<span id="cb106-2465">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> orientation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>:</span>
<span id="cb106-2466">            ax.set_xlim([dvw, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb106-2467">            ax.set_ylim([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ivw])</span>
<span id="cb106-2468">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-2469">            ax.set_xlim([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, dvw])</span>
<span id="cb106-2470">            ax.set_ylim([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ivw])</span>
<span id="cb106-2471"></span>
<span id="cb106-2472">        xlines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dcoords</span>
<span id="cb106-2473">        ylines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> icoords</span>
<span id="cb106-2474">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> no_labels:</span>
<span id="cb106-2475">            ax.set_yticks([])</span>
<span id="cb106-2476">            ax.set_yticklabels([])</span>
<span id="cb106-2477">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-2478">            ax.set_yticks(iv_ticks)</span>
<span id="cb106-2479"></span>
<span id="cb106-2480">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> orientation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>:</span>
<span id="cb106-2481">                ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb106-2482">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-2483">                ax.yaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span>
<span id="cb106-2484"></span>
<span id="cb106-2485">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make the tick marks invisible because they cover up the links</span></span>
<span id="cb106-2486">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ax.get_yticklines():</span>
<span id="cb106-2487">                line.set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb106-2488"></span>
<span id="cb106-2489">            leaf_font <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(_get_tick_text_size(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ivl)))</span>
<span id="cb106-2490">                         <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (leaf_font_size <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> leaf_font_size)</span>
<span id="cb106-2491"></span>
<span id="cb106-2492">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> leaf_rotation <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-2493">                ax.set_yticklabels(ivl, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>leaf_rotation, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>leaf_font)</span>
<span id="cb106-2494">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-2495">                ax.set_yticklabels(ivl, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>leaf_font)</span>
<span id="cb106-2496"></span>
<span id="cb106-2497">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's use collections instead. This way there is a separate legend item</span></span>
<span id="cb106-2498">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for each tree grouping, rather than stupidly one for each line segment.</span></span>
<span id="cb106-2499">    colors_used <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _remove_dups(color_list)</span>
<span id="cb106-2500">    color_to_lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb106-2501">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors_used:</span>
<span id="cb106-2502">        color_to_lines[color] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb106-2503">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (xline, yline, color) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(xlines, ylines, color_list):</span>
<span id="cb106-2504">        color_to_lines[color].append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(xline, yline)))</span>
<span id="cb106-2505"></span>
<span id="cb106-2506">    colors_to_collections <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb106-2507">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the collections.</span></span>
<span id="cb106-2508">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors_used:</span>
<span id="cb106-2509">        coll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> matplotlib.collections.LineCollection(color_to_lines[color],</span>
<span id="cb106-2510">                                                     colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(color,))</span>
<span id="cb106-2511">        colors_to_collections[color] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coll</span>
<span id="cb106-2512"></span>
<span id="cb106-2513">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add all the groupings below the color threshold.</span></span>
<span id="cb106-2514">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors_used:</span>
<span id="cb106-2515">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> above_threshold_color:</span>
<span id="cb106-2516">            ax.add_collection(colors_to_collections[color])</span>
<span id="cb106-2517">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If there's a grouping of links above the color threshold, it goes last.</span></span>
<span id="cb106-2518">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> above_threshold_color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors_to_collections:</span>
<span id="cb106-2519">        ax.add_collection(colors_to_collections[above_threshold_color])</span>
<span id="cb106-2520"></span>
<span id="cb106-2521">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> contraction_marks <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-2522">        Ellipse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> matplotlib.patches.Ellipse</span>
<span id="cb106-2523">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (x, y) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> contraction_marks:</span>
<span id="cb106-2524">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> orientation <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>):</span>
<span id="cb106-2525">                e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Ellipse((y, x), width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dvw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span>
<span id="cb106-2526">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-2527">                e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Ellipse((x, y), width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dvw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb106-2528">            ax.add_artist(e)</span>
<span id="cb106-2529">            e.set_clip_box(ax.bbox)</span>
<span id="cb106-2530">            e.set_alpha(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb106-2531">            e.set_facecolor(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k'</span>)</span>
<span id="cb106-2532"></span>
<span id="cb106-2533">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> trigger_redraw:</span>
<span id="cb106-2534">        matplotlib.pylab.draw_if_interactive()</span>
<span id="cb106-2535"></span>
<span id="cb106-2536"></span>
<span id="cb106-2537"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># C0  is used for above threshhold color</span></span>
<span id="cb106-2538">_link_line_colors_default <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C4'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C6'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C7'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C8'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C9'</span>)</span>
<span id="cb106-2539">_link_line_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(_link_line_colors_default)</span>
<span id="cb106-2540"></span>
<span id="cb106-2541"></span>
<span id="cb106-2542"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_link_color_palette(palette):</span>
<span id="cb106-2543">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-2544"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Set list of matplotlib color codes for use by dendrogram.</span></span>
<span id="cb106-2545"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Note that this palette is global (i.e., setting it once changes the colors</span></span>
<span id="cb106-2546"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    for all subsequent calls to `dendrogram`) and that it affects only the</span></span>
<span id="cb106-2547"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    the colors below ``color_threshold``.</span></span>
<span id="cb106-2548"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Note that `dendrogram` also accepts a custom coloring function through its</span></span>
<span id="cb106-2549"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ``link_color_func`` keyword, which is more flexible and non-global.</span></span>
<span id="cb106-2550"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-2551"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-2552"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    palette : list of str or None</span></span>
<span id="cb106-2553"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A list of matplotlib color codes.  The order of the color codes is the</span></span>
<span id="cb106-2554"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        order in which the colors are cycled through when color thresholding in</span></span>
<span id="cb106-2555"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        the dendrogram.</span></span>
<span id="cb106-2556"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        If ``None``, resets the palette to its default (which are matplotlib</span></span>
<span id="cb106-2557"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        default colors C1 to C9).</span></span>
<span id="cb106-2558"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-2559"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-2560"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    None</span></span>
<span id="cb106-2561"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-2562"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-2563"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    dendrogram</span></span>
<span id="cb106-2564"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Notes</span></span>
<span id="cb106-2565"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -----</span></span>
<span id="cb106-2566"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Ability to reset the palette with ``None`` added in SciPy 0.17.0.</span></span>
<span id="cb106-2567"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-2568"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-2569"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster import hierarchy</span></span>
<span id="cb106-2570"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; ytdist = np.array([662., 877., 255., 412., 996., 295., 468., 268.,</span></span>
<span id="cb106-2571"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...                    400., 754., 564., 138., 219., 869., 669.])</span></span>
<span id="cb106-2572"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = hierarchy.linkage(ytdist, 'single')</span></span>
<span id="cb106-2573"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; dn = hierarchy.dendrogram(Z, no_plot=True)</span></span>
<span id="cb106-2574"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; dn['color_list']</span></span>
<span id="cb106-2575"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ['C1', 'C0', 'C0', 'C0', 'C0']</span></span>
<span id="cb106-2576"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; hierarchy.set_link_color_palette(['c', 'm', 'y', 'k'])</span></span>
<span id="cb106-2577"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; dn = hierarchy.dendrogram(Z, no_plot=True, above_threshold_color='b')</span></span>
<span id="cb106-2578"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; dn['color_list']</span></span>
<span id="cb106-2579"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ['c', 'b', 'b', 'b', 'b']</span></span>
<span id="cb106-2580"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; dn = hierarchy.dendrogram(Z, no_plot=True, color_threshold=267,</span></span>
<span id="cb106-2581"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...                           above_threshold_color='k')</span></span>
<span id="cb106-2582"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; dn['color_list']</span></span>
<span id="cb106-2583"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ['c', 'm', 'm', 'k', 'k']</span></span>
<span id="cb106-2584"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Now, reset the color palette to its default:</span></span>
<span id="cb106-2585"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; hierarchy.set_link_color_palette(None)</span></span>
<span id="cb106-2586"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-2587">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> palette <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-2588">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reset to its default</span></span>
<span id="cb106-2589">        palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _link_line_colors_default</span>
<span id="cb106-2590">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(palette) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>):</span>
<span id="cb106-2591">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"palette must be a list or tuple"</span>)</span>
<span id="cb106-2592">    _ptypes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(p, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> palette]</span>
<span id="cb106-2593"></span>
<span id="cb106-2594">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> _ptypes:</span>
<span id="cb106-2595">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"all palette list elements must be color strings"</span>)</span>
<span id="cb106-2596"></span>
<span id="cb106-2597">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">global</span> _link_line_colors</span>
<span id="cb106-2598">    _link_line_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> palette</span>
<span id="cb106-2599"></span>
<span id="cb106-2600"></span>
<span id="cb106-2601"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> dendrogram(Z, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, truncate_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, color_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb106-2602">               get_leaves<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, orientation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb106-2603">               count_sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, distance_sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, show_leaf_counts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb106-2604">               no_plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, no_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, leaf_font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb106-2605">               leaf_rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, leaf_label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb106-2606">               show_contracted<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, link_color_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb106-2607">               above_threshold_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C0'</span>):</span>
<span id="cb106-2608">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-2609"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Plot the hierarchical clustering as a dendrogram.</span></span>
<span id="cb106-2610"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The dendrogram illustrates how each cluster is</span></span>
<span id="cb106-2611"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    composed by drawing a U-shaped link between a non-singleton</span></span>
<span id="cb106-2612"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    cluster and its children. The top of the U-link indicates a</span></span>
<span id="cb106-2613"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    cluster merge. The two legs of the U-link indicate which clusters</span></span>
<span id="cb106-2614"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    were merged. The length of the two legs of the U-link represents</span></span>
<span id="cb106-2615"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    the distance between the child clusters. It is also the</span></span>
<span id="cb106-2616"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    cophenetic distance between original observations in the two</span></span>
<span id="cb106-2617"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    children clusters. Customized to track cluster index traversal in</span></span>
<span id="cb106-2618"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    construction of dendrogram for labeling purposes.</span></span>
<span id="cb106-2619"></span>
<span id="cb106-2620"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-2621"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-2622"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-2623"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The linkage matrix encoding the hierarchical clustering to</span></span>
<span id="cb106-2624"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        render as a dendrogram. See the ``linkage`` function for more</span></span>
<span id="cb106-2625"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        information on the format of ``Z``.</span></span>
<span id="cb106-2626"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    p : int, optional</span></span>
<span id="cb106-2627"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The ``p`` parameter for ``truncate_mode``.</span></span>
<span id="cb106-2628"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    truncate_mode : str, optional</span></span>
<span id="cb106-2629"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The dendrogram can be hard to read when the original</span></span>
<span id="cb106-2630"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        observation matrix from which the linkage is derived is</span></span>
<span id="cb106-2631"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        large. Truncation is used to condense the dendrogram. There</span></span>
<span id="cb106-2632"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        are several modes:</span></span>
<span id="cb106-2633"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``None``</span></span>
<span id="cb106-2634"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          No truncation is performed (default).</span></span>
<span id="cb106-2635"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          Note: ``'none'`` is an alias for ``None`` that's kept for</span></span>
<span id="cb106-2636"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          backward compatibility.</span></span>
<span id="cb106-2637"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``'lastp'``</span></span>
<span id="cb106-2638"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          The last ``p`` non-singleton clusters formed in the linkage are the</span></span>
<span id="cb106-2639"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          only non-leaf nodes in the linkage; they correspond to rows</span></span>
<span id="cb106-2640"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          ``Z[n-p-2:end]`` in ``Z``. All other non-singleton clusters are</span></span>
<span id="cb106-2641"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          contracted into leaf nodes.</span></span>
<span id="cb106-2642"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``'level'``</span></span>
<span id="cb106-2643"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          No more than ``p`` levels of the dendrogram tree are displayed.</span></span>
<span id="cb106-2644"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          A "level" includes all nodes with ``p`` merges from the last merge.</span></span>
<span id="cb106-2645"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          Note: ``'mtica'`` is an alias for ``'level'`` that's kept for</span></span>
<span id="cb106-2646"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          backward compatibility.</span></span>
<span id="cb106-2647"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    color_threshold : double, optional</span></span>
<span id="cb106-2648"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        For brevity, let :math:`t` be the ``color_threshold``.</span></span>
<span id="cb106-2649"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Colors all the descendent links below a cluster node</span></span>
<span id="cb106-2650"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :math:`k` the same color if :math:`k` is the first node below</span></span>
<span id="cb106-2651"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        the cut threshold :math:`t`. All links connecting nodes with</span></span>
<span id="cb106-2652"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        distances greater than or equal to the threshold are colored</span></span>
<span id="cb106-2653"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        with de default matplotlib color ``'C0'``. If :math:`t` is less</span></span>
<span id="cb106-2654"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        than or equal to zero, all nodes are colored ``'C0'``.</span></span>
<span id="cb106-2655"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        If ``color_threshold`` is None or 'default',</span></span>
<span id="cb106-2656"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        corresponding with MATLAB(TM) behavior, the threshold is set to</span></span>
<span id="cb106-2657"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``0.7*max(Z[:,2])``.</span></span>
<span id="cb106-2658"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    get_leaves : bool, optional</span></span>
<span id="cb106-2659"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Includes a list ``R['leaves']=H`` in the result</span></span>
<span id="cb106-2660"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        dictionary. For each :math:`i`, ``H[i] == j``, cluster node</span></span>
<span id="cb106-2661"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``j`` appears in position ``i`` in the left-to-right traversal</span></span>
<span id="cb106-2662"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        of the leaves, where :math:`j &lt; 2n-1` and :math:`i &lt; n`.</span></span>
<span id="cb106-2663"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    orientation : str, optional</span></span>
<span id="cb106-2664"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The direction to plot the dendrogram, which can be any</span></span>
<span id="cb106-2665"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        of the following strings:</span></span>
<span id="cb106-2666"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``'top'``</span></span>
<span id="cb106-2667"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          Plots the root at the top, and plot descendent links going downwards.</span></span>
<span id="cb106-2668"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          (default).</span></span>
<span id="cb106-2669"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``'bottom'``</span></span>
<span id="cb106-2670"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          Plots the root at the bottom, and plot descendent links going</span></span>
<span id="cb106-2671"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          upwards.</span></span>
<span id="cb106-2672"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``'left'``</span></span>
<span id="cb106-2673"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          Plots the root at the left, and plot descendent links going right.</span></span>
<span id="cb106-2674"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``'right'``</span></span>
<span id="cb106-2675"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          Plots the root at the right, and plot descendent links going left.</span></span>
<span id="cb106-2676"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    labels : ndarray, optional</span></span>
<span id="cb106-2677"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        By default, ``labels`` is None so the index of the original observation</span></span>
<span id="cb106-2678"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        is used to label the leaf nodes.  Otherwise, this is an :math:`n`-sized</span></span>
<span id="cb106-2679"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        sequence, with ``n == Z.shape[0] + 1``. The ``labels[i]`` value is the</span></span>
<span id="cb106-2680"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        text to put under the :math:`i` th leaf node only if it corresponds to</span></span>
<span id="cb106-2681"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        an original observation and not a non-singleton cluster.</span></span>
<span id="cb106-2682"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    count_sort : str or bool, optional</span></span>
<span id="cb106-2683"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        For each node n, the order (visually, from left-to-right) n's</span></span>
<span id="cb106-2684"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        two descendent links are plotted is determined by this</span></span>
<span id="cb106-2685"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        parameter, which can be any of the following values:</span></span>
<span id="cb106-2686"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``False``</span></span>
<span id="cb106-2687"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          Nothing is done.</span></span>
<span id="cb106-2688"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``'ascending'`` or ``True``</span></span>
<span id="cb106-2689"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          The child with the minimum number of original objects in its cluster</span></span>
<span id="cb106-2690"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          is plotted first.</span></span>
<span id="cb106-2691"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``'descending'``</span></span>
<span id="cb106-2692"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          The child with the maximum number of original objects in its cluster</span></span>
<span id="cb106-2693"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          is plotted first.</span></span>
<span id="cb106-2694"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Note, ``distance_sort`` and ``count_sort`` cannot both be True.</span></span>
<span id="cb106-2695"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    distance_sort : str or bool, optional</span></span>
<span id="cb106-2696"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        For each node n, the order (visually, from left-to-right) n's</span></span>
<span id="cb106-2697"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        two descendent links are plotted is determined by this</span></span>
<span id="cb106-2698"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        parameter, which can be any of the following values:</span></span>
<span id="cb106-2699"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``False``</span></span>
<span id="cb106-2700"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          Nothing is done.</span></span>
<span id="cb106-2701"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``'ascending'`` or ``True``</span></span>
<span id="cb106-2702"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          The child with the minimum distance between its direct descendents is</span></span>
<span id="cb106-2703"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          plotted first.</span></span>
<span id="cb106-2704"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``'descending'``</span></span>
<span id="cb106-2705"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          The child with the maximum distance between its direct descendents is</span></span>
<span id="cb106-2706"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          plotted first.</span></span>
<span id="cb106-2707"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Note ``distance_sort`` and ``count_sort`` cannot both be True.</span></span>
<span id="cb106-2708"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    show_leaf_counts : bool, optional</span></span>
<span id="cb106-2709"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         When True, leaf nodes representing :math:`k&gt;1` original</span></span>
<span id="cb106-2710"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         observation are labeled with the number of observations they</span></span>
<span id="cb106-2711"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         contain in parentheses.</span></span>
<span id="cb106-2712"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    no_plot : bool, optional</span></span>
<span id="cb106-2713"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        When True, the final rendering is not performed. This is</span></span>
<span id="cb106-2714"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        useful if only the data structures computed for the rendering</span></span>
<span id="cb106-2715"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        are needed or if matplotlib is not available.</span></span>
<span id="cb106-2716"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    no_labels : bool, optional</span></span>
<span id="cb106-2717"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        When True, no labels appear next to the leaf nodes in the</span></span>
<span id="cb106-2718"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        rendering of the dendrogram.</span></span>
<span id="cb106-2719"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    leaf_rotation : double, optional</span></span>
<span id="cb106-2720"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Specifies the angle (in degrees) to rotate the leaf</span></span>
<span id="cb106-2721"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        labels. When unspecified, the rotation is based on the number of</span></span>
<span id="cb106-2722"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        nodes in the dendrogram (default is 0).</span></span>
<span id="cb106-2723"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    leaf_font_size : int, optional</span></span>
<span id="cb106-2724"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Specifies the font size (in points) of the leaf labels. When</span></span>
<span id="cb106-2725"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        unspecified, the size based on the number of nodes in the</span></span>
<span id="cb106-2726"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        dendrogram.</span></span>
<span id="cb106-2727"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    leaf_label_func : lambda or function, optional</span></span>
<span id="cb106-2728"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        When leaf_label_func is a callable function, for each</span></span>
<span id="cb106-2729"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        leaf with cluster index :math:`k &lt; 2n-1`. The function</span></span>
<span id="cb106-2730"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        is expected to return a string with the label for the</span></span>
<span id="cb106-2731"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        leaf.</span></span>
<span id="cb106-2732"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Indices :math:`k &lt; n` correspond to original observations</span></span>
<span id="cb106-2733"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        while indices :math:`k </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">geq n` correspond to non-singleton</span></span>
<span id="cb106-2734"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        clusters.</span></span>
<span id="cb106-2735"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        For example, to label singletons with their node id and</span></span>
<span id="cb106-2736"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        non-singletons with their id, count, and inconsistency</span></span>
<span id="cb106-2737"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        coefficient, simply do::</span></span>
<span id="cb106-2738"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            # First define the leaf label function.</span></span>
<span id="cb106-2739"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            def llf(id):</span></span>
<span id="cb106-2740"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                if id &lt; n:</span></span>
<span id="cb106-2741"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                    return str(id)</span></span>
<span id="cb106-2742"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                else:</span></span>
<span id="cb106-2743"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                    return '[%d %d %1.2f]' % (id, count, R[n-id,3])</span></span>
<span id="cb106-2744"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            # The text for the leaf nodes is going to be big so force</span></span>
<span id="cb106-2745"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            # a rotation of 90 degrees.</span></span>
<span id="cb106-2746"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            dendrogram(Z, leaf_label_func=llf, leaf_rotation=90)</span></span>
<span id="cb106-2747"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    show_contracted : bool, optional</span></span>
<span id="cb106-2748"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        When True the heights of non-singleton nodes contracted</span></span>
<span id="cb106-2749"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        into a leaf node are plotted as crosses along the link</span></span>
<span id="cb106-2750"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        connecting that leaf node.  This really is only useful when</span></span>
<span id="cb106-2751"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        truncation is used (see ``truncate_mode`` parameter).</span></span>
<span id="cb106-2752"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    link_color_func : callable, optional</span></span>
<span id="cb106-2753"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        If given, `link_color_function` is called with each non-singleton id</span></span>
<span id="cb106-2754"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        corresponding to each U-shaped link it will paint. The function is</span></span>
<span id="cb106-2755"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        expected to return the color to paint the link, encoded as a matplotlib</span></span>
<span id="cb106-2756"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        color string code. For example::</span></span>
<span id="cb106-2757"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            dendrogram(Z, link_color_func=lambda k: colors[k])</span></span>
<span id="cb106-2758"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        colors the direct links below each untruncated non-singleton node</span></span>
<span id="cb106-2759"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``k`` using ``colors[k]``.</span></span>
<span id="cb106-2760"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ax : matplotlib Axes instance, optional</span></span>
<span id="cb106-2761"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        If None and `no_plot` is not True, the dendrogram will be plotted</span></span>
<span id="cb106-2762"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        on the current axes.  Otherwise if `no_plot` is not True the</span></span>
<span id="cb106-2763"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        dendrogram will be plotted on the given ``Axes`` instance. This can be</span></span>
<span id="cb106-2764"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        useful if the dendrogram is part of a more complex figure.</span></span>
<span id="cb106-2765"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    above_threshold_color : str, optional</span></span>
<span id="cb106-2766"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        This matplotlib color string sets the color of the links above the</span></span>
<span id="cb106-2767"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        color_threshold. The default is ``'C0'``.</span></span>
<span id="cb106-2768"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-2769"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-2770"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    R : dict</span></span>
<span id="cb106-2771"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A dictionary of data structures computed to render the</span></span>
<span id="cb106-2772"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        dendrogram. Its has the following keys:</span></span>
<span id="cb106-2773"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``'color_list'``</span></span>
<span id="cb106-2774"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          A list of color names. The k'th element represents the color of the</span></span>
<span id="cb106-2775"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          k'th link.</span></span>
<span id="cb106-2776"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``'icoord'`` and ``'dcoord'``</span></span>
<span id="cb106-2777"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          Each of them is a list of lists. Let ``icoord = [I1, I2, ..., Ip]``</span></span>
<span id="cb106-2778"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          where ``Ik = [xk1, xk2, xk3, xk4]`` and ``dcoord = [D1, D2, ..., Dp]``</span></span>
<span id="cb106-2779"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          where ``Dk = [yk1, yk2, yk3, yk4]``, then the k'th link painted is</span></span>
<span id="cb106-2780"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          ``(xk1, yk1)`` - ``(xk2, yk2)`` - ``(xk3, yk3)`` - ``(xk4, yk4)``.</span></span>
<span id="cb106-2781"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``'ivl'``</span></span>
<span id="cb106-2782"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          A list of labels corresponding to the leaf nodes.</span></span>
<span id="cb106-2783"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``'leaves'``</span></span>
<span id="cb106-2784"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          For each i, ``H[i] == j``, cluster node ``j`` appears in position</span></span>
<span id="cb106-2785"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          ``i`` in the left-to-right traversal of the leaves, where</span></span>
<span id="cb106-2786"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          :math:`j &lt; 2n-1` and :math:`i &lt; n`. If ``j`` is less than ``n``, the</span></span>
<span id="cb106-2787"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          ``i``-th leaf node corresponds to an original observation.</span></span>
<span id="cb106-2788"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          Otherwise, it corresponds to a non-singleton cluster.</span></span>
<span id="cb106-2789"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``'leaves_color_list'``</span></span>
<span id="cb106-2790"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          A list of color names. The k'th element represents the color of the</span></span>
<span id="cb106-2791"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">          k'th leaf.</span></span>
<span id="cb106-2792"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-2793"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-2794"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage, set_link_color_palette</span></span>
<span id="cb106-2795"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Notes</span></span>
<span id="cb106-2796"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -----</span></span>
<span id="cb106-2797"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    It is expected that the distances in ``Z[:,2]`` be monotonic, otherwise</span></span>
<span id="cb106-2798"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    crossings appear in the dendrogram.</span></span>
<span id="cb106-2799"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-2800"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-2801"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster import hierarchy</span></span>
<span id="cb106-2802"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; import matplotlib.pyplot as plt</span></span>
<span id="cb106-2803"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A very basic example:</span></span>
<span id="cb106-2804"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; ytdist = np.array([662., 877., 255., 412., 996., 295., 468., 268.,</span></span>
<span id="cb106-2805"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...                    400., 754., 564., 138., 219., 869., 669.])</span></span>
<span id="cb106-2806"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = hierarchy.linkage(ytdist, 'single')</span></span>
<span id="cb106-2807"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; plt.figure()</span></span>
<span id="cb106-2808"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; dn = hierarchy.dendrogram(Z)</span></span>
<span id="cb106-2809"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Now, plot in given axes, improve the color scheme and use both vertical and</span></span>
<span id="cb106-2810"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    horizontal orientations:</span></span>
<span id="cb106-2811"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; hierarchy.set_link_color_palette(['m', 'c', 'y', 'k'])</span></span>
<span id="cb106-2812"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fig, axes = plt.subplots(1, 2, figsize=(8, 3))</span></span>
<span id="cb106-2813"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; dn1 = hierarchy.dendrogram(Z, ax=axes[0], above_threshold_color='y',</span></span>
<span id="cb106-2814"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...                            orientation='top')</span></span>
<span id="cb106-2815"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; dn2 = hierarchy.dendrogram(Z, ax=axes[1],</span></span>
<span id="cb106-2816"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...                            above_threshold_color='#bcbddc',</span></span>
<span id="cb106-2817"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...                            orientation='right')</span></span>
<span id="cb106-2818"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; hierarchy.set_link_color_palette(None)  # reset to default after use</span></span>
<span id="cb106-2819"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; plt.show()</span></span>
<span id="cb106-2820"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-2821">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This feature was thought about but never implemented (still useful?):</span></span>
<span id="cb106-2822">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb106-2823">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         ... = dendrogram(..., leaves_order=None)</span></span>
<span id="cb106-2824">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb106-2825">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         Plots the leaves in the order specified by a vector of</span></span>
<span id="cb106-2826">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         original observation indices. If the vector contains duplicates</span></span>
<span id="cb106-2827">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         or results in a crossing, an exception will be thrown. Passing</span></span>
<span id="cb106-2828">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         None orders leaf nodes based on the order they appear in the</span></span>
<span id="cb106-2829">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         pre-order traversal.</span></span>
<span id="cb106-2830">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(Z, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-2831"></span>
<span id="cb106-2832">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> orientation <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>]:</span>
<span id="cb106-2833">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orientation must be one of 'top', 'left', "</span></span>
<span id="cb106-2834">                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'bottom', or 'right'"</span>)</span>
<span id="cb106-2835"></span>
<span id="cb106-2836">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> labels <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> Z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(labels):</span>
<span id="cb106-2837">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dimensions of Z and labels must be consistent."</span>)</span>
<span id="cb106-2838"></span>
<span id="cb106-2839">    is_valid_linkage(Z, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>)</span>
<span id="cb106-2840">    Zs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.shape</span>
<span id="cb106-2841">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Zs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-2842">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(p) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>):</span>
<span id="cb106-2843">        p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(p)</span>
<span id="cb106-2844">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-2845">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The second argument must be a number'</span>)</span>
<span id="cb106-2846"></span>
<span id="cb106-2847">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> truncate_mode <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lastp'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mlab'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mtica'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'level'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb106-2848">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'mlab' and 'mtica' are kept working for backwards compat.</span></span>
<span id="cb106-2849">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Invalid truncation mode.'</span>)</span>
<span id="cb106-2850"></span>
<span id="cb106-2851">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> truncate_mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lastp'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> truncate_mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mlab'</span>:</span>
<span id="cb106-2852">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb106-2853">            p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n</span>
<span id="cb106-2854"></span>
<span id="cb106-2855">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> truncate_mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mtica'</span>:</span>
<span id="cb106-2856">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'mtica' is an alias</span></span>
<span id="cb106-2857">        truncate_mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'level'</span></span>
<span id="cb106-2858"></span>
<span id="cb106-2859">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> truncate_mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'level'</span>:</span>
<span id="cb106-2860">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb106-2861">            p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.inf</span>
<span id="cb106-2862"></span>
<span id="cb106-2863">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> get_leaves:</span>
<span id="cb106-2864">        lvs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb106-2865">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-2866">        lvs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb106-2867"></span>
<span id="cb106-2868">    icoord_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb106-2869">    dcoord_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb106-2870">    color_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb106-2871">    current_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb106-2872">    currently_below_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>]</span>
<span id="cb106-2873">    ivl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list of leaves</span></span>
<span id="cb106-2874"></span>
<span id="cb106-2875">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> color_threshold <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(color_threshold, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span></span>
<span id="cb106-2876">                                   color_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'default'</span>):</span>
<span id="cb106-2877">        color_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(Z[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span></span>
<span id="cb106-2878"></span>
<span id="cb106-2879">    R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'icoord'</span>: icoord_list, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dcoord'</span>: dcoord_list, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ivl'</span>: ivl,</span>
<span id="cb106-2880">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'leaves'</span>: lvs, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'color_list'</span>: color_list}</span>
<span id="cb106-2881"></span>
<span id="cb106-2882">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Empty list will be filled in _dendrogram_calculate_info</span></span>
<span id="cb106-2883">    contraction_marks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> show_contracted <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb106-2884"></span>
<span id="cb106-2885">    traversal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb106-2886">    _dendrogram_calculate_info(</span>
<span id="cb106-2887">        Z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Z, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>p,</span>
<span id="cb106-2888">        truncate_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>truncate_mode,</span>
<span id="cb106-2889">        color_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color_threshold,</span>
<span id="cb106-2890">        get_leaves<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_leaves,</span>
<span id="cb106-2891">        orientation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>orientation,</span>
<span id="cb106-2892">        labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels,</span>
<span id="cb106-2893">        count_sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>count_sort,</span>
<span id="cb106-2894">        distance_sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>distance_sort,</span>
<span id="cb106-2895">        show_leaf_counts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>show_leaf_counts,</span>
<span id="cb106-2896">        i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb106-2897">        iv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>,</span>
<span id="cb106-2898">        ivl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ivl,</span>
<span id="cb106-2899">        n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n,</span>
<span id="cb106-2900">        icoord_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>icoord_list,</span>
<span id="cb106-2901">        dcoord_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dcoord_list,</span>
<span id="cb106-2902">        lvs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lvs,</span>
<span id="cb106-2903">        current_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>current_color,</span>
<span id="cb106-2904">        color_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color_list,</span>
<span id="cb106-2905">        currently_below_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>currently_below_threshold,</span>
<span id="cb106-2906">        leaf_label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>leaf_label_func,</span>
<span id="cb106-2907">        contraction_marks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>contraction_marks,</span>
<span id="cb106-2908">        link_color_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>link_color_func,</span>
<span id="cb106-2909">        above_threshold_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>above_threshold_color,</span>
<span id="cb106-2910">        traversal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>traversal)</span>
<span id="cb106-2911"></span>
<span id="cb106-2912">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> no_plot:</span>
<span id="cb106-2913">        mh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(Z[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb106-2914">        _plot_dendrogram(icoord_list, dcoord_list, ivl, p, n, mh, orientation,</span>
<span id="cb106-2915">                         no_labels, color_list,</span>
<span id="cb106-2916">                         leaf_font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>leaf_font_size,</span>
<span id="cb106-2917">                         leaf_rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>leaf_rotation,</span>
<span id="cb106-2918">                         contraction_marks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>contraction_marks,</span>
<span id="cb106-2919">                         ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax,</span>
<span id="cb106-2920">                         above_threshold_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>above_threshold_color)</span>
<span id="cb106-2921"></span>
<span id="cb106-2922">    R[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"leaves_color_list"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _get_leaves_color_list(R)</span>
<span id="cb106-2923">    R[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'traversal'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> traversal</span>
<span id="cb106-2924">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> R</span>
<span id="cb106-2925"></span>
<span id="cb106-2926"></span>
<span id="cb106-2927"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _get_leaves_color_list(R):</span>
<span id="cb106-2928">    leaves_color_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(R[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'leaves'</span>])</span>
<span id="cb106-2929">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> link_x, link_y, link_color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(R[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'icoord'</span>],</span>
<span id="cb106-2930">                                          R[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dcoord'</span>],</span>
<span id="cb106-2931">                                          R[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'color_list'</span>]):</span>
<span id="cb106-2932">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (xi, yi) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(link_x, link_y):</span>
<span id="cb106-2933">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> yi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if yi is 0.0, the point is a leaf</span></span>
<span id="cb106-2934">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># xi of leaves are      5, 15, 25, 35, ... (see `iv_ticks`)</span></span>
<span id="cb106-2935">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># index of leaves are   0,  1,  2,  3, ... as below</span></span>
<span id="cb106-2936">                leaf_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(xi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb106-2937">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># each leaf has a same color of its link.</span></span>
<span id="cb106-2938">                leaves_color_list[leaf_index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> link_color</span>
<span id="cb106-2939">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> leaves_color_list</span>
<span id="cb106-2940"></span>
<span id="cb106-2941"></span>
<span id="cb106-2942"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _append_singleton_leaf_node(Z, p, n, level, lvs, ivl, leaf_label_func,</span>
<span id="cb106-2943">                                i, labels):</span>
<span id="cb106-2944">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the leaf id structure is not None and is a list then the caller</span></span>
<span id="cb106-2945">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to dendrogram has indicated that cluster id's corresponding to the</span></span>
<span id="cb106-2946">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># leaf nodes should be recorded.</span></span>
<span id="cb106-2947"></span>
<span id="cb106-2948">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> lvs <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-2949">        lvs.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i))</span>
<span id="cb106-2950"></span>
<span id="cb106-2951">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If leaf node labels are to be displayed...</span></span>
<span id="cb106-2952">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ivl <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-2953">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If a leaf_label_func has been provided, the label comes from the</span></span>
<span id="cb106-2954">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># string returned from the leaf_label_func, which is a function</span></span>
<span id="cb106-2955">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># passed to dendrogram.</span></span>
<span id="cb106-2956">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> leaf_label_func:</span>
<span id="cb106-2957">            ivl.append(leaf_label_func(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i)))</span>
<span id="cb106-2958">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-2959">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Otherwise, if the dendrogram caller has passed a labels list</span></span>
<span id="cb106-2960">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for the leaf nodes, use it.</span></span>
<span id="cb106-2961">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> labels <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-2962">                ivl.append(labels[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n)])</span>
<span id="cb106-2963">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-2964">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Otherwise, use the id as the label for the leaf.x</span></span>
<span id="cb106-2965">                ivl.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i)))</span>
<span id="cb106-2966"></span>
<span id="cb106-2967"></span>
<span id="cb106-2968"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _append_nonsingleton_leaf_node(Z, p, n, level, lvs, ivl, leaf_label_func,</span>
<span id="cb106-2969">                                   i, labels, show_leaf_counts):</span>
<span id="cb106-2970">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the leaf id structure is not None and is a list then the caller</span></span>
<span id="cb106-2971">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to dendrogram has indicated that cluster id's corresponding to the</span></span>
<span id="cb106-2972">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># leaf nodes should be recorded.</span></span>
<span id="cb106-2973"></span>
<span id="cb106-2974">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> lvs <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-2975">        lvs.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i))</span>
<span id="cb106-2976">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ivl <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-2977">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> leaf_label_func:</span>
<span id="cb106-2978">            ivl.append(leaf_label_func(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i)))</span>
<span id="cb106-2979">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-2980">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> show_leaf_counts:</span>
<span id="cb106-2981">                ivl.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"("</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Z[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">")"</span>)</span>
<span id="cb106-2982">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-2983">                ivl.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb106-2984"></span>
<span id="cb106-2985"></span>
<span id="cb106-2986"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _append_contraction_marks(Z, iv, i, n, contraction_marks):</span>
<span id="cb106-2987">    _append_contraction_marks_sub(Z, iv, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Z[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), n, contraction_marks)</span>
<span id="cb106-2988">    _append_contraction_marks_sub(Z, iv, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Z[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), n, contraction_marks)</span>
<span id="cb106-2989"></span>
<span id="cb106-2990"></span>
<span id="cb106-2991"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _append_contraction_marks_sub(Z, iv, i, n, contraction_marks):</span>
<span id="cb106-2992">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> n:</span>
<span id="cb106-2993">        contraction_marks.append((iv, Z[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]))</span>
<span id="cb106-2994">        _append_contraction_marks_sub(Z, iv, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Z[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), n, contraction_marks)</span>
<span id="cb106-2995">        _append_contraction_marks_sub(Z, iv, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Z[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), n, contraction_marks)</span>
<span id="cb106-2996"></span>
<span id="cb106-2997"></span>
<span id="cb106-2998"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _dendrogram_calculate_info(Z, p, truncate_mode,</span>
<span id="cb106-2999">                               color_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.inf, get_leaves<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb106-3000">                               orientation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb106-3001">                               count_sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, distance_sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb106-3002">                               show_leaf_counts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, iv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>,</span>
<span id="cb106-3003">                               ivl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[], n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, icoord_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[], dcoord_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[],</span>
<span id="cb106-3004">                               lvs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, mhr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb106-3005">                               current_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[], color_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[],</span>
<span id="cb106-3006">                               currently_below_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[],</span>
<span id="cb106-3007">                               leaf_label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb106-3008">                               contraction_marks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb106-3009">                               link_color_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb106-3010">                               above_threshold_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C0'</span>,</span>
<span id="cb106-3011">                               traversal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]):</span>
<span id="cb106-3012">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-3013"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Calculate the endpoints of the links as well as the labels for the</span></span>
<span id="cb106-3014"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    the dendrogram rooted at the node with index i. iv is the independent</span></span>
<span id="cb106-3015"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    variable value to plot the left-most leaf node below the root node i</span></span>
<span id="cb106-3016"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    (if orientation='top', this would be the left-most x value where the</span></span>
<span id="cb106-3017"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    plotting of this root node i and its descendents should begin).</span></span>
<span id="cb106-3018"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ivl is a list to store the labels of the leaf nodes. The leaf_label_func</span></span>
<span id="cb106-3019"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    is called whenever ivl != None, labels == None, and</span></span>
<span id="cb106-3020"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    leaf_label_func != None. When ivl != None and labels != None, the</span></span>
<span id="cb106-3021"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    labels list is used only for labeling the leaf nodes. When</span></span>
<span id="cb106-3022"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ivl == None, no labels are generated for leaf nodes.</span></span>
<span id="cb106-3023"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    When get_leaves==True, a list of leaves is built as they are visited</span></span>
<span id="cb106-3024"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    in the dendrogram.</span></span>
<span id="cb106-3025"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns a tuple with l being the independent variable coordinate that</span></span>
<span id="cb106-3026"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    corresponds to the midpoint of cluster to the left of cluster i if</span></span>
<span id="cb106-3027"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    i is non-singleton, otherwise the independent coordinate of the leaf</span></span>
<span id="cb106-3028"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    node if i is a leaf node.</span></span>
<span id="cb106-3029"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-3030"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-3031"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A tuple (left, w, h, md), where:</span></span>
<span id="cb106-3032"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      * left is the independent variable coordinate of the center of the</span></span>
<span id="cb106-3033"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        the U of the subtree</span></span>
<span id="cb106-3034"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      * w is the amount of space used for the subtree (in independent</span></span>
<span id="cb106-3035"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        variable units)</span></span>
<span id="cb106-3036"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      * h is the height of the subtree in dependent variable units</span></span>
<span id="cb106-3037"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      * md is the ``max(Z[*,2]``) for all nodes ``*`` below and including</span></span>
<span id="cb106-3038"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        the target node.</span></span>
<span id="cb106-3039"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-3040">    traversal.append(i)</span>
<span id="cb106-3041">    </span>
<span id="cb106-3042">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb106-3043">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid singleton cluster count n."</span>)</span>
<span id="cb106-3044"></span>
<span id="cb106-3045">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb106-3046">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid root cluster index i."</span>)</span>
<span id="cb106-3047"></span>
<span id="cb106-3048">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> truncate_mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lastp'</span>:</span>
<span id="cb106-3049">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the node is a leaf node but corresponds to a non-singleton</span></span>
<span id="cb106-3050">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cluster, its label is either the empty string or the number of</span></span>
<span id="cb106-3051">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># original observations belonging to cluster i.</span></span>
<span id="cb106-3052">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> n:</span>
<span id="cb106-3053">            d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb106-3054">            _append_nonsingleton_leaf_node(Z, p, n, level, lvs, ivl,</span>
<span id="cb106-3055">                                           leaf_label_func, i, labels,</span>
<span id="cb106-3056">                                           show_leaf_counts)</span>
<span id="cb106-3057">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> contraction_marks <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-3058">                _append_contraction_marks(Z, iv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span>, i, n, contraction_marks)</span>
<span id="cb106-3059">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (iv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, d)</span>
<span id="cb106-3060">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n:</span>
<span id="cb106-3061">            _append_singleton_leaf_node(Z, p, n, level, lvs, ivl,</span>
<span id="cb106-3062">                                        leaf_label_func, i, labels)</span>
<span id="cb106-3063">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (iv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>)</span>
<span id="cb106-3064">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> truncate_mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'level'</span>:</span>
<span id="cb106-3065">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p:</span>
<span id="cb106-3066">            d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb106-3067">            _append_nonsingleton_leaf_node(Z, p, n, level, lvs, ivl,</span>
<span id="cb106-3068">                                           leaf_label_func, i, labels,</span>
<span id="cb106-3069">                                           show_leaf_counts)</span>
<span id="cb106-3070">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> contraction_marks <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-3071">                _append_contraction_marks(Z, iv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span>, i, n, contraction_marks)</span>
<span id="cb106-3072">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (iv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, d)</span>
<span id="cb106-3073">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n:</span>
<span id="cb106-3074">            _append_singleton_leaf_node(Z, p, n, level, lvs, ivl,</span>
<span id="cb106-3075">                                        leaf_label_func, i, labels)</span>
<span id="cb106-3076">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (iv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>)</span>
<span id="cb106-3077">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> truncate_mode <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mlab'</span>,):</span>
<span id="cb106-3078">        msg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mode 'mlab' is deprecated in scipy 0.19.0 (it never worked)."</span></span>
<span id="cb106-3079">        warnings.warn(msg, <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">DeprecationWarning</span>)</span>
<span id="cb106-3080"></span>
<span id="cb106-3081">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Otherwise, only truncate if we have a leaf node.</span></span>
<span id="cb106-3082">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb106-3083">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only place leaves if they correspond to original observations.</span></span>
<span id="cb106-3084">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n:</span>
<span id="cb106-3085">        _append_singleton_leaf_node(Z, p, n, level, lvs, ivl,</span>
<span id="cb106-3086">                                    leaf_label_func, i, labels)</span>
<span id="cb106-3087">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (iv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>)</span>
<span id="cb106-3088"></span>
<span id="cb106-3089">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !!! Otherwise, we don't have a leaf node, so work on plotting a</span></span>
<span id="cb106-3090">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># non-leaf node.</span></span>
<span id="cb106-3091">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Actual indices of a and b</span></span>
<span id="cb106-3092">    aa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Z[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb106-3093">    ab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(Z[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb106-3094">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> aa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> n:</span>
<span id="cb106-3095">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The number of singletons below cluster a</span></span>
<span id="cb106-3096">        na <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z[aa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb106-3097">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The distance between a's two direct children.</span></span>
<span id="cb106-3098">        da <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z[aa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb106-3099">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-3100">        na <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-3101">        da <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb106-3102">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> n:</span>
<span id="cb106-3103">        nb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z[ab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb106-3104">        db <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z[ab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb106-3105">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-3106">        nb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-3107">        db <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb106-3108"></span>
<span id="cb106-3109">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> count_sort <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ascending'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> count_sort <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb106-3110">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If a has a count greater than b, it and its descendents should</span></span>
<span id="cb106-3111">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># be drawn to the right. Otherwise, to the left.</span></span>
<span id="cb106-3112">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> na <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> nb:</span>
<span id="cb106-3113">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The cluster index to draw to the left (ua) will be ab</span></span>
<span id="cb106-3114">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and the one to draw to the right (ub) will be aa</span></span>
<span id="cb106-3115">            ua <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ab</span>
<span id="cb106-3116">            ub <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aa</span>
<span id="cb106-3117">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-3118">            ua <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aa</span>
<span id="cb106-3119">            ub <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ab</span>
<span id="cb106-3120">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> count_sort <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'descending'</span>:</span>
<span id="cb106-3121">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If a has a count less than or equal to b, it and its</span></span>
<span id="cb106-3122">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># descendents should be drawn to the left. Otherwise, to</span></span>
<span id="cb106-3123">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the right.</span></span>
<span id="cb106-3124">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> na <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> nb:</span>
<span id="cb106-3125">            ua <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aa</span>
<span id="cb106-3126">            ub <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ab</span>
<span id="cb106-3127">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-3128">            ua <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ab</span>
<span id="cb106-3129">            ub <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aa</span>
<span id="cb106-3130">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> distance_sort <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ascending'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> distance_sort <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb106-3131">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If a has a distance greater than b, it and its descendents should</span></span>
<span id="cb106-3132">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># be drawn to the right. Otherwise, to the left.</span></span>
<span id="cb106-3133">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> da <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> db:</span>
<span id="cb106-3134">            ua <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ab</span>
<span id="cb106-3135">            ub <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aa</span>
<span id="cb106-3136">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-3137">            ua <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aa</span>
<span id="cb106-3138">            ub <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ab</span>
<span id="cb106-3139">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> distance_sort <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'descending'</span>:</span>
<span id="cb106-3140">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If a has a distance less than or equal to b, it and its</span></span>
<span id="cb106-3141">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># descendents should be drawn to the left. Otherwise, to</span></span>
<span id="cb106-3142">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the right.</span></span>
<span id="cb106-3143">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> da <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> db:</span>
<span id="cb106-3144">            ua <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aa</span>
<span id="cb106-3145">            ub <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ab</span>
<span id="cb106-3146">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-3147">            ua <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ab</span>
<span id="cb106-3148">            ub <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aa</span>
<span id="cb106-3149">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-3150">        ua <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aa</span>
<span id="cb106-3151">        ub <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ab</span>
<span id="cb106-3152"></span>
<span id="cb106-3153">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Updated iv variable and the amount of space used.</span></span>
<span id="cb106-3154">    (uiva, uwa, uah, uamd) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb106-3155">        _dendrogram_calculate_info(</span>
<span id="cb106-3156">            Z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Z, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>p,</span>
<span id="cb106-3157">            truncate_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>truncate_mode,</span>
<span id="cb106-3158">            color_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color_threshold,</span>
<span id="cb106-3159">            get_leaves<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_leaves,</span>
<span id="cb106-3160">            orientation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>orientation,</span>
<span id="cb106-3161">            labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels,</span>
<span id="cb106-3162">            count_sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>count_sort,</span>
<span id="cb106-3163">            distance_sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>distance_sort,</span>
<span id="cb106-3164">            show_leaf_counts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>show_leaf_counts,</span>
<span id="cb106-3165">            i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ua, iv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>iv, ivl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ivl, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n,</span>
<span id="cb106-3166">            icoord_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>icoord_list,</span>
<span id="cb106-3167">            dcoord_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dcoord_list, lvs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lvs,</span>
<span id="cb106-3168">            current_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>current_color,</span>
<span id="cb106-3169">            color_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color_list,</span>
<span id="cb106-3170">            currently_below_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>currently_below_threshold,</span>
<span id="cb106-3171">            leaf_label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>leaf_label_func,</span>
<span id="cb106-3172">            level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, contraction_marks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>contraction_marks,</span>
<span id="cb106-3173">            link_color_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>link_color_func,</span>
<span id="cb106-3174">            above_threshold_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>above_threshold_color,</span>
<span id="cb106-3175">            traversal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>traversal)</span>
<span id="cb106-3176"></span>
<span id="cb106-3177">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb106-3178">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> color_threshold <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> color_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb106-3179">        c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> above_threshold_color</span>
<span id="cb106-3180"></span>
<span id="cb106-3181">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> currently_below_threshold[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]:</span>
<span id="cb106-3182">            current_color[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (current_color[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(_link_line_colors)</span>
<span id="cb106-3183">        currently_below_threshold[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb106-3184">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-3185">        currently_below_threshold[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb106-3186">        c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _link_line_colors[current_color[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb106-3187"></span>
<span id="cb106-3188">    (uivb, uwb, ubh, ubmd) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb106-3189">        _dendrogram_calculate_info(</span>
<span id="cb106-3190">            Z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Z, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>p,</span>
<span id="cb106-3191">            truncate_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>truncate_mode,</span>
<span id="cb106-3192">            color_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color_threshold,</span>
<span id="cb106-3193">            get_leaves<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_leaves,</span>
<span id="cb106-3194">            orientation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>orientation,</span>
<span id="cb106-3195">            labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels,</span>
<span id="cb106-3196">            count_sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>count_sort,</span>
<span id="cb106-3197">            distance_sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>distance_sort,</span>
<span id="cb106-3198">            show_leaf_counts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>show_leaf_counts,</span>
<span id="cb106-3199">            i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ub, iv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>iv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> uwa, ivl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ivl, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n,</span>
<span id="cb106-3200">            icoord_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>icoord_list,</span>
<span id="cb106-3201">            dcoord_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dcoord_list, lvs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lvs,</span>
<span id="cb106-3202">            current_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>current_color,</span>
<span id="cb106-3203">            color_list<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color_list,</span>
<span id="cb106-3204">            currently_below_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>currently_below_threshold,</span>
<span id="cb106-3205">            leaf_label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>leaf_label_func,</span>
<span id="cb106-3206">            level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, contraction_marks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>contraction_marks,</span>
<span id="cb106-3207">            link_color_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>link_color_func,</span>
<span id="cb106-3208">            above_threshold_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>above_threshold_color,</span>
<span id="cb106-3209">            traversal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>traversal)</span>
<span id="cb106-3210"></span>
<span id="cb106-3211">    max_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(uamd, ubmd, h)</span>
<span id="cb106-3212"></span>
<span id="cb106-3213">    icoord_list.append([uiva, uiva, uivb, uivb])</span>
<span id="cb106-3214">    dcoord_list.append([uah, h, h, ubh])</span>
<span id="cb106-3215">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> link_color_func <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb106-3216">        v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> link_color_func(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i))</span>
<span id="cb106-3217">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(v, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb106-3218">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"link_color_func must return a matplotlib "</span></span>
<span id="cb106-3219">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color string!"</span>)</span>
<span id="cb106-3220">        color_list.append(v)</span>
<span id="cb106-3221">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-3222">        color_list.append(c)</span>
<span id="cb106-3223"></span>
<span id="cb106-3224">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (((uiva <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> uivb) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), uwa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> uwb, h, max_dist)</span>
<span id="cb106-3225"></span>
<span id="cb106-3226"></span>
<span id="cb106-3227"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_isomorphic(T1, T2):</span>
<span id="cb106-3228">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-3229"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Determine if two different cluster assignments are equivalent.</span></span>
<span id="cb106-3230"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-3231"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-3232"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    T1 : array_like</span></span>
<span id="cb106-3233"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        An assignment of singleton cluster ids to flat cluster ids.</span></span>
<span id="cb106-3234"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    T2 : array_like</span></span>
<span id="cb106-3235"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        An assignment of singleton cluster ids to flat cluster ids.</span></span>
<span id="cb106-3236"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-3237"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-3238"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    b : bool</span></span>
<span id="cb106-3239"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Whether the flat cluster assignments `T1` and `T2` are</span></span>
<span id="cb106-3240"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        equivalent.</span></span>
<span id="cb106-3241"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-3242"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-3243"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage: for a description of what a linkage matrix is.</span></span>
<span id="cb106-3244"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    fcluster: for the creation of flat cluster assignments.</span></span>
<span id="cb106-3245"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-3246"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-3247"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import fcluster, is_isomorphic</span></span>
<span id="cb106-3248"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import single, complete</span></span>
<span id="cb106-3249"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-3250"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Two flat cluster assignments can be isomorphic if they represent the same</span></span>
<span id="cb106-3251"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    cluster assignment, with different labels.</span></span>
<span id="cb106-3252"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    For example, we can use the `scipy.cluster.hierarchy.single`: method</span></span>
<span id="cb106-3253"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    and flatten the output to four clusters:</span></span>
<span id="cb106-3254"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-3255"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-3256"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-3257"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-3258"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = single(pdist(X))</span></span>
<span id="cb106-3259"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; T = fcluster(Z, 1, criterion='distance')</span></span>
<span id="cb106-3260"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; T</span></span>
<span id="cb106-3261"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([3, 3, 3, 4, 4, 4, 2, 2, 2, 1, 1, 1], dtype=int32)</span></span>
<span id="cb106-3262"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    We can then do the same using the</span></span>
<span id="cb106-3263"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `scipy.cluster.hierarchy.complete`: method:</span></span>
<span id="cb106-3264"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = complete(pdist(X))</span></span>
<span id="cb106-3265"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; T_ = fcluster(Z, 1.5, criterion='distance')</span></span>
<span id="cb106-3266"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; T_</span></span>
<span id="cb106-3267"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4], dtype=int32)</span></span>
<span id="cb106-3268"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    As we can see, in both cases we obtain four clusters and all the data</span></span>
<span id="cb106-3269"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    points are distributed in the same way - the only thing that changes</span></span>
<span id="cb106-3270"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    are the flat cluster labels (3 =&gt; 1, 4 =&gt;2, 2 =&gt;3 and 4 =&gt;1), so both</span></span>
<span id="cb106-3271"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    cluster assignments are isomorphic:</span></span>
<span id="cb106-3272"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; is_isomorphic(T, T_)</span></span>
<span id="cb106-3273"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    True</span></span>
<span id="cb106-3274"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-3275">    T1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(T1, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-3276">    T2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(T2, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-3277"></span>
<span id="cb106-3278">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(T1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> np.ndarray:</span>
<span id="cb106-3279">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T1 must be a numpy array.'</span>)</span>
<span id="cb106-3280">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(T2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> np.ndarray:</span>
<span id="cb106-3281">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T2 must be a numpy array.'</span>)</span>
<span id="cb106-3282"></span>
<span id="cb106-3283">    T1S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T1.shape</span>
<span id="cb106-3284">    T2S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T2.shape</span>
<span id="cb106-3285"></span>
<span id="cb106-3286">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(T1S) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb106-3287">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T1 must be one-dimensional.'</span>)</span>
<span id="cb106-3288">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(T2S) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb106-3289">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T2 must be one-dimensional.'</span>)</span>
<span id="cb106-3290">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> T1S[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> T2S[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]:</span>
<span id="cb106-3291">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T1 and T2 must have the same number of elements.'</span>)</span>
<span id="cb106-3292">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T1S[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb106-3293">    d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb106-3294">    d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb106-3295">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n):</span>
<span id="cb106-3296">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> T1[i] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> d1:</span>
<span id="cb106-3297">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> T2[i] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> d2:</span>
<span id="cb106-3298">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb106-3299">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> d1[T1[i]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> T2[i] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> d2[T2[i]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> T1[i]:</span>
<span id="cb106-3300">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb106-3301">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> T2[i] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> d2:</span>
<span id="cb106-3302">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb106-3303">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb106-3304">            d1[T1[i]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T2[i]</span>
<span id="cb106-3305">            d2[T2[i]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> T1[i]</span>
<span id="cb106-3306">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb106-3307"></span>
<span id="cb106-3308"></span>
<span id="cb106-3309"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> maxdists(Z):</span>
<span id="cb106-3310">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-3311"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return the maximum distance between any non-singleton cluster.</span></span>
<span id="cb106-3312"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-3313"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-3314"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-3315"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The hierarchical clustering encoded as a matrix. See</span></span>
<span id="cb106-3316"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``linkage`` for more information.</span></span>
<span id="cb106-3317"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-3318"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-3319"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    maxdists : ndarray</span></span>
<span id="cb106-3320"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A ``(n-1)`` sized numpy array of doubles; ``MD[i]`` represents</span></span>
<span id="cb106-3321"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        the maximum distance between any cluster (including</span></span>
<span id="cb106-3322"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        singletons) below and including the node with index i. More</span></span>
<span id="cb106-3323"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        specifically, ``MD[i] = Z[Q(i)-n, 2].max()`` where ``Q(i)`` is the</span></span>
<span id="cb106-3324"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        set of all node indices below and including node i.</span></span>
<span id="cb106-3325"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-3326"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-3327"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage: for a description of what a linkage matrix is.</span></span>
<span id="cb106-3328"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    is_monotonic: for testing for monotonicity of a linkage matrix.</span></span>
<span id="cb106-3329"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-3330"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-3331"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import median, maxdists</span></span>
<span id="cb106-3332"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-3333"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Given a linkage matrix ``Z``, `scipy.cluster.hierarchy.maxdists`</span></span>
<span id="cb106-3334"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    computes for each new cluster generated (i.e., for each row of the linkage</span></span>
<span id="cb106-3335"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    matrix) what is the maximum distance between any two child clusters.</span></span>
<span id="cb106-3336"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Due to the nature of hierarchical clustering, in many cases this is going</span></span>
<span id="cb106-3337"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    to be just the distance between the two child clusters that were merged</span></span>
<span id="cb106-3338"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    to form the current one - that is, Z[:,2].</span></span>
<span id="cb106-3339"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    However, for non-monotonic cluster assignments such as</span></span>
<span id="cb106-3340"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `scipy.cluster.hierarchy.median` clustering this is not always the</span></span>
<span id="cb106-3341"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    case: There may be cluster formations were the distance between the two</span></span>
<span id="cb106-3342"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    clusters merged is smaller than the distance between their children.</span></span>
<span id="cb106-3343"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    We can see this in an example:</span></span>
<span id="cb106-3344"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-3345"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-3346"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-3347"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-3348"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = median(pdist(X))</span></span>
<span id="cb106-3349"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z</span></span>
<span id="cb106-3350"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[ 0.        ,  1.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-3351"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 3.        ,  4.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-3352"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 9.        , 10.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-3353"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 6.        ,  7.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-3354"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 2.        , 12.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-3355"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 5.        , 13.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-3356"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 8.        , 15.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-3357"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [11.        , 14.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-3358"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [18.        , 19.        ,  3.        ,  6.        ],</span></span>
<span id="cb106-3359"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [16.        , 17.        ,  3.5       ,  6.        ],</span></span>
<span id="cb106-3360"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [20.        , 21.        ,  3.25      , 12.        ]])</span></span>
<span id="cb106-3361"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; maxdists(Z)</span></span>
<span id="cb106-3362"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1.        , 1.        , 1.        , 1.        , 1.11803399,</span></span>
<span id="cb106-3363"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           1.11803399, 1.11803399, 1.11803399, 3.        , 3.5       ,</span></span>
<span id="cb106-3364"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           3.5       ])</span></span>
<span id="cb106-3365"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Note that while the distance between the two clusters merged when creating the</span></span>
<span id="cb106-3366"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    last cluster is 3.25, there are two children (clusters 16 and 17) whose distance</span></span>
<span id="cb106-3367"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    is larger (3.5). Thus, `scipy.cluster.hierarchy.maxdists` returns 3.5 in</span></span>
<span id="cb106-3368"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    this case.</span></span>
<span id="cb106-3369"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-3370">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(Z, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.double)</span>
<span id="cb106-3371">    is_valid_linkage(Z, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>)</span>
<span id="cb106-3372"></span>
<span id="cb106-3373">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-3374">    MD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,))</span>
<span id="cb106-3375">    [Z] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _copy_arrays_if_base_present([Z])</span>
<span id="cb106-3376">    _hierarchy.get_max_dist_for_each_cluster(Z, MD, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n))</span>
<span id="cb106-3377">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> MD</span>
<span id="cb106-3378"></span>
<span id="cb106-3379"></span>
<span id="cb106-3380"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> maxinconsts(Z, R):</span>
<span id="cb106-3381">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-3382"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return the maximum inconsistency coefficient for each</span></span>
<span id="cb106-3383"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    non-singleton cluster and its children.</span></span>
<span id="cb106-3384"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-3385"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-3386"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-3387"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The hierarchical clustering encoded as a matrix. See</span></span>
<span id="cb106-3388"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        `linkage` for more information.</span></span>
<span id="cb106-3389"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    R : ndarray</span></span>
<span id="cb106-3390"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The inconsistency matrix.</span></span>
<span id="cb106-3391"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-3392"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-3393"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    MI : ndarray</span></span>
<span id="cb106-3394"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A monotonic ``(n-1)``-sized numpy array of doubles.</span></span>
<span id="cb106-3395"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-3396"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-3397"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage: for a description of what a linkage matrix is.</span></span>
<span id="cb106-3398"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    inconsistent: for the creation of a inconsistency matrix.</span></span>
<span id="cb106-3399"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-3400"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-3401"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import median, inconsistent, maxinconsts</span></span>
<span id="cb106-3402"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-3403"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Given a data set ``X``, we can apply a clustering method to obtain a</span></span>
<span id="cb106-3404"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage matrix ``Z``. `scipy.cluster.hierarchy.inconsistent` can</span></span>
<span id="cb106-3405"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    be also used to obtain the inconsistency matrix ``R`` associated to</span></span>
<span id="cb106-3406"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    this clustering process:</span></span>
<span id="cb106-3407"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-3408"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-3409"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-3410"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-3411"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = median(pdist(X))</span></span>
<span id="cb106-3412"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; R = inconsistent(Z)</span></span>
<span id="cb106-3413"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z</span></span>
<span id="cb106-3414"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[ 0.        ,  1.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-3415"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 3.        ,  4.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-3416"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 9.        , 10.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-3417"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 6.        ,  7.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-3418"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 2.        , 12.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-3419"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 5.        , 13.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-3420"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 8.        , 15.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-3421"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [11.        , 14.        ,  1.11803399,  3.        ],</span></span>
<span id="cb106-3422"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [18.        , 19.        ,  3.        ,  6.        ],</span></span>
<span id="cb106-3423"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [16.        , 17.        ,  3.5       ,  6.        ],</span></span>
<span id="cb106-3424"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [20.        , 21.        ,  3.25      , 12.        ]])</span></span>
<span id="cb106-3425"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; R</span></span>
<span id="cb106-3426"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[1.        , 0.        , 1.        , 0.        ],</span></span>
<span id="cb106-3427"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.        , 0.        , 1.        , 0.        ],</span></span>
<span id="cb106-3428"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.        , 0.        , 1.        , 0.        ],</span></span>
<span id="cb106-3429"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.        , 0.        , 1.        , 0.        ],</span></span>
<span id="cb106-3430"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.05901699, 0.08346263, 2.        , 0.70710678],</span></span>
<span id="cb106-3431"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.05901699, 0.08346263, 2.        , 0.70710678],</span></span>
<span id="cb106-3432"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.05901699, 0.08346263, 2.        , 0.70710678],</span></span>
<span id="cb106-3433"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.05901699, 0.08346263, 2.        , 0.70710678],</span></span>
<span id="cb106-3434"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.74535599, 1.08655358, 3.        , 1.15470054],</span></span>
<span id="cb106-3435"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.91202266, 1.37522872, 3.        , 1.15470054],</span></span>
<span id="cb106-3436"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [3.25      , 0.25      , 3.        , 0.        ]])</span></span>
<span id="cb106-3437"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Here, `scipy.cluster.hierarchy.maxinconsts` can be used to compute</span></span>
<span id="cb106-3438"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    the maximum value of the inconsistency statistic (the last column of</span></span>
<span id="cb106-3439"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ``R``) for each non-singleton cluster and its children:</span></span>
<span id="cb106-3440"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; maxinconsts(Z, R)</span></span>
<span id="cb106-3441"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([0.        , 0.        , 0.        , 0.        , 0.70710678,</span></span>
<span id="cb106-3442"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           0.70710678, 0.70710678, 0.70710678, 1.15470054, 1.15470054,</span></span>
<span id="cb106-3443"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           1.15470054])</span></span>
<span id="cb106-3444"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-3445">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(Z, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-3446">    R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(R, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-3447">    is_valid_linkage(Z, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>)</span>
<span id="cb106-3448">    is_valid_im(R, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'R'</span>)</span>
<span id="cb106-3449"></span>
<span id="cb106-3450">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-3451">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> Z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> R.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]:</span>
<span id="cb106-3452">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The inconsistency matrix and linkage matrix each "</span></span>
<span id="cb106-3453">                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"have a different number of rows."</span>)</span>
<span id="cb106-3454">    MI <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,))</span>
<span id="cb106-3455">    [Z, R] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _copy_arrays_if_base_present([Z, R])</span>
<span id="cb106-3456">    _hierarchy.get_max_Rfield_for_each_cluster(Z, R, MI, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb106-3457">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> MI</span>
<span id="cb106-3458"></span>
<span id="cb106-3459"></span>
<span id="cb106-3460"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> maxRstat(Z, R, i):</span>
<span id="cb106-3461">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-3462"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return the maximum statistic for each non-singleton cluster and its</span></span>
<span id="cb106-3463"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    children.</span></span>
<span id="cb106-3464"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-3465"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-3466"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : array_like</span></span>
<span id="cb106-3467"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The hierarchical clustering encoded as a matrix. See `linkage` for more</span></span>
<span id="cb106-3468"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        information.</span></span>
<span id="cb106-3469"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    R : array_like</span></span>
<span id="cb106-3470"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The inconsistency matrix.</span></span>
<span id="cb106-3471"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    i : int</span></span>
<span id="cb106-3472"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The column of `R` to use as the statistic.</span></span>
<span id="cb106-3473"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-3474"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-3475"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    MR : ndarray</span></span>
<span id="cb106-3476"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Calculates the maximum statistic for the i'th column of the</span></span>
<span id="cb106-3477"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        inconsistency matrix `R` for each non-singleton cluster</span></span>
<span id="cb106-3478"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        node. ``MR[j]`` is the maximum over ``R[Q(j)-n, i]``, where</span></span>
<span id="cb106-3479"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``Q(j)`` the set of all node ids corresponding to nodes below</span></span>
<span id="cb106-3480"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        and including ``j``.</span></span>
<span id="cb106-3481"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-3482"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-3483"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage: for a description of what a linkage matrix is.</span></span>
<span id="cb106-3484"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    inconsistent: for the creation of a inconsistency matrix.</span></span>
<span id="cb106-3485"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-3486"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-3487"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import median, inconsistent, maxRstat</span></span>
<span id="cb106-3488"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-3489"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Given a data set ``X``, we can apply a clustering method to obtain a</span></span>
<span id="cb106-3490"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    linkage matrix ``Z``. `scipy.cluster.hierarchy.inconsistent` can</span></span>
<span id="cb106-3491"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    be also used to obtain the inconsistency matrix ``R`` associated to</span></span>
<span id="cb106-3492"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    this clustering process:</span></span>
<span id="cb106-3493"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-3494"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-3495"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-3496"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-3497"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = median(pdist(X))</span></span>
<span id="cb106-3498"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; R = inconsistent(Z)</span></span>
<span id="cb106-3499"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; R</span></span>
<span id="cb106-3500"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[1.        , 0.        , 1.        , 0.        ],</span></span>
<span id="cb106-3501"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.        , 0.        , 1.        , 0.        ],</span></span>
<span id="cb106-3502"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.        , 0.        , 1.        , 0.        ],</span></span>
<span id="cb106-3503"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.        , 0.        , 1.        , 0.        ],</span></span>
<span id="cb106-3504"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.05901699, 0.08346263, 2.        , 0.70710678],</span></span>
<span id="cb106-3505"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.05901699, 0.08346263, 2.        , 0.70710678],</span></span>
<span id="cb106-3506"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.05901699, 0.08346263, 2.        , 0.70710678],</span></span>
<span id="cb106-3507"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.05901699, 0.08346263, 2.        , 0.70710678],</span></span>
<span id="cb106-3508"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.74535599, 1.08655358, 3.        , 1.15470054],</span></span>
<span id="cb106-3509"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [1.91202266, 1.37522872, 3.        , 1.15470054],</span></span>
<span id="cb106-3510"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [3.25      , 0.25      , 3.        , 0.        ]])</span></span>
<span id="cb106-3511"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `scipy.cluster.hierarchy.maxRstat` can be used to compute</span></span>
<span id="cb106-3512"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    the maximum value of each column of ``R``, for each non-singleton</span></span>
<span id="cb106-3513"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    cluster and its children:</span></span>
<span id="cb106-3514"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; maxRstat(Z, R, 0)</span></span>
<span id="cb106-3515"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1.        , 1.        , 1.        , 1.        , 1.05901699,</span></span>
<span id="cb106-3516"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           1.05901699, 1.05901699, 1.05901699, 1.74535599, 1.91202266,</span></span>
<span id="cb106-3517"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           3.25      ])</span></span>
<span id="cb106-3518"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; maxRstat(Z, R, 1)</span></span>
<span id="cb106-3519"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([0.        , 0.        , 0.        , 0.        , 0.08346263,</span></span>
<span id="cb106-3520"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           0.08346263, 0.08346263, 0.08346263, 1.08655358, 1.37522872,</span></span>
<span id="cb106-3521"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           1.37522872])</span></span>
<span id="cb106-3522"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; maxRstat(Z, R, 3)</span></span>
<span id="cb106-3523"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([0.        , 0.        , 0.        , 0.        , 0.70710678,</span></span>
<span id="cb106-3524"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           0.70710678, 0.70710678, 0.70710678, 1.15470054, 1.15470054,</span></span>
<span id="cb106-3525"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           1.15470054])</span></span>
<span id="cb106-3526"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-3527">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(Z, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-3528">    R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(R, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-3529">    is_valid_linkage(Z, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>)</span>
<span id="cb106-3530">    is_valid_im(R, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'R'</span>)</span>
<span id="cb106-3531">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(i) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb106-3532">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The third argument must be an integer.'</span>)</span>
<span id="cb106-3533">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb106-3534">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'i must be an integer between 0 and 3 inclusive.'</span>)</span>
<span id="cb106-3535"></span>
<span id="cb106-3536">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> Z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> R.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]:</span>
<span id="cb106-3537">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The inconsistency matrix and linkage matrix each "</span></span>
<span id="cb106-3538">                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"have a different number of rows."</span>)</span>
<span id="cb106-3539"></span>
<span id="cb106-3540">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-3541">    MR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,))</span>
<span id="cb106-3542">    [Z, R] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _copy_arrays_if_base_present([Z, R])</span>
<span id="cb106-3543">    _hierarchy.get_max_Rfield_for_each_cluster(Z, R, MR, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n), i)</span>
<span id="cb106-3544">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> MR</span>
<span id="cb106-3545"></span>
<span id="cb106-3546"></span>
<span id="cb106-3547"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> leaders(Z, T):</span>
<span id="cb106-3548">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb106-3549"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Return the root nodes in a hierarchical clustering.</span></span>
<span id="cb106-3550"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns the root nodes in a hierarchical clustering corresponding</span></span>
<span id="cb106-3551"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    to a cut defined by a flat cluster assignment vector ``T``. See</span></span>
<span id="cb106-3552"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    the ``fcluster`` function for more information on the format of ``T``.</span></span>
<span id="cb106-3553"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    For each flat cluster :math:`j` of the :math:`k` flat clusters</span></span>
<span id="cb106-3554"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    represented in the n-sized flat cluster assignment vector ``T``,</span></span>
<span id="cb106-3555"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    this function finds the lowest cluster node :math:`i` in the linkage</span></span>
<span id="cb106-3556"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    tree Z, such that:</span></span>
<span id="cb106-3557"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      * leaf descendants belong only to flat cluster j</span></span>
<span id="cb106-3558"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        (i.e., ``T[p]==j`` for all :math:`p` in :math:`S(i)`, where</span></span>
<span id="cb106-3559"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :math:`S(i)` is the set of leaf ids of descendant leaf nodes</span></span>
<span id="cb106-3560"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        with cluster node :math:`i`)</span></span>
<span id="cb106-3561"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      * there does not exist a leaf that is not a descendant with</span></span>
<span id="cb106-3562"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :math:`i` that also belongs to cluster :math:`j`</span></span>
<span id="cb106-3563"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        (i.e., ``T[q]!=j`` for all :math:`q` not in :math:`S(i)`). If</span></span>
<span id="cb106-3564"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        this condition is violated, ``T`` is not a valid cluster</span></span>
<span id="cb106-3565"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        assignment vector, and an exception will be thrown.</span></span>
<span id="cb106-3566"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb106-3567"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb106-3568"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Z : ndarray</span></span>
<span id="cb106-3569"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The hierarchical clustering encoded as a matrix. See</span></span>
<span id="cb106-3570"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        `linkage` for more information.</span></span>
<span id="cb106-3571"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    T : ndarray</span></span>
<span id="cb106-3572"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The flat cluster assignment vector.</span></span>
<span id="cb106-3573"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb106-3574"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb106-3575"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    L : ndarray</span></span>
<span id="cb106-3576"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The leader linkage node id's stored as a k-element 1-D array,</span></span>
<span id="cb106-3577"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        where ``k`` is the number of flat clusters found in ``T``.</span></span>
<span id="cb106-3578"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``L[j]=i`` is the linkage cluster node id that is the</span></span>
<span id="cb106-3579"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        leader of flat cluster with id M[j]. If ``i &lt; n``, ``i``</span></span>
<span id="cb106-3580"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        corresponds to an original observation, otherwise it</span></span>
<span id="cb106-3581"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        corresponds to a non-singleton cluster.</span></span>
<span id="cb106-3582"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    M : ndarray</span></span>
<span id="cb106-3583"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The leader linkage node id's stored as a k-element 1-D array, where</span></span>
<span id="cb106-3584"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ``k`` is the number of flat clusters found in ``T``. This allows the</span></span>
<span id="cb106-3585"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        set of flat cluster ids to be any arbitrary set of ``k`` integers.</span></span>
<span id="cb106-3586"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        For example: if ``L[3]=2`` and ``M[3]=8``, the flat cluster with</span></span>
<span id="cb106-3587"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        id 8's leader is linkage node 2.</span></span>
<span id="cb106-3588"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See Also</span></span>
<span id="cb106-3589"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-3590"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    fcluster: for the creation of flat cluster assignments.</span></span>
<span id="cb106-3591"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Examples</span></span>
<span id="cb106-3592"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    --------</span></span>
<span id="cb106-3593"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.cluster.hierarchy import ward, fcluster, leaders</span></span>
<span id="cb106-3594"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from scipy.spatial.distance import pdist</span></span>
<span id="cb106-3595"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Given a linkage matrix ``Z`` - obtained after apply a clustering method</span></span>
<span id="cb106-3596"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    to a dataset ``X`` - and a flat cluster assignment array ``T``:</span></span>
<span id="cb106-3597"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = [[0, 0], [0, 1], [1, 0],</span></span>
<span id="cb106-3598"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [0, 4], [0, 3], [1, 4],</span></span>
<span id="cb106-3599"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 0], [3, 0], [4, 1],</span></span>
<span id="cb106-3600"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ...      [4, 4], [3, 4], [4, 3]]</span></span>
<span id="cb106-3601"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z = ward(pdist(X))</span></span>
<span id="cb106-3602"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Z</span></span>
<span id="cb106-3603"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([[ 0.        ,  1.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-3604"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 3.        ,  4.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-3605"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 6.        ,  7.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-3606"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 9.        , 10.        ,  1.        ,  2.        ],</span></span>
<span id="cb106-3607"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 2.        , 12.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-3608"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 5.        , 13.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-3609"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [ 8.        , 14.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-3610"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [11.        , 15.        ,  1.29099445,  3.        ],</span></span>
<span id="cb106-3611"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [16.        , 17.        ,  5.77350269,  6.        ],</span></span>
<span id="cb106-3612"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [18.        , 19.        ,  5.77350269,  6.        ],</span></span>
<span id="cb106-3613"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           [20.        , 21.        ,  8.16496581, 12.        ]])</span></span>
<span id="cb106-3614"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; T = fcluster(Z, 3, criterion='distance')</span></span>
<span id="cb106-3615"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; T</span></span>
<span id="cb106-3616"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4], dtype=int32)</span></span>
<span id="cb106-3617"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `scipy.cluster.hierarchy.leaders` returns the indices of the nodes</span></span>
<span id="cb106-3618"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    in the dendrogram that are the leaders of each flat cluster:</span></span>
<span id="cb106-3619"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; L, M = leaders(Z, T)</span></span>
<span id="cb106-3620"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; L</span></span>
<span id="cb106-3621"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([16, 17, 18, 19], dtype=int32)</span></span>
<span id="cb106-3622"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    (remember that indices 0-11 point to the 12 data points in ``X``,</span></span>
<span id="cb106-3623"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    whereas indices 12-22 point to the 11 rows of ``Z``)</span></span>
<span id="cb106-3624"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    `scipy.cluster.hierarchy.leaders` also returns the indices of</span></span>
<span id="cb106-3625"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    the flat clusters in ``T``:</span></span>
<span id="cb106-3626"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; M</span></span>
<span id="cb106-3627"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    array([1, 2, 3, 4], dtype=int32)</span></span>
<span id="cb106-3628"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb106-3629">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(Z, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-3630">    T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(T, order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>)</span>
<span id="cb106-3631">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> np.ndarray <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> T.dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'i'</span>:</span>
<span id="cb106-3632">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T must be a one-dimensional numpy array of integers.'</span>)</span>
<span id="cb106-3633">    is_valid_linkage(Z, throw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>)</span>
<span id="cb106-3634">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> Z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb106-3635">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mismatch: len(T)!=Z.shape[0] + 1.'</span>)</span>
<span id="cb106-3636"></span>
<span id="cb106-3637">    Cl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.unique(T)</span>
<span id="cb106-3638">    kk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(Cl)</span>
<span id="cb106-3639">    L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((kk,), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'i'</span>)</span>
<span id="cb106-3640">    M <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((kk,), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'i'</span>)</span>
<span id="cb106-3641">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb106-3642">    [Z, T] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _copy_arrays_if_base_present([Z, T])</span>
<span id="cb106-3643">    s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _hierarchy.leaders(Z, T, L, M, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(kk), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n))</span>
<span id="cb106-3644">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb106-3645">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T is not a valid assignment vector. Error found '</span></span>
<span id="cb106-3646">                          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'when examining linkage node </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> (&lt; 2n-1).'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> s)</span>
<span id="cb106-3647">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (L, M)</span></code></pre></div>
</div>
</section>
</section>
<section id="implementing-dendrogram-cuts-in-plotly" class="level2">
<h2 class="anchored" data-anchor-id="implementing-dendrogram-cuts-in-plotly">Implementing Dendrogram Cuts in Plotly</h2>
<section id="modification-of-create_dendrogram-function-and-_dendrogram-class" class="level3">
<h3 class="anchored" data-anchor-id="modification-of-create_dendrogram-function-and-_dendrogram-class">Modification of <code>create_dendrogram</code> function and <code>_Dendrogram</code> class</h3>
<p>To implement cuts, the basic modification to be made is including truncation parameters such as <code>truncate_mode</code> and <code>p</code> to all wrappers around the scipy’s <code>dendrogram</code> function. The following changes are made:</p>
<ul>
<li><p><code>create_dendrogram</code> now includes <code>p</code> and <code>truncate_mode</code> as parameters</p></li>
<li><p>the plotly class <code>_Dendrogram</code> now has both <code>p</code> and <code>truncate_mode</code> as object parameters</p></li>
<li><p>the <code>get_dendrogram_traces</code> method now passes on these parameters to its call to scipy’s <code>dendogram</code> function</p></li>
</ul>
<div id="cell-134" class="cell" hidden="true" data-execution_count="9">
<div class="sourceCode cell-code" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb107-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> __future__ <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> absolute_import</span>
<span id="cb107-2"></span>
<span id="cb107-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OrderedDict</span>
<span id="cb107-4"></span>
<span id="cb107-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> plotly <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> exceptions, optional_imports</span>
<span id="cb107-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> plotly.graph_objs <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> graph_objs</span>
<span id="cb107-7"></span>
<span id="cb107-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optional imports, may be None for users that only use our core functionality.</span></span>
<span id="cb107-9">np <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optional_imports.get_module(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numpy"</span>)</span>
<span id="cb107-10">scp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optional_imports.get_module(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scipy"</span>)</span>
<span id="cb107-11">sch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optional_imports.get_module(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scipy.cluster.hierarchy"</span>)</span>
<span id="cb107-12">scs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optional_imports.get_module(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scipy.spatial"</span>)</span>
<span id="cb107-13"></span>
<span id="cb107-14"></span>
<span id="cb107-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_dendrogram(</span>
<span id="cb107-16">    X,</span>
<span id="cb107-17">    p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,</span>
<span id="cb107-18">    truncate_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb107-19">    orientation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>,</span>
<span id="cb107-20">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb107-21">    colorscale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb107-22">    distfun<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb107-23">    linkagefun<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: sch.linkage(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"complete"</span>),</span>
<span id="cb107-24">    hovertext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb107-25">    color_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb107-26">    leaf_label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb107-27">    </span>
<span id="cb107-28">):</span>
<span id="cb107-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb107-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Function that returns a dendrogram Plotly figure object. This is a thin, modified</span></span>
<span id="cb107-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    wrapper around scipy.cluster.hierarchy.dendrogram that includes truncation parameters.</span></span>
<span id="cb107-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb107-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    See also https://dash.plot.ly/dash-bio/clustergram.</span></span>
<span id="cb107-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param (ndarray) X: Matrix of observations as array of arrays</span></span>
<span id="cb107-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param (str) orientation: 'top', 'right', 'bottom', or 'left'</span></span>
<span id="cb107-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param (list) labels: List of axis category labels(observation labels)</span></span>
<span id="cb107-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param (list) colorscale: Optional colorscale for the dendrogram tree.</span></span>
<span id="cb107-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                              Requires 8 colors to be specified, the 7th of</span></span>
<span id="cb107-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                              which is ignored.  With scipy&gt;=1.5.0, the 2nd, 3rd</span></span>
<span id="cb107-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                              and 6th are used twice as often as the others.</span></span>
<span id="cb107-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                              Given a shorter list, the missing values are</span></span>
<span id="cb107-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                              replaced with defaults and with a longer list the</span></span>
<span id="cb107-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                              extra values are ignored.</span></span>
<span id="cb107-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param (function) distfun: Function to compute the pairwise distance from</span></span>
<span id="cb107-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                               the observations</span></span>
<span id="cb107-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param (function) linkagefun: Function to compute the linkage matrix from</span></span>
<span id="cb107-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                               the pairwise distances</span></span>
<span id="cb107-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param (list[list]) hovertext: List of hovertext for constituent traces of dendrogram</span></span>
<span id="cb107-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                               clusters</span></span>
<span id="cb107-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    :param (double) color_threshold: Value at which the separation of clusters will be made</span></span>
<span id="cb107-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Example 1: Simple bottom oriented dendrogram</span></span>
<span id="cb107-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from plotly.figure_factory import create_dendrogram</span></span>
<span id="cb107-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; import numpy as np</span></span>
<span id="cb107-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = np.random.rand(10,10)</span></span>
<span id="cb107-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fig = create_dendrogram(X)</span></span>
<span id="cb107-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fig.show()</span></span>
<span id="cb107-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Example 2: Dendrogram to put on the left of the heatmap</span></span>
<span id="cb107-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb107-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from plotly.figure_factory import create_dendrogram</span></span>
<span id="cb107-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; import numpy as np</span></span>
<span id="cb107-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; X = np.random.rand(5,5)</span></span>
<span id="cb107-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; names = ['Jack', 'Oxana', 'John', 'Chelsea', 'Mark']</span></span>
<span id="cb107-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; dendro = create_dendrogram(X, orientation='right', labels=names)</span></span>
<span id="cb107-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; dendro.update_layout({'width':700, 'height':500}) # doctest: +SKIP</span></span>
<span id="cb107-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; dendro.show()</span></span>
<span id="cb107-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Example 3: Dendrogram with Pandas</span></span>
<span id="cb107-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb107-68"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; from plotly.figure_factory import create_dendrogram</span></span>
<span id="cb107-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; import numpy as np</span></span>
<span id="cb107-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; import pandas as pd</span></span>
<span id="cb107-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; Index= ['A','B','C','D','E','F','G','H','I','J']</span></span>
<span id="cb107-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; df = pd.DataFrame(abs(np.random.randn(10, 10)), index=Index)</span></span>
<span id="cb107-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fig = create_dendrogram(df, labels=Index)</span></span>
<span id="cb107-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    &gt;&gt;&gt; fig.show()</span></span>
<span id="cb107-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb107-76">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> scp <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> scs <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> sch:</span>
<span id="cb107-77">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ImportError</span>(</span>
<span id="cb107-78">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FigureFactory.create_dendrogram requires scipy, </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb107-79"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                            scipy.spatial and scipy.hierarchy"</span></span>
<span id="cb107-80">        )</span>
<span id="cb107-81"></span>
<span id="cb107-82">    s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.shape</span>
<span id="cb107-83">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(s) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb107-84">        exceptions.PlotlyError(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X should be 2-dimensional array."</span>)</span>
<span id="cb107-85"></span>
<span id="cb107-86">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> distfun <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb107-87">        distfun <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scs.distance.pdist</span>
<span id="cb107-88"></span>
<span id="cb107-89">    dendrogram <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _Dendrogram(</span>
<span id="cb107-90">        X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>X,</span>
<span id="cb107-91">        p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>p,</span>
<span id="cb107-92">        truncate_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>truncate_mode,</span>
<span id="cb107-93">        orientation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>orientation,</span>
<span id="cb107-94">        labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels,</span>
<span id="cb107-95">        colorscale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colorscale,</span>
<span id="cb107-96">        distfun<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>distfun,</span>
<span id="cb107-97">        linkagefun<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>linkagefun,</span>
<span id="cb107-98">        hovertext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hovertext,</span>
<span id="cb107-99">        color_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color_threshold,</span>
<span id="cb107-100">        leaf_label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>leaf_label_func,</span>
<span id="cb107-101">    )</span>
<span id="cb107-102"></span>
<span id="cb107-103">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> graph_objs.Figure(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dendrogram.data, layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dendrogram.layout)</span>
<span id="cb107-104"></span>
<span id="cb107-105"></span>
<span id="cb107-106"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> _Dendrogram(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span>):</span>
<span id="cb107-107">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Refer to FigureFactory.create_dendrogram() for docstring."""</span></span>
<span id="cb107-108"></span>
<span id="cb107-109">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(</span>
<span id="cb107-110">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb107-111">        X,</span>
<span id="cb107-112">        p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,</span>
<span id="cb107-113">        truncate_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb107-114">        orientation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>,</span>
<span id="cb107-115">        labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb107-116">        colorscale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb107-117">        width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.inf,</span>
<span id="cb107-118">        height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.inf,</span>
<span id="cb107-119">        xaxis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"xaxis"</span>,</span>
<span id="cb107-120">        yaxis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yaxis"</span>,</span>
<span id="cb107-121">        distfun<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb107-122">        linkagefun<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: sch.linkage(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"complete"</span>),</span>
<span id="cb107-123">        hovertext<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb107-124">        color_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb107-125">        leaf_label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb107-126">    ):</span>
<span id="cb107-127">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p</span>
<span id="cb107-128">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.truncate_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>truncate_mode</span>
<span id="cb107-129">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.orientation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>orientation</span>
<span id="cb107-130">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> labels</span>
<span id="cb107-131">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xaxis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xaxis</span>
<span id="cb107-132">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yaxis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yaxis</span>
<span id="cb107-133">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb107-134">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.leaves <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb107-135">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sign <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xaxis: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yaxis: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>}</span>
<span id="cb107-136">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xaxis: {}, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yaxis: {}}</span>
<span id="cb107-137">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.leaf_label_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> leaf_label_func</span>
<span id="cb107-138"></span>
<span id="cb107-139">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.orientation <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>]:</span>
<span id="cb107-140">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sign[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xaxis] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb107-141">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb107-142">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sign[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xaxis] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb107-143"></span>
<span id="cb107-144">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.orientation <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>]:</span>
<span id="cb107-145">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sign[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yaxis] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb107-146">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb107-147">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sign[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yaxis] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb107-148"></span>
<span id="cb107-149">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> distfun <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb107-150">            distfun <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scs.distance.pdist</span>
<span id="cb107-151"></span>
<span id="cb107-152">        (dd_traces, xvals, yvals, ordered_labels, leaves) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_dendrogram_traces(</span>
<span id="cb107-153">            X, colorscale, distfun, linkagefun, hovertext, color_threshold, </span>
<span id="cb107-154">        )</span>
<span id="cb107-155"></span>
<span id="cb107-156">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ordered_labels</span>
<span id="cb107-157">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.leaves <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> leaves</span>
<span id="cb107-158">        yvals_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yvals.flatten()</span>
<span id="cb107-159">        xvals_flat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xvals.flatten()</span>
<span id="cb107-160"></span>
<span id="cb107-161">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.zero_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb107-162"></span>
<span id="cb107-163">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(yvals_flat)):</span>
<span id="cb107-164">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> yvals_flat[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> xvals_flat[i] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.zero_vals:</span>
<span id="cb107-165">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.zero_vals.append(xvals_flat[i])</span>
<span id="cb107-166"></span>
<span id="cb107-167">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.zero_vals) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(yvals) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb107-168">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the length of zero_vals is larger than the length of yvals,</span></span>
<span id="cb107-169">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># it means that there are wrong vals because of the identicial samples.</span></span>
<span id="cb107-170">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Three and more identicial samples will make the yvals of spliting</span></span>
<span id="cb107-171">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># center into 0 and it will accidentally take it as leaves.</span></span>
<span id="cb107-172">            l_border <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.zero_vals))</span>
<span id="cb107-173">            r_border <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.zero_vals))</span>
<span id="cb107-174">            correct_leaves_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(</span>
<span id="cb107-175">                l_border, r_border <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((r_border <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> l_border) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(yvals))</span>
<span id="cb107-176">            )</span>
<span id="cb107-177">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Regenerating the leaves pos from the self.zero_vals with equally intervals.</span></span>
<span id="cb107-178">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.zero_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [v <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> correct_leaves_pos]</span>
<span id="cb107-179"></span>
<span id="cb107-180">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.zero_vals.sort()</span>
<span id="cb107-181">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.set_figure_layout(width, height)</span>
<span id="cb107-182">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dd_traces</span>
<span id="cb107-183"></span>
<span id="cb107-184">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_color_dict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, colorscale):</span>
<span id="cb107-185">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb107-186"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns colorscale used for dendrogram tree clusters.</span></span>
<span id="cb107-187"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :param (list) colorscale: Colors to use for the plot in rgb format.</span></span>
<span id="cb107-188"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :rtype (dict): A dict of default colors mapped to the user colorscale.</span></span>
<span id="cb107-189"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb107-190"></span>
<span id="cb107-191">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># These are the color codes returned for dendrograms</span></span>
<span id="cb107-192">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We're replacing them with nicer colors</span></span>
<span id="cb107-193">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This list is the colors that can be used by dendrogram, which were</span></span>
<span id="cb107-194">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># determined as the combination of the default above_threshold_color and</span></span>
<span id="cb107-195">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the default color palette (see scipy/cluster/hierarchy.py)</span></span>
<span id="cb107-196">        d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb107-197">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>,</span>
<span id="cb107-198">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"g"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>,</span>
<span id="cb107-199">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>,</span>
<span id="cb107-200">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyan"</span>,</span>
<span id="cb107-201">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"magenta"</span>,</span>
<span id="cb107-202">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yellow"</span>,</span>
<span id="cb107-203">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>,</span>
<span id="cb107-204">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: 'w' doesn't seem to be in the default color</span></span>
<span id="cb107-205">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># palette in scipy/cluster/hierarchy.py</span></span>
<span id="cb107-206">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>,</span>
<span id="cb107-207">        }</span>
<span id="cb107-208">        default_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OrderedDict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(d.items(), key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> t: t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span>
<span id="cb107-209"></span>
<span id="cb107-210">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> colorscale <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb107-211">            rgb_colorscale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb107-212">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(0,116,217)"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># blue</span></span>
<span id="cb107-213">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(35,205,205)"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cyan</span></span>
<span id="cb107-214">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(61,153,112)"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># green</span></span>
<span id="cb107-215">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(40,35,35)"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># black</span></span>
<span id="cb107-216">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(133,20,75)"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># magenta</span></span>
<span id="cb107-217">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(255,65,54)"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># red</span></span>
<span id="cb107-218">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(255,255,255)"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># white</span></span>
<span id="cb107-219">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(255,220,0)"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># yellow</span></span>
<span id="cb107-220">            ]</span>
<span id="cb107-221">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb107-222">            rgb_colorscale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colorscale</span>
<span id="cb107-223"></span>
<span id="cb107-224">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(default_colors.keys())):</span>
<span id="cb107-225">            k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(default_colors.keys())[i]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PY3 won't index keys</span></span>
<span id="cb107-226">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(rgb_colorscale):</span>
<span id="cb107-227">                default_colors[k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rgb_colorscale[i]</span>
<span id="cb107-228"></span>
<span id="cb107-229">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add support for cyclic format colors as introduced in scipy===1.5.0</span></span>
<span id="cb107-230">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># before this, the colors were named 'r', 'b', 'y' etc., now they are</span></span>
<span id="cb107-231">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># named 'C0', 'C1', etc. To keep the colors consistent regardless of the</span></span>
<span id="cb107-232">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scipy version, we try as much as possible to map the new colors to the</span></span>
<span id="cb107-233">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># old colors</span></span>
<span id="cb107-234">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this mapping was found by inpecting scipy/cluster/hierarchy.py (see</span></span>
<span id="cb107-235">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># comment above).</span></span>
<span id="cb107-236">        new_old_color_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb107-237">            (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>),</span>
<span id="cb107-238">            (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"g"</span>),</span>
<span id="cb107-239">            (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>),</span>
<span id="cb107-240">            (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>),</span>
<span id="cb107-241">            (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C4"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m"</span>),</span>
<span id="cb107-242">            (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C5"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>),</span>
<span id="cb107-243">            (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>),</span>
<span id="cb107-244">            (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C7"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"g"</span>),</span>
<span id="cb107-245">            (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C8"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>),</span>
<span id="cb107-246">            (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C9"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>),</span>
<span id="cb107-247">        ]</span>
<span id="cb107-248">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> nc, oc <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> new_old_color_map:</span>
<span id="cb107-249">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb107-250">                default_colors[nc] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> default_colors[oc]</span>
<span id="cb107-251">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">KeyError</span>:</span>
<span id="cb107-252">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># it could happen that the old color isn't found (if a custom</span></span>
<span id="cb107-253">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># colorscale was specified), in this case we set it to an</span></span>
<span id="cb107-254">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># arbitrary default.</span></span>
<span id="cb107-255">                default_colors[n] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(0,116,217)"</span></span>
<span id="cb107-256"></span>
<span id="cb107-257">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> default_colors</span>
<span id="cb107-258"></span>
<span id="cb107-259">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_axis_layout(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, axis_key):</span>
<span id="cb107-260">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb107-261"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Sets and returns default axis object for dendrogram figure.</span></span>
<span id="cb107-262"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :param (str) axis_key: E.g., 'xaxis', 'xaxis1', 'yaxis', yaxis1', etc.</span></span>
<span id="cb107-263"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :rtype (dict): An axis_key dictionary with set parameters.</span></span>
<span id="cb107-264"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb107-265">        axis_defaults <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb107-266">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear"</span>,</span>
<span id="cb107-267">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ticks"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outside"</span>,</span>
<span id="cb107-268">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mirror"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"allticks"</span>,</span>
<span id="cb107-269">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rangemode"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tozero"</span>,</span>
<span id="cb107-270">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"showticklabels"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb107-271">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zeroline"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb107-272">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"showgrid"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb107-273">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"showline"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb107-274">        }</span>
<span id="cb107-275"></span>
<span id="cb107-276">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb107-277">            axis_key_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xaxis</span>
<span id="cb107-278">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.orientation <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>]:</span>
<span id="cb107-279">                axis_key_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yaxis</span>
<span id="cb107-280">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> axis_key_labels <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layout:</span>
<span id="cb107-281">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layout[axis_key_labels] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb107-282">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layout[axis_key_labels][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tickvals"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb107-283">                zv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sign[axis_key] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> zv <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.zero_vals</span>
<span id="cb107-284">            ]</span>
<span id="cb107-285">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layout[axis_key_labels][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ticktext"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels</span>
<span id="cb107-286">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layout[axis_key_labels][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tickmode"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"array"</span></span>
<span id="cb107-287"></span>
<span id="cb107-288">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layout[axis_key].update(axis_defaults)</span>
<span id="cb107-289"></span>
<span id="cb107-290">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layout[axis_key]</span>
<span id="cb107-291"></span>
<span id="cb107-292">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> set_figure_layout(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, width, height):</span>
<span id="cb107-293">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb107-294"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Sets and returns default layout object for dendrogram figure.</span></span>
<span id="cb107-295"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb107-296">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layout.update(</span>
<span id="cb107-297">            {</span>
<span id="cb107-298">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"showlegend"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb107-299">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"autosize"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb107-300">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hovermode"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"closest"</span>,</span>
<span id="cb107-301">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width"</span>: width,</span>
<span id="cb107-302">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span>: height,</span>
<span id="cb107-303">            }</span>
<span id="cb107-304">        )</span>
<span id="cb107-305"></span>
<span id="cb107-306">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.set_axis_layout(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xaxis)</span>
<span id="cb107-307">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.set_axis_layout(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yaxis)</span>
<span id="cb107-308"></span>
<span id="cb107-309">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layout</span>
<span id="cb107-310"></span>
<span id="cb107-311">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_dendrogram_traces(</span>
<span id="cb107-312">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, X, colorscale, distfun, linkagefun, hovertext, color_threshold</span>
<span id="cb107-313">    ):</span>
<span id="cb107-314">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb107-315"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Calculates all the elements needed for plotting a dendrogram.</span></span>
<span id="cb107-316"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :param (ndarray) X: Matrix of observations as array of arrays</span></span>
<span id="cb107-317"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :param (list) colorscale: Color scale for dendrogram tree clusters</span></span>
<span id="cb107-318"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :param (function) distfun: Function to compute the pairwise distance</span></span>
<span id="cb107-319"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                                   from the observations</span></span>
<span id="cb107-320"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :param (function) linkagefun: Function to compute the linkage matrix</span></span>
<span id="cb107-321"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                                      from the pairwise distances</span></span>
<span id="cb107-322"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :param (list) hovertext: List of hovertext for constituent traces of dendrogram</span></span>
<span id="cb107-323"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :rtype (tuple): Contains all the traces in the following order:</span></span>
<span id="cb107-324"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            (a) trace_list: List of Plotly trace objects for dendrogram tree</span></span>
<span id="cb107-325"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            (b) icoord: All X points of the dendrogram tree as array of arrays</span></span>
<span id="cb107-326"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                with length 4</span></span>
<span id="cb107-327"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            (c) dcoord: All Y points of the dendrogram tree as array of arrays</span></span>
<span id="cb107-328"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                with length 4</span></span>
<span id="cb107-329"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            (d) ordered_labels: leaf labels in the order they are going to</span></span>
<span id="cb107-330"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                appear on the plot</span></span>
<span id="cb107-331"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            (e) P['leaves']: left-to-right traversal of the leaves</span></span>
<span id="cb107-332"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb107-333">        d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distfun(X)</span>
<span id="cb107-334">        Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linkagefun(d)</span>
<span id="cb107-335">        P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sch.dendrogram(</span>
<span id="cb107-336">            Z,</span>
<span id="cb107-337">            p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.p,</span>
<span id="cb107-338">            truncate_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.truncate_mode,</span>
<span id="cb107-339">            orientation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.orientation,</span>
<span id="cb107-340">            labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels,</span>
<span id="cb107-341">            no_plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb107-342">            color_threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color_threshold,</span>
<span id="cb107-343">            leaf_label_func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.leaf_label_func</span>
<span id="cb107-344">        )</span>
<span id="cb107-345"></span>
<span id="cb107-346">        icoord <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(P[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"icoord"</span>])</span>
<span id="cb107-347">        dcoord <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(P[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dcoord"</span>])</span>
<span id="cb107-348">        ordered_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(P[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ivl"</span>])</span>
<span id="cb107-349">        color_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(P[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color_list"</span>])</span>
<span id="cb107-350">        colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_color_dict(colorscale)</span>
<span id="cb107-351"></span>
<span id="cb107-352">        trace_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb107-353"></span>
<span id="cb107-354">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(icoord)):</span>
<span id="cb107-355">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># xs and ys are arrays of 4 points that make up the '∩' shapes</span></span>
<span id="cb107-356">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># of the dendrogram tree</span></span>
<span id="cb107-357">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.orientation <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>]:</span>
<span id="cb107-358">                xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> icoord[i]</span>
<span id="cb107-359">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb107-360">                xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dcoord[i]</span>
<span id="cb107-361"></span>
<span id="cb107-362">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.orientation <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom"</span>]:</span>
<span id="cb107-363">                ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dcoord[i]</span>
<span id="cb107-364">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb107-365">                ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> icoord[i]</span>
<span id="cb107-366">            color_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color_list[i]</span>
<span id="cb107-367">            hovertext_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb107-368">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> hovertext:</span>
<span id="cb107-369">                hovertext_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hovertext[i]</span>
<span id="cb107-370">            trace <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(</span>
<span id="cb107-371">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scatter"</span>,</span>
<span id="cb107-372">                x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.multiply(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sign[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xaxis], xs), </span>
<span id="cb107-373">                y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.multiply(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sign[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yaxis], ys),</span>
<span id="cb107-374">                mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lines"</span>,</span>
<span id="cb107-375">                marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[color_key]),</span>
<span id="cb107-376">                text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hovertext_label,</span>
<span id="cb107-377">                hoverinfo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>,</span>
<span id="cb107-378">            )</span>
<span id="cb107-379"></span>
<span id="cb107-380">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb107-381">                x_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xaxis[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb107-382">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>:</span>
<span id="cb107-383">                x_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb107-384"></span>
<span id="cb107-385">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb107-386">                y_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.yaxis[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb107-387">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>:</span>
<span id="cb107-388">                y_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb107-389"></span>
<span id="cb107-390">            trace[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"xaxis"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x_index</span>
<span id="cb107-391">            trace[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yaxis"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y_index</span>
<span id="cb107-392"></span>
<span id="cb107-393">            trace_list.append(trace)</span>
<span id="cb107-394"></span>
<span id="cb107-395">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> trace_list, icoord, dcoord, ordered_labels, P[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"leaves"</span>]</span></code></pre></div>
</div>
</section>
<section id="creating-hovertext-robust-to-truncation" class="level3">
<h3 class="anchored" data-anchor-id="creating-hovertext-robust-to-truncation">Creating Hovertext Robust to Truncation</h3>
<ul>
<li><p>In Dendrograms with hovertext ranging a few hundred nodes, truncation is necessary</p></li>
<li><p>The Z matrix contains contains <img src="https://latex.codecogs.com/png.latex?n-1"> rows each representing new clusters, where <img src="https://latex.codecogs.com/png.latex?n"> is then number of data points.</p>
<ul>
<li>higher rows signify larger clusters, ordered by the distance metric of their child clusters.</li>
<li>the row indices also correspond to the <code>ClusterNode</code> instances in the node list returned by <code>scipy.cluster.hierarchy.to_tree</code></li>
<li>default indexing will have the root cluster as <img src="https://latex.codecogs.com/png.latex?n-2"></li>
</ul></li>
<li><p>Truncation when <code>truncate_mode</code> is set to ‘lastp’ is governed by parameter <code>p</code></p>
<ul>
<li><code>p</code> becomes the number of leaves to be displayed</li>
<li>there will be a total of <img src="https://latex.codecogs.com/png.latex?p%20-%201"> new clusters displayed</li>
<li>the node indices will then be in range [2n-2-p, 2n-2], or <code>range(2*n - 2 - p, 2*n - 1)</code></li>
</ul></li>
<li><p>If indices are shown</p></li>
<li><p>For UI considerations, a shift in <code>p</code> Simpler indices, <img src="https://latex.codecogs.com/png.latex?j"> can be transformations of default indices <img src="https://latex.codecogs.com/png.latex?i"> for UI considerations can be given by: <img src="https://latex.codecogs.com/png.latex?j%20=%202n-2%20-%20i"></p></li>
</ul>
</section>
</section>
</section>
<section id="visualization-techniques" class="level1">
<h1>Visualization Techniques</h1>
<section id="t-stochastic-neighbor-embedding-tsne" class="level2">
<h2 class="anchored" data-anchor-id="t-stochastic-neighbor-embedding-tsne">t-Stochastic Neighbor Embedding (TSNE)</h2>
<p>This is a technique that maps a higher dimensional space to a lower dimensional space while preserving probabilities of choosing analogous neighboring points between the two difference spaces.</p>
<p>The original paper can be read <a href="http://www.cs.toronto.edu/~hinton/absps/tsne.pdf">here</a> as well as a <a href="https://distill.pub/2016/misread-tsne/">post</a> about effective usage.</p>
</section>
<section id="uniform-manifold-approximation-umap" class="level2">
<h2 class="anchored" data-anchor-id="uniform-manifold-approximation-umap">Uniform Manifold Approximation (UMAP)</h2>
<p>This is another method of dimensional reduction but works well for non-linear mappings.</p>
</section>
<section id="implementation-with-plotly" class="level2">
<h2 class="anchored" data-anchor-id="implementation-with-plotly">Implementation with Plotly</h2>
<p>Here is an example of using Plotly to visualize data sets using both techniques, straight from their <a href="https://plotly.com/python/t-sne-and-umap-projections/">documentation</a></p>
<div id="cell-144" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb108-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.express <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> px</span>
<span id="cb108-2"></span>
<span id="cb108-3">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> px.data.iris()</span>
<span id="cb108-4">features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sepal_width"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sepal_length"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"petal_width"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"petal_length"</span>]</span>
<span id="cb108-5">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> px.scatter_matrix(df, dimensions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>features, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"species"</span>)</span>
<span id="cb108-6">fig.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-72-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-145" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb109" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb109-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.manifold <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TSNE, trustworthiness</span>
<span id="cb109-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.express <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> px</span>
<span id="cb109-3"></span>
<span id="cb109-4">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> px.data.iris()</span>
<span id="cb109-5"></span>
<span id="cb109-6">features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.loc[:, :<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'petal_width'</span>]</span>
<span id="cb109-7"></span>
<span id="cb109-8">tsne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TSNE(n_components<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb109-9">projections <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tsne.fit_transform(features)</span>
<span id="cb109-10"></span>
<span id="cb109-11">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> px.scatter(</span>
<span id="cb109-12">    projections, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb109-13">    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.species, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'color'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'species'</span>}</span>
<span id="cb109-14">)</span>
<span id="cb109-15">fig.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-73-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-146" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb110-1">score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trustworthiness(features.to_numpy(), projections, n_neighbors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb110-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Trustworthiness score is: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>score<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Trustworthiness score is: 0.9880657276995305</code></pre>
</div>
</div>
<div id="cell-147" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb112-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> umap <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> UMAP</span>
<span id="cb112-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.express <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> px</span>
<span id="cb112-3"></span>
<span id="cb112-4">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> px.data.iris()</span>
<span id="cb112-5"></span>
<span id="cb112-6">features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.loc[:, :<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'petal_width'</span>]</span>
<span id="cb112-7">umap_2d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UMAP(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n_components<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb112-8">umap_3d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UMAP(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n_components<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, n_neighbors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb112-9">proj_2d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> umap_2d.fit_transform(features)</span>
<span id="cb112-10">fig_2d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> px.scatter(proj_2d, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb112-11">                 color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.species, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'color'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'species'</span>}</span>
<span id="cb112-12">                )</span>
<span id="cb112-13">fig_2d.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>C:\Users\Jonathan\anaconda3\envs\py313\Lib\site-packages\umap\umap_.py:1952: UserWarning:

n_jobs value 1 overridden to 1 by setting random_state. Use no seed for parallelism.
</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ClusteringNotes_files/figure-html/cell-75-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-148" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb114-1">score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trustworthiness(features.to_numpy(), projections, n_neighbors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb114-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Trustworthiness score is: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>score<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Trustworthiness score is: 0.9880657276995305</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <guid>http://thenewexecutor.github.io/notes/ClusteringNotes.html</guid>
  <pubDate>Mon, 27 Oct 2025 06:25:28 GMT</pubDate>
</item>
<item>
  <title>Entropy Notes</title>
  <link>http://thenewexecutor.github.io/notes/EntropyNotes.html</link>
  <description><![CDATA[ 




<section id="entropy-notes" class="level1">
<h1>Entropy Notes</h1>
<section id="probability-notation" class="level3">
<h3 class="anchored" data-anchor-id="probability-notation">Probability Notation</h3>
<p>From David McKay’s <a href="https://www.inference.org.uk/itprnn/book.pdf"><em>Information Theory, Inference, and Learning Algorithms</em></a>, we acknowledge the following notation:</p>
<ul>
<li><strong>ensemble or random variable X</strong>: consists of the triple <img src="https://latex.codecogs.com/png.latex?(x,%20A_x,%20P_x)">
<ul>
<li><img src="https://latex.codecogs.com/png.latex?x"> is the <em>outcome</em> of the random variable <img src="https://latex.codecogs.com/png.latex?X"></li>
<li><img src="https://latex.codecogs.com/png.latex?A_x"> is the <em>alphabet</em> or set of possible values: <img src="https://latex.codecogs.com/png.latex?%5C%7Ba_1,%20a_2,%20...,%20a_i,%20...,%20a_I%5C%7D">
<ul>
<li>this is sometimes noted as <img src="https://latex.codecogs.com/png.latex?%5C%7Bx_1,%20x_2,%20...,%20x_i,%20...,%20x_I%5C%7D"></li>
</ul></li>
<li><img src="https://latex.codecogs.com/png.latex?P_x"> are the associated probabilities, <img src="https://latex.codecogs.com/png.latex?P(x=a_i)%20=%20p_i"> of these outcomes: <img src="https://latex.codecogs.com/png.latex?%5C%7Bp_1,%20p_2,%20...,%20p_i,%20...,%20p_I%5C%7D"></li>
</ul></li>
</ul>
</section>
<section id="shannon-information-of-measurement-x_i" class="level3">
<h3 class="anchored" data-anchor-id="shannon-information-of-measurement-x_i">Shannon Information of Measurement <img src="https://latex.codecogs.com/png.latex?x_i"></h3>
<p><img src="https://latex.codecogs.com/png.latex?h(x_i)%20=%20%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x_i)%7D%5CBig)%5Ctag%7B1%7D"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?P(x_i)"> is probability of outcome <img src="https://latex.codecogs.com/png.latex?x_i">.</p>
</section>
<section id="shannon-entropy-of-distribution-x" class="level3">
<h3 class="anchored" data-anchor-id="shannon-entropy-of-distribution-x">Shannon Entropy of Distribution X</h3>
<p><img src="https://latex.codecogs.com/png.latex?H(X)%20=%20E%5Cbig%5Bh(x_i)%5Cbig%5D%20=%20%5Csum_%7Bx%20%5Cin%20A_X%7D%20P(x)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x)%7D%5CBig)%5Ctag%7B2%7D"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?A_X"> is the <strong>alphabet</strong> or set of outcomes for random variable <img src="https://latex.codecogs.com/png.latex?X">. It’s also known as the <strong>marginal entropy</strong>.</p>
</section>
<section id="joint-entropy-of-distributions-x-y" class="level3">
<h3 class="anchored" data-anchor-id="joint-entropy-of-distributions-x-y">Joint Entropy of Distributions X, Y:</h3>
<p><img src="https://latex.codecogs.com/png.latex?H(X,Y)%20=%20%5Csum_%7Bx,%20y%20%5Cin%20A_XA_Y%7D%20P(x,y)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x,%20y)%7D%5CBig)%5Ctag%7B3%7D"></p>
<section id="independent-distributions" class="level4">
<h4 class="anchored" data-anchor-id="independent-distributions">Independent Distributions</h4>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AH(X,Y)%20&amp;=%20%5Csum_%7Bx,%20y%20%5Cin%20A_XA_Y%7D%20P(x,y)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x,%20y)%7D%5CBig)%5C%5C%0A%20%20%20%20%20%20%20&amp;=%20%5Csum_%7Bx%20%5Cin%20A_X%7D%5Csum_%7By%20%5Cin%20A_Y%7D%20P(x)P(y)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x)P(y)%7D%5CBig)%5C%5C%0A%20%20%20%20%20%20%20&amp;=%20%5Csum_%7Bx%20%5Cin%20A_X%7D%5Csum_%7By%20%5Cin%20A_Y%7D%20P(x)P(y)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x)%7D%5CBig)%20+%20%5Csum_%7Bx%20%5Cin%20A_X%7D%5Csum_%7By%20%5Cin%20A_Y%7D%20P(x)P(y)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(y)%7D%5CBig)%5C%5C%0A%20%20%20%20%20%20%20&amp;=%20%5Csum_%7Bx%20%5Cin%20A_X%7D%20P(x)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x)%7D%5CBig)%20+%20%5Csum_%7By%20%5Cin%20A_Y%7D%20P(y)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(y)%7D%5CBig)%5C%5C%0A%20%20%20%20%20%20%20&amp;=%20H(X)%20+%20H(Y)%0A%5Cend%7Balign%7D"></p>
</section>
</section>
<section id="conditional-entropies" class="level3">
<h3 class="anchored" data-anchor-id="conditional-entropies">Conditional Entropies:</h3>
<section id="conditional-entropy-of-x-given-yb_k" class="level4">
<h4 class="anchored" data-anchor-id="conditional-entropy-of-x-given-yb_k">Conditional Entropy of <img src="https://latex.codecogs.com/png.latex?X"> given <img src="https://latex.codecogs.com/png.latex?y=b_k">:</h4>
<p><img src="https://latex.codecogs.com/png.latex?H(X%7Cy=b_k)%20=%20%5Csum_i%20P(x_i%7Cy=b_k)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x_i%7Cy=b_k)%7D%5CBig)%5Ctag%7B4%7D"></p>
<p>which is simply the entropy of distribution <img src="https://latex.codecogs.com/png.latex?P(X%7Cy=b_k)">.</p>
</section>
<section id="conditional-entropy-of-x-given-y" class="level4">
<h4 class="anchored" data-anchor-id="conditional-entropy-of-x-given-y">Conditional Entropy of <img src="https://latex.codecogs.com/png.latex?X"> given <img src="https://latex.codecogs.com/png.latex?Y"></h4>
<p>is the average of (4) over <img src="https://latex.codecogs.com/png.latex?y">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AH(X%7CY)%20&amp;=%20%5Csum_%7By%20%5Cin%20A_y%7DP(y)%5CBigg%5B%5Csum_%7Bx%20%5Cin%20A_x%7D%20P(x%7Cy)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x%7Cy)%7D%5CBig)%5CBigg%5D%5C%5C%20%5Ctag%7B5%7D%0A&amp;=%20%5Csum_%7Bx,y%20%5Cin%20A_XA_Y%7D%20P(x,%20y)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x%7Cy)%7D%5CBig)%0A%5Cend%7Balign%7D"></p>
<p>which measures the uncertainty that remains about <img src="https://latex.codecogs.com/png.latex?x"> when <img src="https://latex.codecogs.com/png.latex?y"> is known.</p>
</section>
</section>
<section id="joint-entropy-and-conditional-entropy" class="level3">
<h3 class="anchored" data-anchor-id="joint-entropy-and-conditional-entropy">Joint Entropy and Conditional Entropy</h3>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7DH(X,Y)%20&amp;=%20%5Csum_%7Bx,%20y%20%5Cin%20A_XA_Y%7D%20P(x,y)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x,%20y)%7D%5CBig)%20%5C%5C%0A&amp;=%5Csum_%7Bx,%20y%20%5Cin%20A_XA_Y%7D%20P(x,%20y)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x%7Cy)P(y)%7D%5CBig)%20%5C%5C%0A&amp;=%20%5Csum_%7Bx,%20y%20%5Cin%20A_XA_Y%7D%20P(x,%20y)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x%7Cy)%7D%5CBig)%20+%5Csum_%7Bx,%20y%20%5Cin%20A_XA_Y%7D%20P(x,%20y)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(y)%7D%5CBig)%5C%5C%0A&amp;=%20H(X%7CY)%20+%20H(Y)%5C%5C%0A%5Cend%7Balign%7D"></p>
<p>Since entropy is symmetric, just like joint probability, the full relations are:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20H(X,Y)%20=%20H(Y,X)%20=%20H(X%7CY)%20+%20H(Y)%20=%20H(Y%7CX)%20+%20H(X)%5Ctag%7B6%7D"></p>
</section>
<section id="mutual-information-between-x-and-y" class="level3">
<h3 class="anchored" data-anchor-id="mutual-information-between-x-and-y">Mutual Information Between <img src="https://latex.codecogs.com/png.latex?X"> and <img src="https://latex.codecogs.com/png.latex?Y"></h3>
<p>We can define mutual information as the reduction of uncertainty of one variable when another is known.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AI(X;Y)%20&amp;%5Cequiv%20H(X)-%20H(X%7CY)%5Ctag%7B7%7D%5C%5C%0A&amp;=%20H(X)%20+H(Y)%20-%20H(X,Y)%5Ctag%7Bfrom%206%7D%5C%5C%0A&amp;=%20I(Y;X)%5C%5C%0A&amp;=H(Y)-%20H(Y%7CX)%5Ctag%7Bfrom%20symmetry%7D%5C%5C%0A%5Cend%7Balign%7D"></p>
<p>When put in terms of probabilities, we have the following equivalent definition:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7DI(X;Y)%20&amp;%5Cequiv%20%5Csum_%7Bx,%20y%20%5Cin%20A_XA_Y%7D%20P(x,y)%5Clog%5CBig(%5Cfrac%7BP(x,%20y)%7D%7BP(x)P(y)%7D%5CBig)%5Ctag%7B8a%7D%20%5C%5C%0A&amp;=%5Csum_%7Bx%20%5Cin%20A_X%7D%5Csum_%7By%20%5Cin%20A_Y%7D%20P(x,y)%5Clog%5CBig(%5Cfrac%7BP(x,%20y)%7D%7BP(x)P(y)%7D%5CBig)%20%5C%5C%0A&amp;=%5Csum_%7Bx%20%5Cin%20A_X%7D%5Csum_%7By%20%5Cin%20A_Y%7D%20P(x,y)%5CBig%5B%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x)%7D%5CBig)%20+%20%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(y)%7D%5CBig)%20+%20%5Clog%20%5CBig(P(x,%20y)%5CBig)%5CBig%5D%20%5C%5C%0A&amp;=%20H(X)%20+H(Y)%20-%20H(X,Y)%0A%5Cend%7Balign%7D"></p>
<p>Just as entropy was the expected value of Shannon information, mutual information is the expected value of <em>pairwise mutual information</em> between points <img src="https://latex.codecogs.com/png.latex?x_i"> and <img src="https://latex.codecogs.com/png.latex?y_j">:</p>
<p><img src="https://latex.codecogs.com/png.latex?M(x_i,%20y_j)%20=%20%5Clog%5CBig(%5Cfrac%7BP(x_i,%20y_j)%7D%7BP(x_i)P(y_j)%7D%5CBig)%20%5Ctag%7B8b%7D"></p>
<p>We can also combine (6) and (7) to rewrite joint entropy in terms of conditional entropies and mutual information:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AH(X,%20Y)%20&amp;=%20H(X%7CY)%20+%20H(Y)%20%5C%5C%0A&amp;=%20H(X%7CY)%20+%20H(Y%7CX)%20+%20I(X;Y)%5Ctag%7B9%7D%5C%5C%0A%5Cend%7Balign%7D"></p>
</section>
<section id="relative-entropy-kullback-leibler-divergence-and-cross-entropy" class="level3">
<h3 class="anchored" data-anchor-id="relative-entropy-kullback-leibler-divergence-and-cross-entropy">Relative Entropy, Kullback-Leibler Divergence and Cross-Entropy</h3>
<p>The <strong>cross entropy</strong> of distributions <img src="https://latex.codecogs.com/png.latex?Q(x)"> relative to distribution <img src="https://latex.codecogs.com/png.latex?P(x)"> is similar to (2), but using different distributions:</p>
<p><img src="https://latex.codecogs.com/png.latex?H(p,q)%20=%20%5Csum_x%20P(x)%5Clog%5CBig(%5Cfrac%7B1%7D%7BQ(x)%7D%5CBig)%5Ctag%7B10%7D"></p>
<p>The <strong>relative entropy</strong> or <strong>Kullback-Leibler divergence</strong> is a measure of the distance two distributions are from each other, defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20D_%7BKL%7D(P%7C%7CQ)%20=%20%5Csum_x%20P(x)%20%5Clog%5CBig(%5Cfrac%7BP(x)%7D%7BQ(x)%7D%5CBig)%20%5Ctag%7B11%7D"></p>
<p>By separating the logarithm in (8) and using (2), we can see the relation between (8) and (9) as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AD_%7BKL%7D(P%7C%7CQ)%20&amp;=%20%5Csum_x%20P(x)%20%5Clog%5CBig(%5Cfrac%7BP(x)%7D%7BQ(x)%7D%5CBig)%5C%5C%0A&amp;=%20%5Csum_x%20P(x)%20%5Clog%5CBig(%5Cfrac%7B1%7D%7BQ(x)%7D%5CBig)%20+%20%5Csum_x%20P(x)%20%5Clog(P(x))%5C%5C%0A&amp;=%20H(p,q)%20-%20H(X)%5C%5C%0A%5Cend%7Balign%7D%0A"></p>
<p>Or better yet:</p>
<p><img src="https://latex.codecogs.com/png.latex?H(p,q)%20=%20H(X)%20+%20D_%7BKL%7D(P%7C%7CQ)%5Ctag%7B12%7D"></p>
<p>This is why the <strong>cross entropy</strong> is used as a loss function in machine learning applications, comparing the distance between ground truth distribution <img src="https://latex.codecogs.com/png.latex?y"> and estimate <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D">. It inherently has the KL divergence within it.</p>
<p><strong>Mutual information</strong> can be seen as the KL divergence between probablity distributions <img src="https://latex.codecogs.com/png.latex?P(x,%20y)"> and <img src="https://latex.codecogs.com/png.latex?P(x)P(y)">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7DI(X;Y)%20&amp;%5Cequiv%20%5Csum_%7Bx,%20y%20%5Cin%20A_XA_Y%7D%20P(x,y)%5Clog%5CBig(%5Cfrac%7BP(x,%20y)%7D%7BP(x)P(y)%7D%5CBig)%20%5Cequiv%20D_%7BKL%7D%20%5CBig(P(x,y)%7C%7CP(x)P(y)%5CBig)%5C%5C%20%5Ctag%7B13a%7D%0A%5Cend%7Balign%7D"></p>
<p>We can define a quantity called the <strong>Kullback-Leibler information</strong> which which expresses the reduction of uncertainty of <img src="https://latex.codecogs.com/png.latex?Y"> after event <img src="https://latex.codecogs.com/png.latex?x_i"> has been observed. It can be written as the KL Divergence between <img src="https://latex.codecogs.com/png.latex?P(Y%7Cx_i)"> and <img src="https://latex.codecogs.com/png.latex?P(Y)">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20D_%7BKL%7D%20%5CBig(P(Y%7Cx_i)%7C%7CP(Y)%5CBig)%20=%20%5Csum_%7B%20y_j%20%5Cin%20A_Y%7D%20P(y_j%7Cx_i)%5Clog%5CBig(%5Cfrac%7BP(y_j%7Cx_i)%7D%7BP(y_j)%7D%5CBig)%20%5Ctag%7B13b%7D"></p>
<p>Similarly, we have the symmetric case of between <img src="https://latex.codecogs.com/png.latex?X"> and event <img src="https://latex.codecogs.com/png.latex?y_j">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20D_%7BKL%7D%20%5CBig(P(X%7Cy_j)%7C%7CP(X)%5CBig)%20=%20%5Csum_%7B%20x_i%20%5Cin%20A_X%7D%20P(x_i%7Cy_j)%5Clog%5CBig(%5Cfrac%7BP(x_i%7Cy_j)%7D%7BP(x_i)%7D%5CBig)%20%5Ctag%7B13c%7D"></p>
<p>Noticing that joint and conditional probabilities are related by averaging and the log arguments in (13b, 13c) are both equal and equivalent to <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BP(x_i,y_j)%7D%7BP(x_i)P(y_j)%7D"> we see can that <strong>mutual information</strong> and <strong>KL-information</strong> are related by:</p>
<p><img src="https://latex.codecogs.com/png.latex?I(X;Y)%20=%20%5Csum_%7B%20x_i%20%5Cin%20A_X%7D%20P(x_i)D_%7BKL%7D%20%5CBig(P(Y%7Cx_i)%7C%7CP(Y)%5CBig)%20=%20%5Csum_%7B%20y_j%20%5Cin%20A_Y%7DP(y_j)D_%7BKL%7D%20%5CBig(P(X%7Cy_j)%7C%7CP(X)%5CBig)%5Ctag%7B13d%7D"></p>
</section>
<section id="jensen-shannon-divergence" class="level3">
<h3 class="anchored" data-anchor-id="jensen-shannon-divergence">Jensen-Shannon Divergence</h3>
<p>KL Divergence is not a true distance in the sense that it lacks symmetry: <img src="https://latex.codecogs.com/png.latex?D_%7BKL%7D(P%7C%7CQ)%20%5Cne%20D_%7BKL%7D(Q%7C%7CP)">.</p>
<p>If we define a distance by defining an average distributions <img src="https://latex.codecogs.com/png.latex?M%20=%20%5Cfrac%7B1%7D%7B2%7D(P%20+%20Q)">, we can define a symmetric divergence as</p>
<p><img src="https://latex.codecogs.com/png.latex?%20JSD%20=%20%5Cfrac%7B1%7D%7B2%7D%20%5CBig(D_%7BKL%7D(P%7C%7CM)%20+%20D_%7BKL%7D(Q%7C%7CM)%20%5CBig)%5Ctag%7B14%7D"></p>
</section>
<section id="why-shannon-entropy" class="level2">
<h2 class="anchored" data-anchor-id="why-shannon-entropy">Why Shannon Entropy?</h2>
<p>Of all functional forms <img src="https://latex.codecogs.com/png.latex?f(x)">, what merits are there to having <img src="https://latex.codecogs.com/png.latex?h(x=a_i)%20=%5Clog_2%5Cfrac%7B1%7D%7Bp_i%7D">? These are similar arguments for the functional form of entropy in physics.</p>
<section id="additive-property-of-independent-variables" class="level3">
<h3 class="anchored" data-anchor-id="additive-property-of-independent-variables">Additive Property of Independent Variables</h3>
<p><img src="https://latex.codecogs.com/png.latex?H(X,Y)%20=%20H(X)%20+%20H(Y)%20%5Ctag%7B15%7D"></p>
<section id="proof" class="level4">
<h4 class="anchored" data-anchor-id="proof">Proof:</h4>
<p>This stems from the additive properties of logarithms and marginlizing over joint distributions.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AH(X,Y)%20&amp;=%20%5Csum_%7Bx,%20y%20%5Cin%20A_XA_Y%7DP(x,y)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x,%20y)%7D%5CBig)%5C%5C%0A%20%20%20%20%20%20%20&amp;=%20%5Csum_%7Bx,%20y%20%5Cin%20A_XA_Y%7DP(x)P(y)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x)P(y)%7D%5CBig)%5C%5C%0A%20%20%20%20%20%20%20&amp;=%20%5Csum_%7Bx,%20y%20%5Cin%20A_XA_Y%7DP(x)P(y)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x)%7D%5CBig)%20+%20%5Csum_%7Bx,%20y%20%5Cin%20A_XA_Y%7DP(x)P(y)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x)%7D%5CBig)%5C%5C%0A%20%20%20%20%20%20%20&amp;=%20%5Csum_%7Bx%20%5Cin%20A_X%7DP(x)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x)%7D%5CBig)%20+%20%5Csum_%7By%20%5Cin%20A_Y%7DP(y)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(y)%7D%5CBig)%5C%5C%0A%20%20%20%20%20%20%20&amp;=%20H(X)%20+%20H(Y)%5C%5C%0A%5Cend%7Balign%7D"></p>
</section>
</section>
<section id="entropy-is-maximized-with-uniform-probability-distributions" class="level3">
<h3 class="anchored" data-anchor-id="entropy-is-maximized-with-uniform-probability-distributions">Entropy is Maximized with Uniform Probability Distributions</h3>
<section id="jensens-inequality" class="level4">
<h4 class="anchored" data-anchor-id="jensens-inequality"><strong>Jensen’s Inequality</strong></h4>
<p>For convex functions:</p>
<p><img src="https://latex.codecogs.com/png.latex?E%5Bf(x)%5D%20%5Cge%20f(E%5Bx%5D)%5Ctag%7B16%7D"></p>
<p>For concave functions:</p>
<p><img src="https://latex.codecogs.com/png.latex?E%5Bf(x)%5D%20%5Cle%20f(E%5Bx%5D)%5Ctag%7B17%7D"></p>
</section>
<section id="expectation-of-inverse-probability" class="level4">
<h4 class="anchored" data-anchor-id="expectation-of-inverse-probability"><strong>Expectation of Inverse Probability</strong></h4>
<p><img src="https://latex.codecogs.com/png.latex?E(1/P(x))%20=%20%5Csum_%7Bx%20%5Cin%20A_x%7D%20P(x)%5Cfrac%7B1%7D%7BP(x)%7D%20=%20%7CA_x%7C%5Ctag%7B18%7D"> where <img src="https://latex.codecogs.com/png.latex?%7CA_x%7C"> is the size of the set, ie. its cardinality.</p>
</section>
<section id="applications-to-information" class="level4">
<h4 class="anchored" data-anchor-id="applications-to-information">Applications to Information</h4>
<p>Letting <img src="https://latex.codecogs.com/png.latex?x%20=%20%5Cfrac%7B1%7D%7BP(x)%7D"> and <img src="https://latex.codecogs.com/png.latex?f%20=%20%5Clog">, which is a concave, by Jensen’s equality we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?E%5CBig%5B%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x)%7D%5CBig)%5CBig%5D%20%5Cle%20%5Clog%5CBig(E%5Cbig%5B%5Cfrac%7B1%7D%7BP(x)%7D%5Cbig%5D%5CBig)%5Ctag%7B19%7D"></p>
<p>The left hand side is the entropy and since we’ve already found the expectation of inverse probability we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?H(X)%20%5Cle%20%5Clog%20A_x%5Ctag%7B20%7D"></p>
<p>In a uniform distribution, <img src="https://latex.codecogs.com/png.latex?P(x)%20=%20%5Cfrac%7B1%7D%7BA_x%7D"> so we’d meet equality if that were the distribution of <img src="https://latex.codecogs.com/png.latex?X">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AH(X)%20&amp;=%20%20%5Csum_%7Bx%20%5Cin%20A_X%7D%20P(x)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x)%7D%5CBig)%5C%5C%0A%20%20%20%20%20&amp;=%20%5Csum_%7Bx%20%5Cin%20A_X%7D%20%5Cfrac%7B1%7D%7BA_x%7D%5Clog(A_x)%5C%5C%0A%20%20%20%20%20&amp;=%20%5Clog(A_x)%5Ctag%7B21%7D%5C%5C%0A%5Cend%7Balign%7D"></p>
<p>In contrast, for a discrete delta distribution, with only one possible outcome <img src="https://latex.codecogs.com/png.latex?a,%20P(a)=1"> we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AH(X)%20&amp;=%20%20%5Csum_%7Bx%20%5Cin%20A_X%7D%20P(x)%5Clog%5CBig(%5Cfrac%7B1%7D%7BP(x)%7D%5CBig)%5C%5C%0A%20%20%20%20%20&amp;=%201*%5Clog(1)%5C%5C%0A%20%20%20%20%20&amp;=%200%5Ctag%7B22%7D%5C%5C%0A%5Cend%7Balign%7D"></p>
<p>This shows how entropy can be used to describe how concentrated or spread out a distribution can be with values ranging from <img src="https://latex.codecogs.com/png.latex?0"> to <img src="https://latex.codecogs.com/png.latex?%5Clog(A_x)">. This can be interpreted as the uncertainty of value of the random variable.</p>
</section>
</section>
</section>
<section id="relation-to-log-likelihood" class="level2">
<h2 class="anchored" data-anchor-id="relation-to-log-likelihood">Relation to Log-Likelihood</h2>
<p>Wikipedia’s <a href="https://en.wikipedia.org/wiki/Cross_entropy">article</a> has a nice exposition:</p>
<p>In a classification problem we denote the estimated probability of outcome <img src="https://latex.codecogs.com/png.latex?i"> as <img src="https://latex.codecogs.com/png.latex?q_i"> and the empirical probability from the training set of the same event as <img src="https://latex.codecogs.com/png.latex?p_i">, where <img src="https://latex.codecogs.com/png.latex?i%20%5Cin%20%5C%7B1,...,%20N%5C%7D">, where the samples are conditionally independent,</p>
<p>the likelihood is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cmathcal%7BL%7D%20_N(%5Ctheta)%20=%20%5Cprod_i%5EN%5Ctext%7Bprobability%20of%20%7Di%5E%7B%5Ctext%7Bnumber%20of%20occurences%20of%20%7Di%7D%20=%20%5Cprod_i%20q_i%5E%7BNp_i%7D%5Ctag%7B23%7D"></p>
<p>The log-likelihood is then:</p>
<p><img src="https://latex.codecogs.com/png.latex?l(%5Ctheta)%20=%20%5Clog%20%5Cmathcal%7BL%7D(%5Ctheta)%20=%20N%5Csum%5EN_%7Bi=1%7D%20p_i%5Clog%20q_i%5Ctag%7B24%7D"></p>
<p>Dividing the log-likelihood <img src="https://latex.codecogs.com/png.latex?l"> by <img src="https://latex.codecogs.com/png.latex?N"> gives us:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cfrac%7B1%7D%7BN%7Dl(%5Ctheta)%20=%20%5Csum%5EN_%7Bi=1%7D%20p_i%5Clog%20q_i%20=%20-H(p,%20q)%5Ctag%7B25%7D"></p>
<p><strong>Maximizing the log-likelihood is then equivalent to minizing the cross entropy, and thus the difference between <img src="https://latex.codecogs.com/png.latex?q_i"> and <img src="https://latex.codecogs.com/png.latex?p_i">.</strong></p>
<section id="variation-of-information" class="level3">
<h3 class="anchored" data-anchor-id="variation-of-information">Variation of Information</h3>
<section id="background-relationships" class="level4">
<h4 class="anchored" data-anchor-id="background-relationships">Background Relationships</h4>
<p>For the task of comparing different clusterings, <img src="https://latex.codecogs.com/png.latex?C,%20C'"> of the same data <img src="https://latex.codecogs.com/png.latex?D">, some useful metrics build upon the concept of entropy. For a clustering <img src="https://latex.codecogs.com/png.latex?C">, the probability of a data point being in a cluster <img src="https://latex.codecogs.com/png.latex?C_k"> is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?P(k)%20=%20%5Cfrac%7Bn_k%7D%7Bn%7D%5Ctag%7B26%7D"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?n%20=%20%7CD%7C"> and <img src="https://latex.codecogs.com/png.latex?n_k%20=%20%7CC_k%7C">.</p>
<p>The joint probability in this context refers to the probability a data point belongs to cluster <img src="https://latex.codecogs.com/png.latex?C_k"> in clustering <img src="https://latex.codecogs.com/png.latex?C"> and cluster <img src="https://latex.codecogs.com/png.latex?C'_%7Bk'%7D"> in clustering <img src="https://latex.codecogs.com/png.latex?C'">:</p>
<p><img src="https://latex.codecogs.com/png.latex?P(k,k')%20=%20%5Cfrac%7B%7CC_k%20%5Ccap%20C'_%7Bk'%7D%7C%7D%7Bn%7D"></p>
<p>This leads to defining the conditional probability between a data point belonging to cluster <img src="https://latex.codecogs.com/png.latex?C_k"> given it’s in <img src="https://latex.codecogs.com/png.latex?C'_%7Bk'%7D"> as:</p>
<p><img src="https://latex.codecogs.com/png.latex?P(k%20%7C%20k')%20=%20%5Cfrac%7BP(k,%20k')%7D%7BP(k')%7D%20=%20%5Cfrac%7B%7CC_k%20%5Ccap%20C'_%7Bk'%7D%7C%7D%7Bn_%7Bk'%7D%7D%5Ctag%7B27%7D"></p>
<p>The associated entropy with the clustering is then:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20H(C)%20=%20-%5Csum%5EK_%7Bk=1%7DP(k)%5Clog%5CBig(P(k)%5CBig)%5Ctag%7B28%7D"></p>
<p>Mutual information between clusterings is then:</p>
<p><img src="https://latex.codecogs.com/png.latex?I(C;%20C')%20=%20-%5Csum%5EK_%7Bk=1%7D%5Csum%5E%7BK'%7D_%7Bk'=1%7DP(k,%20k')%5Clog%5CBig(%5Cfrac%7BP(k,k')%7D%7BP(k)P(k')%7D%5CBig)%5Ctag%7B29%7D"></p>
<p>Treating clusterings <img src="https://latex.codecogs.com/png.latex?C,%20C'"> as probability distributions of data points, their associated conditional entropies are given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?H(C%7CC')%20=%20-%5Csum%5EK_%7Bk=1%7D%5Csum%5E%7BK'%7D_%7Bk'=1%7DP(k,%20k')%5Clog%5CBig(%5Cfrac%7BP(k,%20k')%7D%7BP(k')%7D%5CBig)%20%5Ctag%7B30%7D"></p>
</section>
<section id="core-definitions" class="level4">
<h4 class="anchored" data-anchor-id="core-definitions">Core Definitions</h4>
<p>The <a href="https://www.sciencedirect.com/science/article/pii/S0047259X06002016"><strong>variation of information</strong></a> (VI) builds on these clustering entropies:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20VI(C,C')%5Cequiv%20H(C)%20+%20H(C')%20-%202I(C;C')%20%5Ctag%7B31%7D"></p>
<p>Grouping mutual information difference to each marginal entropy, we see VI is a sum of conditional entropies:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AVI(C,C')&amp;%5Cequiv%20H(C)%20-%20I(C;C')%20+%20H(C')%20-%20I(C;C')%20%5Ctag%7B32%7D%5C%5C%0A&amp;=%20H(C%7CC')%20+%20H(C'%7CC)%5C%5C%0A%5Cend%7Balign%7D"></p>
<p>This can also be rewritten in terms of joint entropy using (9) to substitute out the conditional entropy terms in (32):</p>
<p><img src="https://latex.codecogs.com/png.latex?VI(C,C')%20=%20H(C,%20C')%20-%20I(C;%20C')%5Ctag%7B33%7D"></p>
<p>A computationally useful form is (32) in terms of explicit probabilities:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AVI(C,%20C')%20&amp;=%20H(C%7CC')%20+%20H(C'%7CC)%5C%5C%0A&amp;=%20-%5Csum%5EK_%7Bk=1%7D%5Csum%5E%7BK'%7D_%7Bk'=1%7DP(k,%20k')%5Clog%5CBig(%5Cfrac%7BP(k,%20k')%7D%7BP(k')%7D%5CBig)%20+%20P(k,%20k')%5Clog%5CBig(%5Cfrac%7BP(k,%20k')%7D%7BP(k)%7D%5CBig)%20%5C%5C%0A&amp;=%20-%5Csum%5EK_%7Bk=1%7D%5Csum%5E%7BK'%7D_%7Bk'=1%7DP(k,%20k')%5CBigg%5B%5Clog%5CBig(%5Cfrac%7BP(k,%20k')%7D%7BP(k')%7D%5CBig)%20+%20%5Clog%5CBig(%5Cfrac%7BP(k,%20k')%7D%7BP(k)%7D%5CBig)%5CBigg%5D%5C%5C%0A%5Cend%7Balign%7D%5Ctag%7B34%7D"></p>
</section>
<section id="useful-properties" class="level4">
<h4 class="anchored" data-anchor-id="useful-properties">Useful Properties</h4>
<p>To make better sense of the VI distance, it helps to consider the total set of clusterings of a dataset <img src="https://latex.codecogs.com/png.latex?D">. The most extreme members, at least in regards to entropy values are: - <img src="https://latex.codecogs.com/png.latex?%5Chat%7B1%7D">:<br>
- <img src="https://latex.codecogs.com/png.latex?K%20=%201"> clusters - <img src="https://latex.codecogs.com/png.latex?H(%5Chat%7B1%7D)%20=%200"><br>
- <img src="https://latex.codecogs.com/png.latex?%5Chat%7B0%7D">: - <img src="https://latex.codecogs.com/png.latex?K%20=%20n"> clusters - with <img src="https://latex.codecogs.com/png.latex?H(%5Chat%7B0%7D)%20=%20%5Clog%20n"> - <img src="https://latex.codecogs.com/png.latex?C%5EU_K">: - <img src="https://latex.codecogs.com/png.latex?K"> equal sized clusters, <img src="https://latex.codecogs.com/png.latex?K%20%5Cge%201"> - with <img src="https://latex.codecogs.com/png.latex?H(C%5EU_K)%20=%20%5Clog%20K"></p>
<p>Joint probability between any clustering <img src="https://latex.codecogs.com/png.latex?C"> with index <img src="https://latex.codecogs.com/png.latex?k"> and <img src="https://latex.codecogs.com/png.latex?%5Chat%7B1%7D"> index <img src="https://latex.codecogs.com/png.latex?k'%20=%201"> is given depends on terms <img src="https://latex.codecogs.com/png.latex?P(k,%20k')%20=%20%5Cfrac%7B%7CC_k%20%5Ccap%20C'_%7Bk'%7D%7C%7D%7Bn%7D%20=%20%5Cfrac%7B%7CC_k%7C%7D%7Bn%7D%20=%20P(k)%20*%201">.</p>
<p>This implies: - the clusterings <img src="https://latex.codecogs.com/png.latex?%5Chat%7B1%7D"> and <img src="https://latex.codecogs.com/png.latex?C"> are independent of each other - <img src="https://latex.codecogs.com/png.latex?I(C;%20%5Chat%7B1%7D)%20=%200"> - <img src="https://latex.codecogs.com/png.latex?H(C,%20%5Chat%7B1%7D)%20%20=%20H(C)%20+%20H(%5Chat%7B1%7D)%20=%20H(C)"> - <img src="https://latex.codecogs.com/png.latex?VI(C,%20%5Chat%7B1%7D)%20=%20H(C)"></p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?VI(C,C')%20%5Cle%20%5Clog%20n">, where equality is in the case of clusters <img src="https://latex.codecogs.com/png.latex?%5Chat%7B1%7D"> (only one cluster) and <img src="https://latex.codecogs.com/png.latex?%5Chat%7B0%7D"> (<img src="https://latex.codecogs.com/png.latex?n"> clusters).</p></li>
<li><p>If <img src="https://latex.codecogs.com/png.latex?C"> and <img src="https://latex.codecogs.com/png.latex?C'"> have at most <img src="https://latex.codecogs.com/png.latex?K"> clusters each, with <img src="https://latex.codecogs.com/png.latex?K%20%5Cle%20%5Csqrt%7Bn%7D">, then <img src="https://latex.codecogs.com/png.latex?VI(C,%20C')%20%5Cle%202%20%5Clog%20K"></p></li>
</ul>
</section>
</section>
<section id="practical-implementations" class="level3">
<h3 class="anchored" data-anchor-id="practical-implementations">Practical Implementations</h3>
<div id="cell-64" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> entropy</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.special <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rel_entr, kl_div</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.spatial.distance <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> jensenshannon</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd </span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> igraph.clustering <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> compare_communities, Clustering </span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> List</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> defaultdict</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> itertools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> chain</span></code></pre></div>
</div>
<section id="jensen-shannon-divergence-1" class="level4">
<h4 class="anchored" data-anchor-id="jensen-shannon-divergence-1">Jensen-Shannon Divergence</h4>
<div id="cell-66" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> jsd(a: np.array, b: np.array, base: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Calculate and return the Jensen-Shannon Divergence"""</span></span>
<span id="cb2-3">    m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (entropy(a, m, base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>base) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> entropy(b, m, base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>base)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</div>
<div id="cell-67" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb3-2"></span>
<span id="cb3-3">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(seq).value_counts()</span>
<span id="cb3-4">vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s.index</span>
<span id="cb3-5">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s.values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(seq)</span></code></pre></div>
</div>
<div id="cell-68" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb4-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb4-3">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.36</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.48</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.16</span>])</span>
<span id="cb4-4">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.30</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.50</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.20</span>])</span>
<span id="cb4-5">m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</div>
<div id="cell-69" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">np.sqrt(jsd(p, q))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>0.050803321756356906</code></pre>
</div>
</div>
<div id="cell-70" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">entropy(a, b)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>0.0852996013183706</code></pre>
</div>
</div>
<div id="cell-71" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">kl_div(a, b)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>array([11.7750212 , 18.8188798 ,  2.54517744])</code></pre>
</div>
</div>
<div id="cell-72" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">rel_entr(a, b)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>array([19.7750212 , 29.8188798 ,  5.54517744])</code></pre>
</div>
</div>
<div id="cell-73" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">jsd(a, b, base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>0.03793843282690725</code></pre>
</div>
</div>
<div id="cell-74" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">np.sqrt(jsd(a, b, base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>0.19477790641370815</code></pre>
</div>
</div>
<div id="cell-75" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">jensenshannon(p, q, base<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>0.050803321756356906</code></pre>
</div>
</div>
</section>
<section id="variation-of-information-1" class="level4">
<h4 class="anchored" data-anchor-id="variation-of-information-1">Variation of Information</h4>
<ul>
<li><p>Variation of information (VI) can be computed by using (34) and looping through the <img src="https://latex.codecogs.com/png.latex?n_k%20%5Ctimes%20n_%7Bk'%7D"> cluster intersections, setting entropies of disjoint clusters to zero.</p></li>
<li><p>The <code>igraph</code> <a href="https://igraph.org/python/api/0.9.8/igraph.clustering.html">library</a> function <code>compare_communities</code> has an option to compute VI, with the <code>method='vi'</code> option.</p>
<ul>
<li><p><code>igraph</code> accepts clusterings as <em>membership lists</em>, where the list’s indices correspond to nodes, and the values correspond to cluster indices.</p></li>
<li><p>Membership lists constrain cluster indices to range from <img src="https://latex.codecogs.com/png.latex?%5C%7B0,%201,%20...,%20n-1%5C%7D"> where <img src="https://latex.codecogs.com/png.latex?n"> is the number of nodes or data points</p></li>
<li><p>Membership lists can be converted to a <em>cluster list</em>, a list of lists where each inner list corresponds to a cluster of data points, represented by unique integer indices</p></li>
<li><p>Converting a cluster list to a membership list requires the following:</p>
<ul>
<li>each data point must be deterministically assigned to a list index, such as sorting</li>
<li>each cluster must be given a cluster id in the range <img src="https://latex.codecogs.com/png.latex?%5C%7B0,%201,%20...,%20n-1%5C%7D"></li>
<li>each list index must be assigned the cluster id to which it is a member of</li>
<li>the VI calculation should be invariant to cluster id assignment within the same clusterings, (swapping what cluster is labeled 0 vs 1 should have no effect)</li>
</ul></li>
</ul></li>
</ul>
<p>Meilă, Marina. “Comparing Clusterings—an Information Based Distance.” Journal of Multivariate Analysis 98, no. 5 (May 1, 2007): 873–95. https://doi.org/10.1016/j.jmva.2006.11.013.</p>
<div id="cell-79" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> var_info(C1: List[List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]], C2: List[List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]], base: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb19-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Variation of information between two clusterings"""</span></span>
<span id="cb19-3">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> C1)</span>
<span id="cb19-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(j) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> C2)</span>
<span id="cb19-5">    total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb19-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> C1:</span>
<span id="cb19-7">        p_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(i) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n</span>
<span id="cb19-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> C2:</span>
<span id="cb19-9">            p_j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(j) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n</span>
<span id="cb19-10">            p_ij <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(i) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(j)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n</span>
<span id="cb19-11">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> p_ij <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>:</span>
<span id="cb19-12">                total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> p_ij <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (np.log(p_ij <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> p_i) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.log(p_ij <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> p_j))</span>
<span id="cb19-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> base <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb19-14">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> np.log(base)</span>
<span id="cb19-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> total</span>
<span id="cb19-16"></span>
<span id="cb19-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_membership_lists(clusters: List[List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]]):</span>
<span id="cb19-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Return a list of cluster indices each element of a set belongs to"""</span></span>
<span id="cb19-19">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(chain(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>clusters)))</span>
<span id="cb19-20">    mem_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data]</span>
<span id="cb19-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> cluster_id, cluster <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(clusters):</span>
<span id="cb19-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> data_point <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cluster:</span>
<span id="cb19-23">            mem_list_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.index(data_point)</span>
<span id="cb19-24">            mem_list[mem_list_idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cluster_id</span>
<span id="cb19-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mem_list</span>
<span id="cb19-26"></span>
<span id="cb19-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_cluster_lists(mem_list: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb19-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Convert membership list to list of lists corresponding to clusters"""</span></span>
<span id="cb19-29">    d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)</span>
<span id="cb19-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx, cluster <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(mem_list):</span>
<span id="cb19-31">        d[cluster].append(idx)</span>
<span id="cb19-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(d.values())        </span>
<span id="cb19-33"></span>
<span id="cb19-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> map_indices(data: List) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]:</span>
<span id="cb19-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Dictionary of indices of ordered data"""</span></span>
<span id="cb19-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(data))</span>
<span id="cb19-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {val: idx <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx, val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(data))}</span>
<span id="cb19-38"></span>
<span id="cb19-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> standardize_cluster_list(clusters: List[List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]]:</span>
<span id="cb19-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Replace a set of values with ordered indices in cluster membership lists"""</span></span>
<span id="cb19-41">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(chain(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>clusters))</span>
<span id="cb19-42">    data_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> map_indices(data)</span>
<span id="cb19-43">    standardized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb19-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> cluster <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> clusters:</span>
<span id="cb19-45">        standardized_cluster <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [data_idx[val] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cluster]</span>
<span id="cb19-46">        standardized.append(standardized_cluster)</span>
<span id="cb19-47">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> standardized</span>
<span id="cb19-48">        </span>
<span id="cb19-49">        </span>
<span id="cb19-50">    </span></code></pre></div>
</div>
<div id="cell-80" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cluster lists</span></span>
<span id="cb20-2">X1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>] ]</span>
<span id="cb20-3">Y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>] ]</span>
<span id="cb20-4"></span>
<span id="cb20-5">X2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>] ]</span>
<span id="cb20-6">Y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>] ]</span>
<span id="cb20-7"></span>
<span id="cb20-8">X3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]]</span>
<span id="cb20-9">Y3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] ]</span>
<span id="cb20-10"></span>
<span id="cb20-11">X4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>] ]</span>
<span id="cb20-12">Y4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>] ]</span>
<span id="cb20-13"></span>
<span id="cb20-14">X5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] ]</span>
<span id="cb20-15">Y5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span>
<span id="cb20-16"></span>
<span id="cb20-17"></span>
<span id="cb20-18">X_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [X1, X2, X3, X4]</span>
<span id="cb20-19">Y_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Y1, Y2, Y3, Y4]</span></code></pre></div>
</div>
<div id="cell-81" class="cell" data-execution_count="163">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_membership_lists(X5)</span>
<span id="cb21-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_membership_lists(Y5)</span>
<span id="cb21-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(a)</span>
<span id="cb21-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(b)</span>
<span id="cb21-5"></span>
<span id="cb21-6">compare_communities(a, b, method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vi'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[2, 0, 0, 1, 1, 1, 1, 2, 2, 0]
[1, 2, 2, 0, 0, 0, 0, 1, 1, 2]</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="163">
<pre><code>0.0</code></pre>
</div>
</div>
<div id="cell-82" class="cell" data-execution_count="76">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">var_info(X5, Y5)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="76">
<pre><code>0.0</code></pre>
</div>
</div>
<div id="cell-83" class="cell" data-execution_count="136">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">compare_communities([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vi'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="136">
<pre><code>0.4620981203732968</code></pre>
</div>
</div>
<div id="cell-84" class="cell" data-execution_count="165">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>: X_,</span>
<span id="cb28-2">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>: Y_,</span>
<span id="cb28-3">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'VI custom (nats)'</span>: [var_info(X, Y, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> X, Y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(X_, Y_)],</span>
<span id="cb28-4">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'VI-igraph (nats)'</span>: [compare_communities(create_membership_lists(X), create_membership_lists(Y), method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'vi'</span>)</span>
<span id="cb28-5">                           <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> X, Y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(X_, Y_)]</span>
<span id="cb28-6">     }</span>
<span id="cb28-7"></span>
<span id="cb28-8">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(d)</span>
<span id="cb28-9">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="165">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">X</th>
<th data-quarto-table-cell-role="th">Y</th>
<th data-quarto-table-cell-role="th">VI custom (nats)</th>
<th data-quarto-table-cell-role="th">VI-igraph (nats)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]</td>
<td>[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]</td>
<td>0.000000</td>
<td>0.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>[[1, 2, 3, 4], [5, 6, 7, 8, 9, 10]]</td>
<td>[[1, 2, 3, 4, 5, 6], [7, 8, 9, 10]]</td>
<td>1.101955</td>
<td>1.101955</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>[[1, 2], [3, 4, 5], [6, 7, 8], [9, 10]]</td>
<td>[[10, 2, 3], [4, 5, 6, 7], [8, 9, 1]]</td>
<td>2.301955</td>
<td>2.301955</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]</td>
<td>[[1], [2], [3], [4], [5], [6], [7], [8], [9], ...</td>
<td>3.321928</td>
<td>3.321928</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</div>
<div id="cell-85" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">Y3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] ]</span>
<span id="cb29-2">Y31 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb29-3">Y3_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb29-4">created <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_cluster_lists(Y3_)</span></code></pre></div>
</div>
<div id="cell-86" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">created <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> Y31</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>False</code></pre>
</div>
</div>
<div id="cell-87" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">created</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>[[0, 7, 8], [1, 2, 9], [3, 4, 5, 6]]</code></pre>
</div>
</div>
<div id="cell-88" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">var_info(created, Y31)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>0.0</code></pre>
</div>
</div>


</section>
</section>
</section>
</section>

 ]]></description>
  <guid>http://thenewexecutor.github.io/notes/EntropyNotes.html</guid>
  <pubDate>Mon, 27 Oct 2025 06:25:28 GMT</pubDate>
</item>
<item>
  <title>Closure Notes</title>
  <dc:creator>Jonathan Sarker</dc:creator>
  <link>http://thenewexecutor.github.io/notes/Closures.html</link>
  <description><![CDATA[ 




<p>These are notes based on Real Python’s <a href="https://realpython.com/python-closure/">article</a> with motivation to better understand Python <a href="../notes/Decorators.html">decorators</a>.</p>
<p>A <a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)">closure</a> also known as a function closure, is a technique to store a function with an environment. The function has local variables mapped to the enclosing scope.</p>
<p>In Python, a closure is a nested function where the inner function is returned by the outer function, along with parameter bindings defined in the outer function.</p>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<section id="inner-functions" class="level3">
<h3 class="anchored" data-anchor-id="inner-functions">Inner Functions</h3>
<p>This is simply a nested function. Just like in the format of many Elements of Programming Interview Python solutions, nesting functions can control scope:</p>
<div id="638e26eb-6ade-41ed-b59a-22ba2d67f59a" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> outer_func():</span>
<span id="cb1-2">    name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Jonathan'</span></span>
<span id="cb1-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> inner_func():</span>
<span id="cb1-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Hello, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">!'</span>)</span>
<span id="cb1-5">    inner_func()</span>
<span id="cb1-6"></span>
<span id="cb1-7">outer_func()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Hello, Jonathan!</code></pre>
</div>
</div>
</section>
<section id="function-closures" class="level3">
<h3 class="anchored" data-anchor-id="function-closures">Function Closures</h3>
<p>The defining feature of a function closure separating them from other inner functions is that it <strong>returns the inner function</strong>. The anatomy of a function closure is the following: - outer function defining the scope - variables local to the outer function - inner function defined inside the outer function</p>
<div id="9f1bdede-a4ed-417a-9c38-a67549ec466b" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> outer_func():</span>
<span id="cb3-2">    name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Jonathan'</span></span>
<span id="cb3-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> inner_func():</span>
<span id="cb3-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Hello, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inner_func</span>
<span id="cb3-6"></span>
<span id="cb3-7">outer_func()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>&lt;function __main__.outer_func.&lt;locals&gt;.inner_func()&gt;</code></pre>
</div>
</div>
<div id="6ac65970-f322-4f2a-bf72-47f302c0811b" class="cell" data-execution_count="4">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">greeter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outer_func()</span>
<span id="cb5-2">greeter()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Hello, Jonathan</code></pre>
</div>
</div>
<p>Lambda functions can be used to build closures:</p>
<div id="064e887a-f91f-47cc-9c6b-328c787381d7" class="cell" data-execution_count="5">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> outer_func():</span>
<span id="cb7-2">    name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Jonathan'</span></span>
<span id="cb7-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Hello, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">!'</span>)</span>
<span id="cb7-4"></span>
<span id="cb7-5">greeter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outer_func()</span>
<span id="cb7-6">greeter()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Hello, Jonathan!</code></pre>
</div>
</div>
</section>
<section id="captured-variables" class="level3">
<h3 class="anchored" data-anchor-id="captured-variables">Captured Variables</h3>
<p>In this example, the inner function has access to variables that are defined even after itself, demonstrating the subtleties of scope.</p>
<div id="cc0a5970-df52-4907-a277-0f220ec708d8" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> outer_func(outer_arg):</span>
<span id="cb9-2">    local_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Outer local variable'</span></span>
<span id="cb9-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> closure():</span>
<span id="cb9-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(outer_arg)</span>
<span id="cb9-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(local_var)</span>
<span id="cb9-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(another_local_var)</span>
<span id="cb9-7">    another_local_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Another local variable'</span></span>
<span id="cb9-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> closure</span>
<span id="cb9-9"></span>
<span id="cb9-10">closure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outer_func(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Outer argument'</span>)</span>
<span id="cb9-11">closure()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Outer argument
Outer local variable
Another local variable</code></pre>
</div>
</div>
<section id="updating-immutable-objects" class="level4">
<h4 class="anchored" data-anchor-id="updating-immutable-objects">Updating Immutable Objects</h4>
<div id="3232560c-2d46-4391-99d7-f2df35bcabbf" class="cell" data-execution_count="14">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_counter():</span>
<span id="cb11-2">    count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> counter():</span>
<span id="cb11-4">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nonlocal</span> count <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># look for a predefined variable instead of a new one</span></span>
<span id="cb11-5">        count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> count</span>
<span id="cb11-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> counter</span>
<span id="cb11-8"></span>
<span id="cb11-9">counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_counter()</span>
<span id="cb11-10">counter()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>1</code></pre>
</div>
</div>
<div id="8b63f5f3-45a4-4287-a977-ffaaa7bad9dd" class="cell" data-execution_count="15">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">counter()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>2</code></pre>
</div>
</div>
<div id="1e0a0267-b46d-48dc-aac0-993e6c084911" class="cell" data-execution_count="16">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">counter()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>3</code></pre>
</div>
</div>
</section>
<section id="updating-mutable-objects" class="level4">
<h4 class="anchored" data-anchor-id="updating-mutable-objects">Updating Mutable Objects</h4>
<div id="7c9b928b-81f5-46fe-ad4e-a0315530ff88" class="cell" data-execution_count="18">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_appender():</span>
<span id="cb17-2">    items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb17-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> appender(new_item):</span>
<span id="cb17-4">        items.append(new_item)</span>
<span id="cb17-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> items</span>
<span id="cb17-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> appender</span>
<span id="cb17-7"></span>
<span id="cb17-8">appender <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_appender()</span>
<span id="cb17-9">appender(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'First item'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>['First item']</code></pre>
</div>
</div>
<div id="a96ba527-673d-4a2b-b157-8f6e1618cac8" class="cell" data-execution_count="19">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">appender(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Second item'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>['First item', 'Second item']</code></pre>
</div>
</div>
<div id="990a9184-0a74-4387-b5a5-285716c77a05" class="cell" data-execution_count="20">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">appender(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Third item'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>['First item', 'Second item', 'Third item']</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="creating-closures-to-retain-state" class="level2">
<h2 class="anchored" data-anchor-id="creating-closures-to-retain-state">Creating Closures to Retain State</h2>
<section id="creating-factory-functions" class="level3">
<h3 class="anchored" data-anchor-id="creating-factory-functions">Creating Factory Functions</h3>
<div id="55b76d54-142c-44ee-9751-1993b7c6c075" class="cell" data-execution_count="21">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_root_calculator(root_degree, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb23-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> root_calculator(number):</span>
<span id="cb23-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(number, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> root_degree), precision)</span>
<span id="cb23-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> root_calculator</span>
<span id="cb23-5"></span>
<span id="cb23-6">square_root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_root_calculator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb23-7"></span>
<span id="cb23-8">square_root(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>6.4807</code></pre>
</div>
</div>
<div id="91b54e8b-3564-428b-ad35-561f9fc60827" class="cell" data-execution_count="22">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">cubic_root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_root_calculator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb25-2">cubic_root(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>3.48</code></pre>
</div>
</div>
</section>
<section id="building-stateful-function" class="level3">
<h3 class="anchored" data-anchor-id="building-stateful-function">Building Stateful Function</h3>
<div id="44eaf2ea-c346-4368-a452-f941bcf7a53f" class="cell" data-execution_count="25">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cumulative_average():</span>
<span id="cb27-2">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb27-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> average(value):</span>
<span id="cb27-4">        data.append(value)</span>
<span id="cb27-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(data) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data)</span>
<span id="cb27-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> average</span>
<span id="cb27-7"></span>
<span id="cb27-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># more efficient implementation</span></span>
<span id="cb27-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> cumulative_average():</span>
<span id="cb27-10">    total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb27-11">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb27-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> average(value):</span>
<span id="cb27-13">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nonlocal</span> total</span>
<span id="cb27-14">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nonlocal</span> n</span>
<span id="cb27-15">        n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb27-16">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> value</span>
<span id="cb27-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n</span>
<span id="cb27-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> average</span>
<span id="cb27-19">        </span>
<span id="cb27-20"></span>
<span id="cb27-21"></span>
<span id="cb27-22">stream_average <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cumulative_average()</span>
<span id="cb27-23"></span>
<span id="cb27-24">stream_average(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>12.0</code></pre>
</div>
</div>
<div id="03ac006b-e8ee-4864-83e5-62af7e7b82b0" class="cell" data-execution_count="26">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">stream_average(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>12.5</code></pre>
</div>
</div>
<div id="ddb11459-38ef-4cb5-be47-b451868f70e6" class="cell" data-execution_count="27">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">stream_average(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>12.0</code></pre>
</div>
</div>
<div id="75f9d141-3f50-47b4-bd3d-42ef0d1eb17a" class="cell" data-execution_count="28">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">stream_average(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>11.5</code></pre>
</div>
</div>
</section>
<section id="providing-callback-functions" class="level3">
<h3 class="anchored" data-anchor-id="providing-callback-functions">Providing Callback Functions</h3>
<p>The <code>callback()</code> function returns a closure object that is passed onto the <code>command</code> argument, which takes callable objects without arguments. This is a workaround to pass parameters.</p>
<div id="a55b8a82-3692-4cf9-8f72-6a981658d911" class="cell" data-execution_count="29">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tkinter <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tk</span>
<span id="cb35-2"></span>
<span id="cb35-3">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tk.Tk()</span>
<span id="cb35-4">app.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GUI App'</span>)</span>
<span id="cb35-5">app.geometry(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'320x240'</span>)</span>
<span id="cb35-6"></span>
<span id="cb35-7">label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tk.Label(</span>
<span id="cb35-8">    app,</span>
<span id="cb35-9">    font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Helvetica'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bold'</span>),</span>
<span id="cb35-10">)</span>
<span id="cb35-11">label.pack()</span>
<span id="cb35-12"></span>
<span id="cb35-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> callback(text):</span>
<span id="cb35-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> closure():</span>
<span id="cb35-15">        label.config(text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>text)</span>
<span id="cb35-16">        </span>
<span id="cb35-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> closure</span>
<span id="cb35-18"></span>
<span id="cb35-19">button <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tk.Button(</span>
<span id="cb35-20">    app,</span>
<span id="cb35-21">    text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Greet'</span>,</span>
<span id="cb35-22">    command<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>callback(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hello, World!'</span>),</span>
<span id="cb35-23">)</span>
<span id="cb35-24"></span>
<span id="cb35-25">button.pack()</span>
<span id="cb35-26"></span>
<span id="cb35-27">app.mainloop()</span>
<span id="cb35-28">    </span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="writing-decorators-with-closures" class="level2">
<h2 class="anchored" data-anchor-id="writing-decorators-with-closures">Writing Decorators with Closures</h2>
<p>There are two types of decorators in Python: - function based - class based</p>
<p>Here is a simple function based implementation with and without the decorator, and using the syntax:</p>
<div id="76e4c930-4ebc-4f66-90f9-723b75e524b3" class="cell" data-execution_count="34">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> greet():</span>
<span id="cb36-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hello, World!'</span>)</span>
<span id="cb36-3"></span>
<span id="cb36-4">greet()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Hello, World!</code></pre>
</div>
</div>
<div id="62a53eff-0850-48fa-975b-ce786aa6c406" class="cell" data-execution_count="35">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decorator(function):</span>
<span id="cb38-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> closure():</span>
<span id="cb38-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Do something before calling the function.'</span>)</span>
<span id="cb38-4">        function()</span>
<span id="cb38-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Do something after calling the function.'</span>)</span>
<span id="cb38-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> closure</span>
<span id="cb38-7"></span>
<span id="cb38-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> greet():</span>
<span id="cb38-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hello, World!'</span>)</span>
<span id="cb38-10"></span>
<span id="cb38-11">greet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decorator(greet)</span>
<span id="cb38-12">greet()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Do something before calling the function.
Hello, World!
Do something after calling the function.</code></pre>
</div>
</div>
<div id="75940edd-ac6c-4ffc-9f6e-dcc4ddf1a576" class="cell" data-execution_count="36">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@decorator</span></span>
<span id="cb40-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> greet():</span>
<span id="cb40-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hello, World!'</span>)</span>
<span id="cb40-4"></span>
<span id="cb40-5">greet()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Do something before calling the function.
Hello, World!
Do something after calling the function.</code></pre>
</div>
</div>
</section>
<section id="implementing-memoization-with-closures" class="level2">
<h2 class="anchored" data-anchor-id="implementing-memoization-with-closures">Implementing Memoization with Closures</h2>
<div id="9cafd684-373c-4fe1-8e7c-01b140c0785d" class="cell" data-execution_count="37">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> memoize(function):</span>
<span id="cb42-2">    cache <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb42-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> closure(number):</span>
<span id="cb42-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> number <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> cache:</span>
<span id="cb42-5">            cache[number] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> function(number)</span>
<span id="cb42-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> cache[number]</span>
<span id="cb42-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> closure</span></code></pre></div>
</details>
</div>
<div id="d59adf33-f417-498b-87f6-f9e286c1fab3" class="cell" data-execution_count="39">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sleep</span>
<span id="cb43-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> timeit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> timeit</span>
<span id="cb43-3"></span>
<span id="cb43-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> slow_operation(number):</span>
<span id="cb43-5">    sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb43-6"></span>
<span id="cb43-7">timeit(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[slow_operation(number) for number in [2, 3, 4, 2, 3, 4]]"</span>,</span>
<span id="cb43-8">       <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">globals</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">globals</span>(),</span>
<span id="cb43-9">       number<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb43-10">      )</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>3.0021948000066914</code></pre>
</div>
</div>
<div id="815b9972-f1ce-4c2a-987c-cbcf43d4ac95" class="cell" data-execution_count="40">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@memoize</span></span>
<span id="cb45-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> slow_operation(number):</span>
<span id="cb45-3">    sleep(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb45-4"></span>
<span id="cb45-5">timeit(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[slow_operation(number) for number in [2, 3, 4, 2, 3, 4]]"</span>,</span>
<span id="cb45-6">       <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">globals</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">globals</span>(),</span>
<span id="cb45-7">       number<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb45-8">      )</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>1.501583400007803</code></pre>
</div>
</div>
</section>
<section id="achieving-encapsulation-with-closures" class="level2">
<h2 class="anchored" data-anchor-id="achieving-encapsulation-with-closures">Achieving Encapsulation with Closures</h2>
<section id="private-methods-by-naming-convention" class="level4">
<h4 class="anchored" data-anchor-id="private-methods-by-naming-convention">Private Methods by Naming Convention</h4>
<div id="064d5215-cb46-443f-9ec1-5e26a006b0a0" class="cell" data-execution_count="41">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Stack:</span>
<span id="cb47-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb47-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb47-4"></span>
<span id="cb47-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> push(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, item):</span>
<span id="cb47-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._items.append(item)</span>
<span id="cb47-7"></span>
<span id="cb47-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pop(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb47-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._items.pop()</span>
<span id="cb47-10"></span>
<span id="cb47-11">stack <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Stack()</span>
<span id="cb47-12">stack.push(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb47-13">stack.push(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb47-14">stack.push(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb47-15"></span>
<span id="cb47-16">stack.pop()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>3</code></pre>
</div>
</div>
<div id="e2cde4e7-d423-4896-a177-4292a35cd1e7" class="cell" data-execution_count="42">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">stack._items</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>[1, 2]</code></pre>
</div>
</div>
</section>
<section id="private-methods-by-closures" class="level4">
<h4 class="anchored" data-anchor-id="private-methods-by-closures">Private Methods by Closures</h4>
<div id="8eb1c594-c07e-4227-9907-69b50c0541d2" class="cell" data-execution_count="43">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> Stack():</span>
<span id="cb51-2">    _items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb51-3"></span>
<span id="cb51-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> push(item):</span>
<span id="cb51-5">        _items.append(item)</span>
<span id="cb51-6"></span>
<span id="cb51-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pop():</span>
<span id="cb51-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> _items.pop()</span>
<span id="cb51-9"></span>
<span id="cb51-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> closure():</span>
<span id="cb51-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb51-12"></span>
<span id="cb51-13">    closure.push <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> push</span>
<span id="cb51-14">    closure.pop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pop</span>
<span id="cb51-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> closure</span>
<span id="cb51-16"></span>
<span id="cb51-17">stack <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Stack()</span>
<span id="cb51-18">stack.push(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb51-19">stack.push(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb51-20">stack.push(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb51-21"></span>
<span id="cb51-22">stack.pop()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>3</code></pre>
</div>
</div>
<div id="d4e9dff2-1920-4bb0-8278-cda58dca4f9c" class="cell" data-execution_count="44">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">stack._items</span></code></pre></div>
</details>
<div class="cell-output cell-output-error">
<pre><code>AttributeError: 'function' object has no attribute '_items'</code></pre>
</div>
</div>
<div id="66199ec0-39a6-4faf-b712-b6e05e4dad61" class="cell" data-execution_count="45">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">stack</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>&lt;function __main__.Stack.&lt;locals&gt;.closure()&gt;</code></pre>
</div>
</div>
</section>
</section>
<section id="exploring-alternatives-to-closures" class="level2">
<h2 class="anchored" data-anchor-id="exploring-alternatives-to-closures">Exploring Alternatives to Closures</h2>
<p>Instead of closures, which can be difficult to reason about, we can use classes with the <code>__call__()</code> method:</p>
<div id="1100a497-9965-436f-9c24-3fab56b106a9" class="cell" data-execution_count="46">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_root_calculator(root_degree, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb57-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> root_calculator(number):</span>
<span id="cb57-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(number, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> root_degree), precision)</span>
<span id="cb57-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> root_calculator</span>
<span id="cb57-5"></span>
<span id="cb57-6"></span>
<span id="cb57-7">square_root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_root_calculator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb57-8">square_root(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>6.4807</code></pre>
</div>
</div>
<div id="83ebc308-60a1-4285-8b61-e9f2a62ff025" class="cell" data-execution_count="47">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RootCalculator:</span>
<span id="cb59-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, root_degree, precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb59-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.root_degree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> root_degree</span>
<span id="cb59-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision</span>
<span id="cb59-5"></span>
<span id="cb59-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, number):</span>
<span id="cb59-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(number, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.root_degree), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.precision)</span>
<span id="cb59-8"></span>
<span id="cb59-9">square_root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RootCalculator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb59-10">square_root(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>6.4807</code></pre>
</div>
</div>
<div id="bee271a6-19fd-4b7e-95ab-1e865909f07e" class="cell" data-execution_count="48">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">cubic_root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RootCalculator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb61-2">cubic_root(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>3.48</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>http://thenewexecutor.github.io/notes/Closures.html</guid>
  <pubDate>Mon, 27 Oct 2025 06:25:28 GMT</pubDate>
</item>
<item>
  <title>Probability Distribution Notes</title>
  <dc:creator>Jonathan Sarker</dc:creator>
  <link>http://thenewexecutor.github.io/notes/ProbabilityDistributionNotes.html</link>
  <description><![CDATA[ 




<section id="probability-distribution-notes" class="level1">
<h1>Probability Distribution Notes</h1>
<section id="distribution-links" class="level2">
<h2 class="anchored" data-anchor-id="distribution-links">Distribution Links:</h2>
<ul>
<li><p>Bernoulli</p></li>
<li><p>Beta</p></li>
<li><p>Cauchy</p></li>
<li><p>Chi Squared</p></li>
<li><p>Exponential</p></li>
<li><p>Gamma</p></li>
<li><p>Lognormal</p></li>
<li><p>Multinomial</p></li>
<li><p>Normal</p></li>
<li><p>Pareto</p></li>
<li><p>Poisson</p></li>
<li><p>t-distribution</p></li>
<li><p>Uniform</p></li>
</ul>
</section>
<section id="means-and-variances-table" class="level2">
<h2 class="anchored" data-anchor-id="means-and-variances-table">Means and Variances Table</h2>
<ul>
<li>Table</li>
</ul>
<div id="cell-3" class="cell" data-execution_count="2">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> rnd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns </span>
<span id="cb1-8">sns.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span></code></pre></div>
</details>
</div>
<div id="cell-4" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot1(x,f):</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Convenient plotting of discrete distributions</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    x : x-axis values</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    f : scipy.stats pmf or pdf with parameters"""</span> </span>
<span id="cb2-5">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb2-6">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P(x)'</span>)</span>
<span id="cb2-7">    plt.vlines(x,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,f, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb2-8">    plt.show()</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot2(x, f, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]):</span>
<span id="cb2-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Convenient plotting of continuous distributions with varying parameters</span></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    x : x-axis values</span></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    f : list of scipy.stats pmf or pdf with parameters</span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    labels: parameter annotations"""</span> </span>
<span id="cb2-15">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb2-16">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P(x)'</span>)</span>
<span id="cb2-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i,label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(f,labels):</span>
<span id="cb2-18">        plt.plot(x,i, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>label)</span>
<span id="cb2-19">    plt.legend()</span>
<span id="cb2-20">    plt.show()</span></code></pre></div>
</details>
</div>
</section>
<section id="discrete-distributions" class="level2">
<h2 class="anchored" data-anchor-id="discrete-distributions">Discrete Distributions:</h2>
<section id="discrete-uniform-distribution" class="level3">
<h3 class="anchored" data-anchor-id="discrete-uniform-distribution">Discrete Uniform Distribution</h3>
<p>For <img src="https://latex.codecogs.com/png.latex?k%20%5Cge%201"> as a given integer, <img src="https://latex.codecogs.com/png.latex?X"> is uniformly distributed on <img src="https://latex.codecogs.com/png.latex?%5C%7B1,%20...,%20k%5C%7D"> if:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bequation%7D%0A%20%20%20%20f(x)%20=%20%5Cbegin%7Bcases%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%201/k%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20&amp;%20%5Ctext%7Bfor%20%7D%20%20x%20=%201,%20...,%20k%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20&amp;%20%5Ctext%7Botherwise%7D%0A%20%20%20%20%20%20%20%20%20%20%20%5Cend%7Bcases%7D%0A%5Cend%7Bequation%7D"></p>
<div id="cell-8" class="cell" data-scrolled="true" data-execution_count="4">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb3-2">low, high <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, k</span>
<span id="cb3-3">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,k)</span>
<span id="cb3-4">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint.pmf(x,low,high)</span>
<span id="cb3-5">plot1(x,f)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ProbabilityDistributionNotes_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><a id="bernoulli"></a></p>
</section>
<section id="bernoulli-distribution" class="level3">
<h3 class="anchored" data-anchor-id="bernoulli-distribution">Bernoulli Distribution</h3>
<p>Let <img src="https://latex.codecogs.com/png.latex?X"> represent an all or nothing event. Then <img src="https://latex.codecogs.com/png.latex?P(X=1)%20=%0Ap"> and <img src="https://latex.codecogs.com/png.latex?P(X=0)%20=%201-p"> for some <img src="https://latex.codecogs.com/png.latex?p%20%5Cin%20%5B0,%201%5D">. <img src="https://latex.codecogs.com/png.latex?X%5Csim"> Bernoulli if:</p>
<p><img src="https://latex.codecogs.com/png.latex?f(x)%20=%20p%5Ex(1-p)%5E%7B1-x%7D%20%5Ctext%7B%20for%20%7D%20x%20%5Cin%20%5C%7B0,%201%5C%7D"></p>
<div id="cell-12" class="cell" data-scrolled="true" data-execution_count="5">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-2">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.7</span></span>
<span id="cb4-3">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bernoulli.pmf(x,p)</span>
<span id="cb4-4">plot1(x,f)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ProbabilityDistributionNotes_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><a id="binomial"></a></p>
</section>
<section id="binomial-distribution" class="level3">
<h3 class="anchored" data-anchor-id="binomial-distribution">Binomial Distribution</h3>
<p>The binomial distribution answers the question, given a probabilities <img src="https://latex.codecogs.com/png.latex?p"> and <img src="https://latex.codecogs.com/png.latex?1-p"> for outcomes 1 and 2 of a Bernoulli trial, with N trials, what are the odds of seeing <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?N-x"> of outcomes 1 and 2, respectively?</p>
<p>Suppose we have a coin which falls on heads with probability <img src="https://latex.codecogs.com/png.latex?p%20%5Cin%20%5B0,1%5D"> and flip it <img src="https://latex.codecogs.com/png.latex?n"> times. Assuming the tosses are independent of each other we can represent the number of heads as <img src="https://latex.codecogs.com/png.latex?X"> and probability of getting <img src="https://latex.codecogs.com/png.latex?x"> heads as <img src="https://latex.codecogs.com/png.latex?f(X=x)">. Then:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bequation%7D%0A%20%20%20%20f(x)%20=%20%5Cbegin%7Bcases%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cbinom%7Bn%7D%7Bx%7Dp%5Ex(1-p)%5E%7Bn-x%7D%20%20%20&amp;%20%5Ctext%7Bfor%20%7D%20%20x%20=%200,%20...,%20n%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20&amp;%20%5Ctext%7Botherwise%7D%0A%20%20%20%20%20%20%20%20%20%20%20%5Cend%7Bcases%7D%0A%5Cend%7Bequation%7D"></p>
<p>We say <img src="https://latex.codecogs.com/png.latex?X%20%5Ctext%7B~%20Binomial%7D(n,p)"> where <img src="https://latex.codecogs.com/png.latex?X"> is the random variable and <img src="https://latex.codecogs.com/png.latex?n"> and <img src="https://latex.codecogs.com/png.latex?p"> are the parameters. Adapting our notation, another form is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bequation%7D%0A%20%20%20%20f(x%7Cn,%20p)%20=%20%5Cbegin%7Bcases%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cbinom%7Bn%7D%7Bx%7Dp%5Ex(1-p)%5E%7Bn-x%7D%20%20%20&amp;%20%5Ctext%7Bfor%20%7D%20%20x%20=%200,%20...,%20n%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20&amp;%20%5Ctext%7Botherwise%7D%0A%20%20%20%20%20%20%20%20%20%20%20%5Cend%7Bcases%7D%0A%5Cend%7Bequation%7D"></p>
<div id="cell-16" class="cell" data-execution_count="6">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb5-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-3">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span></span>
<span id="cb5-4">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> binom.pmf(x,n,p)</span>
<span id="cb5-5">plot1(x,f)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ProbabilityDistributionNotes_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><a id="multinomial"></a></p>
</section>
<section id="multinomial-distribution" class="level3">
<h3 class="anchored" data-anchor-id="multinomial-distribution">Multinomial Distribution</h3>
<p>This is a generalization of the binomial distribution, where now, instead of two outcomes, there are <img src="https://latex.codecogs.com/png.latex?m"> outcomes, with probabilities <img src="https://latex.codecogs.com/png.latex?p_i"> where <img src="https://latex.codecogs.com/png.latex?i%20%5Cin%20%5B1,2,...%20m%5D">. If there are a total of <img src="https://latex.codecogs.com/png.latex?N"> trials, then the probability of having the <img src="https://latex.codecogs.com/png.latex?N"> trials split into a specific set of outcomes <img src="https://latex.codecogs.com/png.latex?x_i"> is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?f(x_1,%20x_2,...,x_m)%20=%20%5Cdfrac%7Bm!%7D%7Bx_1!x_2!...x_m!%7Dp_1%5E%7Bx_1%7Dp_2%5E%7Bx_2%7D...p_m%5E%7Bx_m%7D%20=%20m!%5Cprod%5Em_%7Bi=1%7D%5Cdfrac%7Bp_i%5E%7Bx_i%7D%7D%7Bx_i!%7D"></p>
<p>Since it’s a multidimensional function, it’s difficult to visualize. Written in vector notation with outcome vector <img src="https://latex.codecogs.com/png.latex?%5Cbf%20x"> and probability vector <img src="https://latex.codecogs.com/png.latex?%5Cbf%20p"> as parameter, both of dimension <img src="https://latex.codecogs.com/png.latex?m">:</p>
<p><img src="https://latex.codecogs.com/png.latex?f(%5Cmathbf%7Bx%7D%20%7C%20%5Cmathbf%7Bp%7D)%20=%20m!%5Cprod%5Em_%7Bi=1%7D%5Cdfrac%7Bp_i%5E%7Bx_i%7D%7D%7Bx_i!%7D"></p>
<p><a id="geometric"></a></p>
</section>
<section id="geometric-distribution" class="level3">
<h3 class="anchored" data-anchor-id="geometric-distribution">Geometric Distribution</h3>
<p>For events like flipping a coin till first heads, where <img src="https://latex.codecogs.com/png.latex?X"> is the number of flips, the probability to meet the condition with <img src="https://latex.codecogs.com/png.latex?k"> flips is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?P(X=k)%20=%20p(1-p)%5E%7Bk-1%7D,%20%5Ctext%7B%20%20%20%20%20%7D%20k%5Cge1"></p>
<p>It’s also worth noting that:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Csum%5E%7B%5Cinfty%7D_%7Bk=1%7DP(X=k)%20=%20p%5Csum%5E%7B%5Cinfty%7D_%7Bk=0%7D(1-p)%5Ek%20=%20%5Cdfrac%7Bp%7D%7B1-(1-p)%7D%20=%201"></p>
<div id="cell-24" class="cell" data-execution_count="7">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span></span>
<span id="cb6-2">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> geom.pmf(x,p)</span>
<span id="cb6-3">plot1(x,f)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ProbabilityDistributionNotes_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><a id="hypergeometric"></a></p>
</section>
<section id="the-hypergeometric-distribution" class="level3">
<h3 class="anchored" data-anchor-id="the-hypergeometric-distribution">The Hypergeometric Distribution</h3>
<p>In contrast to the binomial distribution, for draws without replacement, the probability of a successful draw changes with each draw. Given a total of <img src="https://latex.codecogs.com/png.latex?N"> objects with <img src="https://latex.codecogs.com/png.latex?K"> success objects and <img src="https://latex.codecogs.com/png.latex?N-K"> others, the probability of <img src="https://latex.codecogs.com/png.latex?k"> successes in <img src="https://latex.codecogs.com/png.latex?n"> draws is given by the total combinations of drawing <img src="https://latex.codecogs.com/png.latex?k"> out of <img src="https://latex.codecogs.com/png.latex?K"> successes and <img src="https://latex.codecogs.com/png.latex?n-k"> out of <img src="https://latex.codecogs.com/png.latex?N-K"> other objects out of the total ways to draw <img src="https://latex.codecogs.com/png.latex?n"> out of <img src="https://latex.codecogs.com/png.latex?N"> objects:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20P(X%20=%20k%7Cn,N,K)%20=%20%5Cdfrac%7B%5Cbinom%7BK%7D%7Bk%7D%5Cbinom%7BN-K%7D%7Bn-k%7D%7D%7B%5Cbinom%7BN%7D%7Bn%7D%7D"></p>
<div id="cell-27" class="cell" data-execution_count="8">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">N, K, n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb7-2">k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-3">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hypergeom.pmf(k, N, n, K)</span>
<span id="cb7-4">plot1(k,f)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ProbabilityDistributionNotes_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><a id="poisson"></a></p>
</section>
<section id="the-poisson-distribution" class="level3">
<h3 class="anchored" data-anchor-id="the-poisson-distribution">The Poisson Distribution</h3>
<p>Often used to model rare events, <img src="https://latex.codecogs.com/png.latex?X%20%5Ctext%7B~%20Poisson%20%7D(%5Clambda)"> is defined by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20f(x)%20=%20%5Cexp(-%5Clambda)%5Cfrac%7B%5Clambda%5Ex%7D%7Bx!%7D"></p>
<p>It’s also worth noting that:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Csum%5E%7B%5Cinfty%7D_%7Bx=0%7Df(x)%20=%20%5Cexp(-%5Clambda)%20%5Csum%5E%7B%5Cinfty%7D_%7Bx=0%7D%5Cfrac%7B%5Clambda%5Ex%7D%7Bx!%7D%20=%20%5Cexp(-%5Clambda)%5Cexp(%5Clambda)=%201"></p>
<div id="cell-31" class="cell" data-execution_count="9">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-2">k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb8-3">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> poisson.pmf(x,k)</span>
<span id="cb8-4">plot1(x,f)</span>
<span id="cb8-5">plot1(x,poisson.pmf(x,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ProbabilityDistributionNotes_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ProbabilityDistributionNotes_files/figure-html/cell-9-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="continuous-distributions" class="level2">
<h2 class="anchored" data-anchor-id="continuous-distributions">Continuous Distributions:</h2>
<section id="continuous-uniform-distribution" class="level3">
<h3 class="anchored" data-anchor-id="continuous-uniform-distribution">Continuous Uniform Distribution</h3>
<p><img src="https://latex.codecogs.com/png.latex?X"> has a Uniform <img src="https://latex.codecogs.com/png.latex?(a,b)"> distribution, or <img src="https://latex.codecogs.com/png.latex?X%20%5Ctext%7B%20~Uniform%20%7D(a,b)"> if:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bequation%7D%0A%20%20%20%20f(x)%20=%20%5Cbegin%7Bcases%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cfrac%7B1%7D%7Bb-a%7D%20%20%20&amp;%20%5Ctext%7Bfor%20%7D%20%20x%20%5Cin%5Ba,b%5D%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20&amp;%20%5Ctext%7Botherwise%7D%0A%20%20%20%20%20%20%20%20%20%20%20%5Cend%7Bcases%7D%0A%5Cend%7Bequation%7D"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?a%20%3C%20b">. The distribution function is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bequation%7D%0A%20%20%20%20F(x)%20=%20%5Cbegin%7Bcases%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20&amp;%20x%20%3C%20a%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cfrac%7Bx-a%7D%7Bb-a%7D%20%20&amp;%20x%20%5Cin%20%5Ba,b%5D%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%201%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20&amp;%20x%20%3E%20b%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cend%7Bcases%7D%0A%5Cend%7Bequation%7D"></p>
<div id="cell-35" class="cell" data-jupyter="{&quot;outputs_hidden&quot;:true}" data-execution_count="10">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb9-2">scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span></span>
<span id="cb9-3">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(loc,loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>scale)</span>
<span id="cb9-4">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform.pdf(x, loc,scale)</span>
<span id="cb9-5">plot2(x,[f], [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>])</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>C:\Users\Jonathan\AppData\Local\Temp\ipykernel_20100\1199473827.py:19: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
  plt.legend()</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ProbabilityDistributionNotes_files/figure-html/cell-10-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><a id="normal"></a></p>
</section>
<section id="normal-gaussian-distributions" class="level3">
<h3 class="anchored" data-anchor-id="normal-gaussian-distributions">Normal (Gaussian) Distributions</h3>
<p><img src="https://latex.codecogs.com/png.latex?X"> has a Normal or Gaussian distribution with parameters <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma">, denoted by <img src="https://latex.codecogs.com/png.latex?X%20%5Ctext%7B%20~%20%7DN(%5Cmu,%20%5Csigma%5E2)"> if:</p>
<p><img src="https://latex.codecogs.com/png.latex?f(x)%20=%20%5Cfrac%7B1%7D%7B%5Csigma%20%5Csqrt%7B2%20%5Cpi%7D%7D%20%5Cexp%5CBig%5C%7B-%5Cfrac%7B1%7D%7B2%5Csigma%5E2%7D(x-%5Cmu)%5E2%5CBig%5C%7D,%20%5Cquad%5Ctext%7B%20%20%7D%20x%20%5Cin%20%5Cmathbb%7BR%7D%20"></p>
<div id="cell-39" class="cell" data-jupyter="{&quot;outputs_hidden&quot;:true}" data-execution_count="11">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">u_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,]</span>
<span id="cb11-2">sigma_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb11-3">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>)</span>
<span id="cb11-4">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [norm.pdf(x,u,sigma) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> u,sigma <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(u_, sigma_)]</span>
<span id="cb11-5">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'$\mu = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$, $\sigma = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>(u,sigma) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> u, sigma <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(u_, sigma_)]</span>
<span id="cb11-6">plot2(x,f, labels)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ProbabilityDistributionNotes_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><a id="exponential"></a></p>
</section>
<section id="exponential-distribution" class="level3">
<h3 class="anchored" data-anchor-id="exponential-distribution">Exponential Distribution</h3>
<p><img src="https://latex.codecogs.com/png.latex?X"> has an Exponential distribution with parameber <img src="https://latex.codecogs.com/png.latex?%5Cbeta">, noted by <img src="https://latex.codecogs.com/png.latex?X%20%5Ctext%7B%20~%20Exp%7D(%5Cbeta)"> if:</p>
<p><img src="https://latex.codecogs.com/png.latex?f(x)%20=%20%5Cdfrac%7B1%7D%7B%5Cbeta%7D%5Cexp%5CBig(-%5Cfrac%7Bx%7D%7B%5Cbeta%7D%5CBig),%20%5Cquad%20%5Ctext%7B%20%20%20%20%20%7D%20x%20%3E0"></p>
<div id="cell-43" class="cell" data-jupyter="{&quot;outputs_hidden&quot;:true}" data-execution_count="12">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>)</span>
<span id="cb12-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>)</span>
<span id="cb12-3">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [expon.pdf(x, B) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> B <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> b]</span>
<span id="cb12-4">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'$\beta = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.1f</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> B <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> B <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> b]</span>
<span id="cb12-5">plot2(x,f,labels)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ProbabilityDistributionNotes_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><a id="gamma"></a></p>
</section>
<section id="gamma-distribution" class="level3">
<h3 class="anchored" data-anchor-id="gamma-distribution">Gamma Distribution</h3>
<p>For <img src="https://latex.codecogs.com/png.latex?%5Calpha%20%3E%200">, the Gamma function is defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5CGamma(%5Calpha)%20%5Cequiv%20%5Cint%5E%5Cinfty_0%20y%5E%7B%5Calpha%20-1%7D%5Cexp(-y)dy"></p>
<p><img src="https://latex.codecogs.com/png.latex?X"> has a Gamma distribution with parameters <img src="https://latex.codecogs.com/png.latex?%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta">, or <img src="https://latex.codecogs.com/png.latex?X%20%5Ctext%7B%20~%20Gamma%7D(%5Calpha,%20%5Cbeta)">, if:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20f(x)%20=%20%5Cdfrac%7B1%7D%7B%5Cbeta%5E%5Calpha%20%5CGamma(%5Calpha)%7Dx%5E%7B%5Calpha-1%7D%5Cexp%5CBig(-%5Cdfrac%7Bx%7D%7B%5Cbeta%7D%5CBig),%20%5Cquad%20%5Ctext%7B%20%20%7D%20x%3E0"></p>
<p><strong>Special cases</strong>: - The Exponential distribution is the special case of <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BGamma%7D(1,%20%5Cbeta)"> - The Chi-square distribution is a special case of <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BGamma%7D(p/2,%202)"> - Using <img src="https://latex.codecogs.com/png.latex?y%20=%20u%5E2">, <img src="https://latex.codecogs.com/png.latex?dy%20=%202udu">, and the result $^_{-}({-u^2}) = $</p>
<div id="cell-47" class="cell" data-execution_count="13">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>)</span>
<span id="cb13-2">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape</span></span>
<span id="cb13-3">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scale</span></span>
<span id="cb13-4">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [gamma.pdf(x,a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>a,scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>b) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> A <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> B]</span>
<span id="cb13-5">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'$\alpha = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.1f</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$, $\beta = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.1f</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (a,b) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> A <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> B]</span>
<span id="cb13-6">plot2(x,f, labels)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ProbabilityDistributionNotes_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="chi-squared-distribution" class="level3">
<h3 class="anchored" data-anchor-id="chi-squared-distribution">Chi Squared Distribution</h3>
<p><a id="chi2"></a></p>
<p><img src="https://latex.codecogs.com/png.latex?X"> has a <img src="https://latex.codecogs.com/png.latex?%5Cchi%5E2"> distribution with <img src="https://latex.codecogs.com/png.latex?p"> degrees of freedom, denoted by <img src="https://latex.codecogs.com/png.latex?X%20%5Ctext%7B%20~%20%7D%5Cchi_p%5E2"> if:</p>
<p><img src="https://latex.codecogs.com/png.latex?f(x)%20=%20%5Cdfrac%7B1%7D%7B%5CGamma(p/2)%202%5E%7Bp/2%7D%7Dx%5E%7B(p/2)-1%7D%5Cexp(-x/2)%20%5Ctext%7B,%20%7D%20%5Cquad%20x%3E0"></p>
<section id="relationship-with-normal" class="level4">
<h4 class="anchored" data-anchor-id="relationship-with-normal">Relationship with Normal</h4>
<p>This distribution is related to the normal distribution in that if a variable <img src="https://latex.codecogs.com/png.latex?X"> has a standard normal distribution, its square follows a chi-square distribution with one degree of freedom: <img src="https://latex.codecogs.com/png.latex?Y%20=%20X%5E2%20%5Ctext%7B~%7D%20%5Cchi%5E2_1">.</p>
<p>Often, we compare how far a value is from an expected one by finding the square of their difference. If the variable converges to a normal distribution, the square of the difference can be considered a chi squared distribution.</p>
<div id="cell-51" class="cell" data-execution_count="14">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>)</span>
<span id="cb14-2">df_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-3">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>)</span>
<span id="cb14-4">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [chi2.pdf(x,df) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> df <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> df_]</span>
<span id="cb14-5">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'$\nu = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.1f</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>df <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> df <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> df_]</span>
<span id="cb14-6">plot2(x,f, labels)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ProbabilityDistributionNotes_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="beta-distribution" class="level3">
<h3 class="anchored" data-anchor-id="beta-distribution">Beta Distribution</h3>
<p><a id="beta"></a></p>
<p>The Beta function is defined as</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BBeta%7D(a,b)%20%5Cequiv%20%5Cint%5E%5Cinfty_0%20t%5E%7Ba-1%7D(1-t)%5E%7Bb-1%7D%20=%20%5Cdfrac%7B%5CGamma(a)%5CGamma(b)%7D%7B%5CGamma(a+b)%7D"></p>
<p>See <a href="https://en.wikipedia.org/wiki/Beta_function">here</a> for the proof of the last equality which involves change of variables in evaluating the product of two Gamma functions.</p>
<p><img src="https://latex.codecogs.com/png.latex?X"> has a Beta distribution with parameters <img src="https://latex.codecogs.com/png.latex?%5Calpha%20%3E%200"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta%20%3E%200">, denoted by <img src="https://latex.codecogs.com/png.latex?X%20%5Ctext%7B%20~%20Beta%7D%20(%5Calpha,%20%5Cbeta)"> if:</p>
<p><img src="https://latex.codecogs.com/png.latex?f(x)%20=%20%5Cdfrac%7B%5CGamma(%5Calpha%20+%20%5Cbeta)%7D%7B%5CGamma(%5Calpha)%5CGamma(%5Cbeta)%7Dx%5E%7B%5Calpha-1%7D(1-x)%5E%7B%5Cbeta-1%7D,%20%5Cquad%5Ctext%7B%20%7D%200%3Cx%3C1"></p>
<p>Alternatively, we can view the the beta distribution as a distribution over probabilities, <img src="https://latex.codecogs.com/png.latex?p"> and parameters of number of outcomes <img src="https://latex.codecogs.com/png.latex?u_1"> and <img src="https://latex.codecogs.com/png.latex?u_2">:</p>
<p><img src="https://latex.codecogs.com/png.latex?f(p%7Cu_1,u_2)%20=%20%5Cdfrac%7B%5CGamma(u_1%20+%20u_2)%7D%7B%5CGamma(u_1)%5CGamma(u_2)%7Dp%5E%7Bu_1-1%7D(1-p)%5E%7Bu_2-1%7D,%20%5Cquad%5Ctext%7B%20%7D%200%3Cp%3C1"></p>
<div id="cell-55" class="cell" data-execution_count="15">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.99</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.001</span>)</span>
<span id="cb15-2">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#B = np.arange(1,6,1) # scale</span></span>
<span id="cb15-4">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>A</span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#f = [beta.pdf(x,a=a,b=b) for a in A for b in B]</span></span>
<span id="cb15-6">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [beta.pdf(x, a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>a,b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>b) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a,b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(A,B)]</span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#labels = [r'$\alpha = %.1f$, $\beta = %.1f$' % (a,b) for a in A for b in B]</span></span>
<span id="cb15-8">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'$\alpha = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.1f</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$, $\beta = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.1f</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (a,b) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a,b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(A,B)]</span>
<span id="cb15-9"></span>
<span id="cb15-10">plot2(x,f, labels)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ProbabilityDistributionNotes_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="dirichlet-distribution" class="level3">
<h3 class="anchored" data-anchor-id="dirichlet-distribution">Dirichlet Distribution</h3>
<p><a id="dirichlet"></a></p>
<p>The Dirichlet distribution is an extention of the beta distribution to more dimensions. It’s a density over a <em>K</em>-dimensional vector, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bp%7D">, with <img src="https://latex.codecogs.com/png.latex?%5Csum%20p_i%20=%201">. It is defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?f(%5Cmathbf%7Bp%7D%7C%5Calpha%20%5Cmathbf%7Bm%7D)%20=%20%5Cdfrac%7B1%7D%7BZ(%5Calpha%20%5Cmathbf%7Bm%7D)%7D%5Cprod_%7Bi=1%7D%5EK%20p%5E%7B%5Calpha%20m_i%20-%201%7D_i%20%5Cequiv%20%5Ctext%7BDirichlet%7D%5E%7B(K)%7D(%5Cmathbf%7Bp%7D%7C%5Calpha%5Cmathbf%7Bm%7D),%20%5Cquad%5Ctext%7B%20%7D%200%3Cp%3C1"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bm%7D"> is normalized such that <img src="https://latex.codecogs.com/png.latex?%5Csum%20m_i%20=%201"> and <img src="https://latex.codecogs.com/png.latex?%5Calpha%20%3E%200">. The normalizing constant is defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?Z(%5Calpha%5Cmathbf%7Bm%7D)%20=%20%5Cprod_i%20%5CGamma(%5Calpha%20m_i)/%5CGamma(%5Calpha)"></p>
<p>The parameter <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bm%7D"> is the mean of the probability distribution while the constant <img src="https://latex.codecogs.com/png.latex?%5Calpha"></p>
</section>
<section id="t-and-cauchy-distribution" class="level3">
<h3 class="anchored" data-anchor-id="t-and-cauchy-distribution">t and Cauchy Distribution</h3>
<p><a id="t"></a> <a id="cauchy"></a></p>
<p><img src="https://latex.codecogs.com/png.latex?X"> has a <img src="https://latex.codecogs.com/png.latex?t"> distribution with <img src="https://latex.codecogs.com/png.latex?v"> degrees of freedom, denoted by <img src="https://latex.codecogs.com/png.latex?X%20%5Ctext%7B%20~%20%7Dt_v"> - if:</p>
<p><img src="https://latex.codecogs.com/png.latex?f(x)%20=%20%5Cdfrac%7B%5CGamma%5CBig(%5Cdfrac%7Bv+1%7D%7B2%7D%5CBig)%7D%7B%5CGamma%20%5CBig(%5Cdfrac%7Bv%7D%7B2%7D%5CBig)%7D%5Cdfrac%7B1%7D%7B%5Csqrt%7B%5Cnu%20%5Cpi%7D%7D%20%5Cdfrac%7B1%7D%7B%5CBig(1+%5Cdfrac%7Bx%5E2%7D%7Bv%7D%5CBig)%5E%7B(v+1)/2%7D%7D"></p>
<p>The Cauchy is a special case of the <img src="https://latex.codecogs.com/png.latex?t"> distribution with <img src="https://latex.codecogs.com/png.latex?v%20=%201">. The density is:</p>
<p><img src="https://latex.codecogs.com/png.latex?f(x)%20=%20%5Cdfrac%7B1%7D%7B%5Cpi%20(1+x%5E2)%7D"></p>
<p>We can see that it’s a probability density since it’s never negative, and it integrates to unity:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cint%5E%5Cinfty_%7B-%5Cinfty%7D%20f(x)dx%20=%20%5Cdfrac%7B1%7D%7B%5Cpi%7D%5Cint%5E%5Cinfty_%7B-%5Cinfty%7D%5Cdfrac%7B1%7D%7B%5Cpi%20(1+x%5E2)%7D%20=%20%5Cdfrac%7B1%7D%7B%5Cpi%7D%5Cint%5E%5Cinfty_%7B-%5Cinfty%7D%5Cdfrac%7Bd%5Carctan%7D%7Bdx%7D%20=%20%5Cdfrac%7B1%7D%7B%5Cpi%7D%5B%5Carctan(%5Cinfty)%20-%20%5Carctan(-%5Cinfty)%5D%20=%20%5Cdfrac%7B1%7D%7B%5Cpi%7D%5CBig%5B%5Cdfrac%7B%5Cpi%7D%7B2%7D-%5CBig(-%5Cdfrac%7B%5Cpi%7D%7B2%7D%5CBig)%5CBig%5D=1"></p>
<p>While the mean and variance do not exist for the Cauchy distribution, it often is seen with location parameter <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and scale parameter <img src="https://latex.codecogs.com/png.latex?%5Csigma"> by the transformation <img src="https://latex.codecogs.com/png.latex?x%20%5Crightarrow%20%5Cdfrac%7Bx-%5Cmu%7D%7B%5Csigma%7D">, and <img src="https://latex.codecogs.com/png.latex?dx%20%5Crightarrow%20%5Cfrac%7B1%7D%7B%5Csigma%7D"> to obtain the modified pdf:</p>
<p><img src="https://latex.codecogs.com/png.latex?f(x)%20=%20%5Cdfrac%7B1%7D%7B%5Csigma%5Cpi%20%5CBig(1+%5Cbig%5B%5Cfrac%7Bx-%5Cmu%7D%7B%5Csigma%7D%5Cbig%5D%5E2%5CBig)%7D"></p>
<div id="cell-62" class="cell" data-execution_count="16">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">df_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>)</span>
<span id="cb16-3">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [t.pdf(x,df) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> df <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> df_]</span>
<span id="cb16-4">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'$\nu = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.1f</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>df <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> df <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> df_]</span>
<span id="cb16-5">plot2(x,f, labels)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ProbabilityDistributionNotes_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="student-t-as-a-mixture-of-normals" class="level4">
<h4 class="anchored" data-anchor-id="student-t-as-a-mixture-of-normals">Student-t as a Mixture of Normals</h4>
<p>Let <img src="https://latex.codecogs.com/png.latex?X%7CW"> ~ <img src="https://latex.codecogs.com/png.latex?N(0,W)"> and let <img src="https://latex.codecogs.com/png.latex?W%20~%20Gamma(%5Cnu/2,%20%5Cnu/2)">. Then the distribution of <img src="https://latex.codecogs.com/png.latex?X"> is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0Af_X(x)%20&amp;=%20%5Cint%5E%7B%5Cinfty%7D_0%20%5C%5C%0A%20%20%20%20&amp;%5Cpropto%20%5Cfrac%7B1%7D%7B%5Csqrt%7Bw%7D%7D%5Cexp%5Cbig(-%5Cfrac%7Bx%5E2%7D%7B2w%7D%5Cbig)%5C%5C%0A%5Cend%7Balign%7D"></p>
<p><a id="pareto"></a></p>
</section>
</section>
<section id="pareto-distribution" class="level3">
<h3 class="anchored" data-anchor-id="pareto-distribution">Pareto Distribution</h3>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bequation%7D%0A%20%20%20%20f(x)%20=%20%5Cbegin%7Bcases%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cdfrac%7B%5Calpha%20x_m%5E%5Calpha%7D%7Bx%5E%7B%5Calpha+1%7D%7D%20%20%20&amp;%20%5Ctext%7Bfor%20%7D%20%20x%20%5Cge%20x_m%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20&amp;%20%5Ctext%7Bfor%20%7D%20x%20%3C%20x_m%0A%20%20%20%20%20%20%20%20%20%20%20%5Cend%7Bcases%7D%0A%5Cend%7Bequation%7D"></p>
<div id="cell-66" class="cell" data-execution_count="17">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb17-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>)</span>
<span id="cb17-3">a_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-4">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [pareto.pdf(x,a, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> a_]</span>
<span id="cb17-5">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'$\alpha = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.1f</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>a <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> a_]</span>
<span id="cb17-6">plot2(x,f, labels)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ProbabilityDistributionNotes_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="log-normal-distribution" class="level3">
<h3 class="anchored" data-anchor-id="log-normal-distribution">Log-normal Distribution</h3>
<p><a id="lognormal"></a></p>
<p><img src="https://latex.codecogs.com/png.latex?X"> has a Log-normal distribution with parameters <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma">, denoted by $ X (, )$ if <img src="https://latex.codecogs.com/png.latex?%5Cln%20X%20%5Csim%20N(%5Cmu,%20%5Csigma%5E2)">. This results in a probability distribution function of:</p>
<p><img src="https://latex.codecogs.com/png.latex?f(x)%20=%20%5Cfrac%7B1%7D%7Bx%5Csigma%20%5Csqrt%7B2%20%5Cpi%7D%7D%20%5Cexp%5CBig%5C%7B-%5Cfrac%7B1%7D%7B2%5Csigma%5E2%7D(%5Cln%20x-%5Cmu)%5E2%5CBig%5C%7D,%20%5Cquad%5Ctext%7B%20%20%7D%20x%20%5Cin%20%5Cmathbb%7BR%7D%20"></p>
<div id="cell-69" class="cell" data-jupyter="{&quot;outputs_hidden&quot;:true}" data-execution_count="6">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">u_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb18-2">sigma_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb18-3">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>)</span>
<span id="cb18-4">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [lognorm.pdf(x,loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>u,s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sigma) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> u,sigma <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(u_, sigma_)]</span>
<span id="cb18-5">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'$\mu = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$, $\sigma = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>(u,sigma) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> u, sigma <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(u_, sigma_)]</span>
<span id="cb18-6">plot2(x,f, labels)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="http://thenewexecutor.github.io/notes/ProbabilityDistributionNotes_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="means-and-variance-of-common-distributions" class="level2">
<h2 class="anchored" data-anchor-id="means-and-variance-of-common-distributions">Means and Variance of Common Distributions</h2>
<p>For convenience <img src="https://latex.codecogs.com/png.latex?%5Coverline%7BX%7D%20=%20%5Cdfrac%7B%5Csum%5En_%7Bi=1%7DX_i%7D%7Bn%7D"> and <img src="https://latex.codecogs.com/png.latex?S%5E2%20=%20%5Cdfrac%7B%5Csum%5En_%7Bi=1%7D%20(X_i-%5Coverline%7BX%7D)%5E2%7D%7Bn%7D">. <a id="bottom"></a></p>
<table cellspacing="25">
<tbody><tr>
<th>
Distribution
</th>
<th>
Mean
</th>
<th>
Variance
</th>
<th>
Maximum Likelihood Estimator
</th>
<th>
Moment Generating Function
</th>
</tr>
<tr>
<td>
Point mass at a
</td>
<td>
a
</td>
<td>
0
</td>
<td>
N
</td>
<td>
N
</td>
</tr>
<tr>
<td>
Bernoulli (p)
</td>
<td>
p
</td>
<td>
p(1-p)
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Chat%7Bp%7D%20=%5Coverline%7BX%7D">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?1%20+%20pe%5Et%20-%20p">
</td>
</tr>
<tr>
<td>
Binomial (n, p)
</td>
<td>
np
</td>
<td>
np(1-p)
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Chat%7Bp%7D%20=%5Coverline%7BX%7D">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?(1%20+%20pe%5Et%20-%20p)%5En">
</td>
</tr>
<tr>
<td>
Geometric
</td>
<td>
1/p
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cdfrac%7B(1-p)%7D%7Bp%5E2%7D">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Chat%7Bp%7D%20=%5Cdfrac%7B1%7D%7B%5Coverline%7BX%7D%7D">
</td>
<td>
N/a
</td>
</tr>
<tr>
<td>
Hypergeometric
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?n%5Cdfrac%7BK%7D%7BN%7D">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?n%5Cdfrac%7BK%7D%7BN%7D%5Cdfrac%7B(N-K)%7D%7BN%7D%5Cdfrac%7BN-n%7D%7BN-1%7D">
</td>
<td>
</td>
<td>
</td>
</tr>
<tr>
<td>
Poisson <img src="https://latex.codecogs.com/png.latex?(%5Clambda)">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Clambda">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Clambda">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Clambda%7D%20=%20%5Coverline%7BX%7D">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cexp%5CBig(%5Clambda%5Be%5Et-1%5D%5CBig)">
</td>
</tr>
<tr>
<td>
Uniform <img src="https://latex.codecogs.com/png.latex?(a,%20b)">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cdfrac%7B(a+b)%7D%7B2%7D">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cdfrac%7B(b-a)%5E2%7D%7B12%7D">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%20%5Ctext%7Bfor%20U%7D&amp;(0,%5Ctheta)%20%5C%5C%20%5Chat%7B%5Ctheta%7D%20&amp;=%20%5Cmax%5C%7BX_i%5C%7D%5Cend%7Balign%7D">
</td>
</tr>
<tr>
<td>
Normal <img src="https://latex.codecogs.com/png.latex?(%5Cmu,%20%5Csigma%5E2)">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cmu">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%5Chat%7Bp%7D&amp;=%5Coverline%7BX%7D%5C%5C%0A%20%20%20%5Cquad%20%5Chat%7B%5Csigma%7D%20&amp;=S%5Cend%7Balign%7D">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cexp%5CBig(%5Cmu%20t%20+%20%5Cfrac%7B%5Csigma%5E2%20t%5E2%7D%7B2%7D%5CBig)">
</td>
</tr>
<tr>
<td>
Exponential <img src="https://latex.codecogs.com/png.latex?(%5Cbeta)">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cbeta">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cbeta%5E2">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cbeta%7D=%20%5Coverline%7BX%7D">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cdfrac%7B1%7D%7B(1-%5Cbeta%20t)%7D">
</td>
</tr>
<tr>
<td>
Gamma <img src="https://latex.codecogs.com/png.latex?(%5Calpha,%20%5Cbeta)">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Calpha%20%5Cbeta">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Calpha%20%5Cbeta%5E2">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cbeta%7D=%20%5Cdfrac%7B%5Coverline%7BX%7D%7D%7B%5Calpha%7D">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cdfrac%7B1%7D%7B(1-%5Cbeta%20t)%5E%5Calpha%7D">
</td>
</tr>
<tr>
<td>
Beta <img src="https://latex.codecogs.com/png.latex?(%5Calpha,%20%5Cbeta)">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cdfrac%7B%5Calpha%7D%7B(%5Calpha%20+%20%5Cbeta)%7D">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cdfrac%7B%5Calpha%20%5Cbeta%7D%7B(%5Calpha%20+%20%5Cbeta)%5E2(%5Calpha%20+%20%5Cbeta%20+%201)%7D">
</td>
</tr>
<tr>
<td>
<img src="https://latex.codecogs.com/png.latex?t_%7B%5Cnu%7D">
</td>
<td>
0 if <img src="https://latex.codecogs.com/png.latex?(%5Cnu%20%3E%201)">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cdfrac%7B%5Cnu%7D%7B%5Cnu%20-%202%7D">
</td>
</tr>
<tr>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cchi%5E2_p">
</td>
<td>
p
</td>
<td>
2p
</td>
<td>
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cdfrac%7B1%7D%7B(1-2%20t)%5E%7Bp/2%7D%7D">
</td>
</tr>
<tr>
<td>
Pareto
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cdfrac%7B%5Calpha%20x%5E%5Calpha_m%7D%7B%5Calpha-1%7D">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cdfrac%7B%5Calpha%20x%5E%5Calpha_m%7D%7B(%5Calpha-2)(%5Calpha-1)%5E2%7D">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%5Chat%7Bx%7D_m%20&amp;=%20x_%7B(1)%7D%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%5Chat%7B%5Calpha%7D&amp;=%20%5Cdfrac%7B1%7D%7B%5Cfrac%7B1%7D%7Bn%7D%5Csum%5En_%7Bi=1%7D%7B%5Cln%20x_i%7D-%20%5Cln(x_1)%7D%20%5Cend%7Balign%7D">
</td>
</tr>
<tr>
<td>
Multinomial <img src="https://latex.codecogs.com/png.latex?(n,%20%5Cmathbf%7Bp%7D)">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?n%5Cmathbf%7Bp%7D">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7DM_%7Bii%7D%20&amp;=%20np_i(1-p_i)%5C%5C%0A%20%20%20%20%20%20%20%20%20%20M_%7Bij%7D&amp;=%20-np_i%20p_j%20%5Cend%7Balign%7D">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cmathbf%7Bp%7D%7D%20=%5Coverline%7BX%7D">
</td>
</tr>
<tr>
<td>
Multivariate Normal <img src="https://latex.codecogs.com/png.latex?(%5Cmu,%20%5CSigma)">
</td>
<td>
<img src="https://latex.codecogs.com/png.latex?%5Cmu">
</td>
<td>
Matrix <img src="https://latex.codecogs.com/png.latex?%5CSigma_%7Bij%7D%20=%20%5Ctext%7BCov%7D(X_i,%20X_j)">
</td>
</tr>
</tbody></table>


</section>
</section>

 ]]></description>
  <guid>http://thenewexecutor.github.io/notes/ProbabilityDistributionNotes.html</guid>
  <pubDate>Mon, 27 Oct 2025 06:25:28 GMT</pubDate>
</item>
</channel>
</rss>
